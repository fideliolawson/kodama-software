
Kodama_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003868  08003868  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003868  08003868  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003868  08003868  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003868  08003868  00013868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  08003880  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003880  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9e1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002148  00000000  00000000  0002ea19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00030b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00031878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001091c  00000000  00000000  000324b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc25  00000000  00000000  00042dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000658a7  00000000  00000000  000529f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb4  00000000  00000000  000b82ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003818 	.word	0x08003818

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003818 	.word	0x08003818

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc84 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f809 	bl	800023e <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f924 	bl	8000478 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f8f2 	bl	8000418 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000234:	f000 f866 	bl	8000304 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8bc 	bl	80003b4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x1c>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b590      	push	{r4, r7, lr}
 8000240:	b097      	sub	sp, #92	; 0x5c
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	2428      	movs	r4, #40	; 0x28
 8000246:	193b      	adds	r3, r7, r4
 8000248:	0018      	movs	r0, r3
 800024a:	2330      	movs	r3, #48	; 0x30
 800024c:	001a      	movs	r2, r3
 800024e:	2100      	movs	r1, #0
 8000250:	f003 fad9 	bl	8003806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	2318      	movs	r3, #24
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	0018      	movs	r0, r3
 800025a:	2310      	movs	r3, #16
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f003 fad1 	bl	8003806 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f003 faca 	bl	8003806 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000272:	0021      	movs	r1, r4
 8000274:	187b      	adds	r3, r7, r1
 8000276:	2202      	movs	r2, #2
 8000278:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	187b      	adds	r3, r7, r1
 800027c:	2201      	movs	r2, #1
 800027e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000280:	187b      	adds	r3, r7, r1
 8000282:	2210      	movs	r2, #16
 8000284:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2202      	movs	r2, #2
 800028a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0212      	lsls	r2, r2, #8
 8000292:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	0352      	lsls	r2, r2, #13
 800029a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f94f 	bl	8001548 <HAL_RCC_OscConfig>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002ae:	f000 fa35 	bl	800071c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b2:	2118      	movs	r1, #24
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2207      	movs	r2, #7
 80002b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2101      	movs	r1, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fc57 	bl	8001b84 <HAL_RCC_ClockConfig>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002da:	f000 fa1f 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2201      	movs	r2, #1
 80002e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	0018      	movs	r0, r3
 80002ee:	f001 fd9d 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002f6:	f000 fa11 	bl	800071c <Error_Handler>
  }
}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b017      	add	sp, #92	; 0x5c
 8000300:	bd90      	pop	{r4, r7, pc}
	...

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	2308      	movs	r3, #8
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	2310      	movs	r3, #16
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f003 fa76 	bl	8003806 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	2308      	movs	r3, #8
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f003 fa6f 	bl	8003806 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <MX_TIM1_Init+0xa8>)
 800032a:	4a21      	ldr	r2, [pc, #132]	; (80003b0 <MX_TIM1_Init+0xac>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000330:	22fa      	movs	r2, #250	; 0xfa
 8000332:	01d2      	lsls	r2, r2, #7
 8000334:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <MX_TIM1_Init+0xa8>)
 800033e:	2232      	movs	r2, #50	; 0x32
 8000340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	; (80003ac <MX_TIM1_Init+0xa8>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000354:	4b15      	ldr	r3, [pc, #84]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000356:	0018      	movs	r0, r3
 8000358:	f001 fe46 	bl	8001fe8 <HAL_TIM_Base_Init>
 800035c:	1e03      	subs	r3, r0, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000360:	f000 f9dc 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	2108      	movs	r1, #8
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2280      	movs	r2, #128	; 0x80
 800036a:	0152      	lsls	r2, r2, #5
 800036c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800036e:	187a      	adds	r2, r7, r1
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000372:	0011      	movs	r1, r2
 8000374:	0018      	movs	r0, r3
 8000376:	f002 f817 	bl	80023a8 <HAL_TIM_ConfigClockSource>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800037e:	f000 f9cd 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000382:	003b      	movs	r3, r7
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800038e:	003a      	movs	r2, r7
 8000390:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_TIM1_Init+0xa8>)
 8000392:	0011      	movs	r1, r2
 8000394:	0018      	movs	r0, r3
 8000396:	f002 fa0b 	bl	80027b0 <HAL_TIMEx_MasterConfigSynchronization>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800039e:	f000 f9bd 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b006      	add	sp, #24
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	200000b0 	.word	0x200000b0
 80003b0:	40012c00 	.word	0x40012c00

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <MX_USART1_UART_Init+0x5c>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003c0:	4a14      	ldr	r2, [pc, #80]	; (8000414 <MX_USART1_UART_Init+0x60>)
 80003c2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d6:	4b0d      	ldr	r3, [pc, #52]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003d8:	220c      	movs	r2, #12
 80003da:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ee:	4b07      	ldr	r3, [pc, #28]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <MX_USART1_UART_Init+0x58>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f002 fa42 	bl	8002880 <HAL_UART_Init>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000400:	f000 f98c 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	2000002c 	.word	0x2000002c
 8000410:	40013800 	.word	0x40013800
 8000414:	00007a12 	.word	0x00007a12

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <MX_USART2_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000424:	2296      	movs	r2, #150	; 0x96
 8000426:	0192      	lsls	r2, r2, #6
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800043e:	2208      	movs	r2, #8
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800045c:	0018      	movs	r0, r3
 800045e:	f002 fa0f 	bl	8002880 <HAL_UART_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f959 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	200000f8 	.word	0x200000f8
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b08b      	sub	sp, #44	; 0x2c
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	2414      	movs	r4, #20
 8000480:	193b      	adds	r3, r7, r4
 8000482:	0018      	movs	r0, r3
 8000484:	2314      	movs	r3, #20
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f003 f9bc 	bl	8003806 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b49      	ldr	r3, [pc, #292]	; (80005b4 <MX_GPIO_Init+0x13c>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <MX_GPIO_Init+0x13c>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	0309      	lsls	r1, r1, #12
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <MX_GPIO_Init+0x13c>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	031b      	lsls	r3, r3, #12
 80004a4:	4013      	ands	r3, r2
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	4b41      	ldr	r3, [pc, #260]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	03c9      	lsls	r1, r1, #15
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]
 80004b8:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004ba:	695a      	ldr	r2, [r3, #20]
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	03db      	lsls	r3, r3, #15
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c6:	4b3b      	ldr	r3, [pc, #236]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004c8:	695a      	ldr	r2, [r3, #20]
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	0289      	lsls	r1, r1, #10
 80004d0:	430a      	orrs	r2, r1
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	029b      	lsls	r3, r3, #10
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004e4:	695a      	ldr	r2, [r3, #20]
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	02c9      	lsls	r1, r1, #11
 80004ec:	430a      	orrs	r2, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <MX_GPIO_Init+0x13c>)
 80004f2:	695a      	ldr	r2, [r3, #20]
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	02db      	lsls	r3, r3, #11
 80004f8:	4013      	ands	r3, r2
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	0018      	movs	r0, r3
 8000508:	f000 ffe5 	bl	80014d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2280      	movs	r2, #128	; 0x80
 8000510:	0192      	lsls	r2, r2, #6
 8000512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2288      	movs	r2, #136	; 0x88
 8000518:	0352      	lsls	r2, r2, #13
 800051a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000522:	193b      	adds	r3, r7, r4
 8000524:	4a24      	ldr	r2, [pc, #144]	; (80005b8 <MX_GPIO_Init+0x140>)
 8000526:	0019      	movs	r1, r3
 8000528:	0010      	movs	r0, r2
 800052a:	f000 fe47 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2220      	movs	r2, #32
 8000532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2201      	movs	r2, #1
 8000538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000546:	193a      	adds	r2, r7, r4
 8000548:	2390      	movs	r3, #144	; 0x90
 800054a:	05db      	lsls	r3, r3, #23
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fe34 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Note1_Pin Note2_Pin */
  GPIO_InitStruct.Pin = Note1_Pin|Note2_Pin;
 8000554:	0021      	movs	r1, r4
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2230      	movs	r2, #48	; 0x30
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2284      	movs	r2, #132	; 0x84
 8000560:	0392      	lsls	r2, r2, #14
 8000562:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056a:	000c      	movs	r4, r1
 800056c:	187b      	adds	r3, r7, r1
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_GPIO_Init+0x140>)
 8000570:	0019      	movs	r1, r3
 8000572:	0010      	movs	r0, r2
 8000574:	f000 fe22 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Note3_Pin */
  GPIO_InitStruct.Pin = Note3_Pin;
 8000578:	0021      	movs	r1, r4
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2284      	movs	r2, #132	; 0x84
 8000584:	0392      	lsls	r2, r2, #14
 8000586:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Note3_GPIO_Port, &GPIO_InitStruct);
 800058e:	187b      	adds	r3, r7, r1
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <MX_GPIO_Init+0x144>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f000 fe11 	bl	80011bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2101      	movs	r1, #1
 800059e:	2007      	movs	r0, #7
 80005a0:	f000 fbfa 	bl	8000d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005a4:	2007      	movs	r0, #7
 80005a6:	f000 fc0c 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b00b      	add	sp, #44	; 0x2c
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000
 80005b8:	48000800 	.word	0x48000800
 80005bc:	48000400 	.word	0x48000400

080005c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b0a3      	sub	sp, #140	; 0x8c
 80005c4:	af20      	add	r7, sp, #128	; 0x80
 80005c6:	0002      	movs	r2, r0
 80005c8:	1dbb      	adds	r3, r7, #6
 80005ca:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 80005cc:	1dbb      	adds	r3, r7, #6
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	2b20      	cmp	r3, #32
 80005d2:	d01e      	beq.n	8000612 <HAL_GPIO_EXTI_Callback+0x52>
 80005d4:	dc51      	bgt.n	800067a <HAL_GPIO_EXTI_Callback+0xba>
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d035      	beq.n	8000646 <HAL_GPIO_EXTI_Callback+0x86>
 80005da:	2b10      	cmp	r3, #16
 80005dc:	d14d      	bne.n	800067a <HAL_GPIO_EXTI_Callback+0xba>
		case Note1_Pin:
			if (state == true){
 80005de:	4b2c      	ldr	r3, [pc, #176]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d04b      	beq.n	800067e <HAL_GPIO_EXTI_Callback+0xbe>
				srv_midi_internal_sendNote(0x3C, 0x00, 0x5A,huart1);
 80005e6:	4c2b      	ldr	r4, [pc, #172]	; (8000694 <HAL_GPIO_EXTI_Callback+0xd4>)
 80005e8:	466b      	mov	r3, sp
 80005ea:	0018      	movs	r0, r3
 80005ec:	1d23      	adds	r3, r4, #4
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0019      	movs	r1, r3
 80005f2:	f003 f8ff 	bl	80037f4 <memcpy>
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	225a      	movs	r2, #90	; 0x5a
 80005fa:	2100      	movs	r1, #0
 80005fc:	203c      	movs	r0, #60	; 0x3c
 80005fe:	f000 f893 	bl	8000728 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fd3f 	bl	8002088 <HAL_TIM_Base_Start_IT>
				state = false;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000610:	e035      	b.n	800067e <HAL_GPIO_EXTI_Callback+0xbe>
		case Note2_Pin:
			if (state == true){
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d033      	beq.n	8000682 <HAL_GPIO_EXTI_Callback+0xc2>
				srv_midi_internal_sendNote(0x3E, 0x00, 0x5A,huart1);
 800061a:	4c1e      	ldr	r4, [pc, #120]	; (8000694 <HAL_GPIO_EXTI_Callback+0xd4>)
 800061c:	466b      	mov	r3, sp
 800061e:	0018      	movs	r0, r3
 8000620:	1d23      	adds	r3, r4, #4
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0019      	movs	r1, r3
 8000626:	f003 f8e5 	bl	80037f4 <memcpy>
 800062a:	6823      	ldr	r3, [r4, #0]
 800062c:	225a      	movs	r2, #90	; 0x5a
 800062e:	2100      	movs	r1, #0
 8000630:	203e      	movs	r0, #62	; 0x3e
 8000632:	f000 f879 	bl	8000728 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fd25 	bl	8002088 <HAL_TIM_Base_Start_IT>
				state = false;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000644:	e01d      	b.n	8000682 <HAL_GPIO_EXTI_Callback+0xc2>
		case Note3_Pin:
			if (state == true){
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d01b      	beq.n	8000686 <HAL_GPIO_EXTI_Callback+0xc6>
				srv_midi_internal_sendNote(0x40, 0x00, 0x5A,huart1);
 800064e:	4c11      	ldr	r4, [pc, #68]	; (8000694 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000650:	466b      	mov	r3, sp
 8000652:	0018      	movs	r0, r3
 8000654:	1d23      	adds	r3, r4, #4
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0019      	movs	r1, r3
 800065a:	f003 f8cb 	bl	80037f4 <memcpy>
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	225a      	movs	r2, #90	; 0x5a
 8000662:	2100      	movs	r1, #0
 8000664:	2040      	movs	r0, #64	; 0x40
 8000666:	f000 f85f 	bl	8000728 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_GPIO_EXTI_Callback+0xd8>)
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fd0b 	bl	8002088 <HAL_TIM_Base_Start_IT>
				state = false;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000678:	e005      	b.n	8000686 <HAL_GPIO_EXTI_Callback+0xc6>
		default:
			break;
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	e004      	b.n	8000688 <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	e002      	b.n	8000688 <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	e000      	b.n	8000688 <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 8000686:	46c0      	nop			; (mov r8, r8)
	}
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b003      	add	sp, #12
 800068e:	bd90      	pop	{r4, r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	2000002c 	.word	0x2000002c
 8000698:	200000b0 	.word	0x200000b0

0800069c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Note1_GPIO_Port, Note1_Pin) == GPIO_PIN_SET ){
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006a6:	2110      	movs	r1, #16
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fef7 	bl	800149c <HAL_GPIO_ReadPin>
 80006ae:	0003      	movs	r3, r0
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d107      	bne.n	80006c4 <HAL_TIM_PeriodElapsedCallback+0x28>

		state = true;
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fd2f 	bl	8002120 <HAL_TIM_Base_Stop_IT>
	else if (HAL_GPIO_ReadPin(Note3_GPIO_Port, Note3_Pin) == GPIO_PIN_SET ){

		state = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 80006c2:	e01e      	b.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (HAL_GPIO_ReadPin(Note2_GPIO_Port, Note2_Pin) == GPIO_PIN_SET ){
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80006c6:	2120      	movs	r1, #32
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fee7 	bl	800149c <HAL_GPIO_ReadPin>
 80006ce:	0003      	movs	r3, r0
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d107      	bne.n	80006e4 <HAL_TIM_PeriodElapsedCallback+0x48>
		state = true;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fd1f 	bl	8002120 <HAL_TIM_Base_Stop_IT>
}
 80006e2:	e00e      	b.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (HAL_GPIO_ReadPin(Note3_GPIO_Port, Note3_Pin) == GPIO_PIN_SET ){
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80006e6:	2101      	movs	r1, #1
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fed7 	bl	800149c <HAL_GPIO_ReadPin>
 80006ee:	0003      	movs	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d106      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x66>
		state = true;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fd0f 	bl	8002120 <HAL_TIM_Base_Stop_IT>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	48000800 	.word	0x48000800
 8000710:	20000000 	.word	0x20000000
 8000714:	200000b0 	.word	0x200000b0
 8000718:	48000400 	.word	0x48000400

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <srv_midi_internal_sendNote>:

/* Private variables ---------------------------------------------------------*/
uint8_t aTxBuffer[3];

/* Public functions -----------------------------------------------*/
void srv_midi_internal_sendNote(uint8_t note,uint8_t channel, uint8_t velocity,UART_HandleTypeDef uart){
 8000728:	b082      	sub	sp, #8
 800072a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072c:	46c6      	mov	lr, r8
 800072e:	b500      	push	{lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	0004      	movs	r4, r0
 8000736:	0008      	movs	r0, r1
 8000738:	0011      	movs	r1, r2
 800073a:	2204      	movs	r2, #4
 800073c:	2520      	movs	r5, #32
 800073e:	46ac      	mov	ip, r5
 8000740:	2508      	movs	r5, #8
 8000742:	46a8      	mov	r8, r5
 8000744:	44b8      	add	r8, r7
 8000746:	44c4      	add	ip, r8
 8000748:	4462      	add	r2, ip
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	1c22      	adds	r2, r4, #0
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	1c02      	adds	r2, r0, #0
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	1d7b      	adds	r3, r7, #5
 800075a:	1c0a      	adds	r2, r1, #0
 800075c:	701a      	strb	r2, [r3, #0]
	uint8_t channelBuffer, noteBuffer, velocityBuffer;
	channelBuffer = 0x0F & channel; //To be sure that channel is 4 bits value
 800075e:	240f      	movs	r4, #15
 8000760:	193b      	adds	r3, r7, r4
 8000762:	1dba      	adds	r2, r7, #6
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	210f      	movs	r1, #15
 8000768:	400a      	ands	r2, r1
 800076a:	701a      	strb	r2, [r3, #0]
	noteBuffer = 0x7F & note; //To be sure that note is 7 bits value
 800076c:	250e      	movs	r5, #14
 800076e:	197b      	adds	r3, r7, r5
 8000770:	1dfa      	adds	r2, r7, #7
 8000772:	7812      	ldrb	r2, [r2, #0]
 8000774:	217f      	movs	r1, #127	; 0x7f
 8000776:	400a      	ands	r2, r1
 8000778:	701a      	strb	r2, [r3, #0]
	velocityBuffer = 0x7F & velocity; //To be sure that velocity is 7 bits value
 800077a:	260d      	movs	r6, #13
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	1d7a      	adds	r2, r7, #5
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	217f      	movs	r1, #127	; 0x7f
 8000784:	400a      	ands	r2, r1
 8000786:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = channelBuffer+NOTE_ON;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3b70      	subs	r3, #112	; 0x70
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 8000792:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 8000796:	197a      	adds	r2, r7, r5
 8000798:	7812      	ldrb	r2, [r2, #0]
 800079a:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 800079e:	19ba      	adds	r2, r7, r6
 80007a0:	7812      	ldrb	r2, [r2, #0]
 80007a2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 80007a4:	23fa      	movs	r3, #250	; 0xfa
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4916      	ldr	r1, [pc, #88]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 80007aa:	2224      	movs	r2, #36	; 0x24
 80007ac:	2008      	movs	r0, #8
 80007ae:	1838      	adds	r0, r7, r0
 80007b0:	1880      	adds	r0, r0, r2
 80007b2:	2203      	movs	r2, #3
 80007b4:	f002 f8b8 	bl	8002928 <HAL_UART_Transmit>
	aTxBuffer[0] = channelBuffer+NOTE_OFF;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3b80      	subs	r3, #128	; 0x80
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 80007c2:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 80007c6:	197a      	adds	r2, r7, r5
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 80007ce:	19ba      	adds	r2, r7, r6
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	709a      	strb	r2, [r3, #2]
	HAL_Delay(300); //Wait 300 ms
 80007d4:	2396      	movs	r3, #150	; 0x96
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fa0d 	bl	8000bf8 <HAL_Delay>
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000); //Send Note Off
 80007de:	23fa      	movs	r3, #250	; 0xfa
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <srv_midi_internal_sendNote+0xdc>)
 80007e4:	2224      	movs	r2, #36	; 0x24
 80007e6:	2008      	movs	r0, #8
 80007e8:	1838      	adds	r0, r7, r0
 80007ea:	1880      	adds	r0, r0, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	f002 f89b 	bl	8002928 <HAL_UART_Transmit>

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bc80      	pop	{r7}
 80007fa:	46b8      	mov	r8, r7
 80007fc:	bcf0      	pop	{r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	b002      	add	sp, #8
 8000802:	4718      	bx	r3
 8000804:	2000017c 	.word	0x2000017c

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_MspInit+0x64>)
 8000810:	699a      	ldr	r2, [r3, #24]
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_MspInit+0x64>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	619a      	str	r2, [r3, #24]
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_MspInit+0x64>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_MspInit+0x64>)
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x64>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0549      	lsls	r1, r1, #21
 8000830:	430a      	orrs	r2, r1
 8000832:	61da      	str	r2, [r3, #28]
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_MspInit+0x64>)
 8000836:	69da      	ldr	r2, [r3, #28]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	055b      	lsls	r3, r3, #21
 800083c:	4013      	ands	r3, r2
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	2003      	movs	r0, #3
 8000848:	f000 faa6 	bl	8000d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fab8 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2100      	movs	r1, #0
 8000856:	2004      	movs	r0, #4
 8000858:	f000 fa9e 	bl	8000d98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800085c:	2004      	movs	r0, #4
 800085e:	f000 fab0 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <HAL_TIM_Base_MspInit+0x58>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d11d      	bne.n	80008be <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_TIM_Base_MspInit+0x5c>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_TIM_Base_MspInit+0x5c>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0109      	lsls	r1, r1, #4
 800088c:	430a      	orrs	r2, r1
 800088e:	619a      	str	r2, [r3, #24]
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_TIM_Base_MspInit+0x5c>)
 8000892:	699a      	ldr	r2, [r3, #24]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2102      	movs	r1, #2
 80008a2:	200d      	movs	r0, #13
 80008a4:	f000 fa78 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80008a8:	200d      	movs	r0, #13
 80008aa:	f000 fa8a 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2103      	movs	r1, #3
 80008b2:	200e      	movs	r0, #14
 80008b4:	f000 fa70 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80008b8:	200e      	movs	r0, #14
 80008ba:	f000 fa82 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40012c00 	.word	0x40012c00
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08d      	sub	sp, #52	; 0x34
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	241c      	movs	r4, #28
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f002 ff8f 	bl	8003806 <memset>
  if(huart->Instance==USART1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a49      	ldr	r2, [pc, #292]	; (8000a14 <HAL_UART_MspInit+0x144>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d134      	bne.n	800095c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f2:	4b49      	ldr	r3, [pc, #292]	; (8000a18 <HAL_UART_MspInit+0x148>)
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <HAL_UART_MspInit+0x148>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	01c9      	lsls	r1, r1, #7
 80008fc:	430a      	orrs	r2, r1
 80008fe:	619a      	str	r2, [r3, #24]
 8000900:	4b45      	ldr	r3, [pc, #276]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000902:	699a      	ldr	r2, [r3, #24]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	01db      	lsls	r3, r3, #7
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b42      	ldr	r3, [pc, #264]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	0289      	lsls	r1, r1, #10
 8000918:	430a      	orrs	r2, r1
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <HAL_UART_MspInit+0x148>)
 800091e:	695a      	ldr	r2, [r3, #20]
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	029b      	lsls	r3, r3, #10
 8000924:	4013      	ands	r3, r2
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	22c0      	movs	r2, #192	; 0xc0
 800092e:	00d2      	lsls	r2, r2, #3
 8000930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	0021      	movs	r1, r4
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2202      	movs	r2, #2
 8000938:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2203      	movs	r2, #3
 8000944:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2201      	movs	r2, #1
 800094a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	187a      	adds	r2, r7, r1
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fc31 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095a:	e056      	b.n	8000a0a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <HAL_UART_MspInit+0x14c>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d151      	bne.n	8000a0a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000968:	69da      	ldr	r2, [r3, #28]
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <HAL_UART_MspInit+0x148>)
 800096c:	2180      	movs	r1, #128	; 0x80
 800096e:	0289      	lsls	r1, r1, #10
 8000970:	430a      	orrs	r2, r1
 8000972:	61da      	str	r2, [r3, #28]
 8000974:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000976:	69da      	ldr	r2, [r3, #28]
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	029b      	lsls	r3, r3, #10
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000984:	695a      	ldr	r2, [r3, #20]
 8000986:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	615a      	str	r2, [r3, #20]
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_UART_MspInit+0x148>)
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800099e:	241c      	movs	r4, #28
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2204      	movs	r2, #4
 80009a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2202      	movs	r2, #2
 80009aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2203      	movs	r2, #3
 80009b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2201      	movs	r2, #1
 80009bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80009be:	193a      	adds	r2, r7, r4
 80009c0:	2390      	movs	r3, #144	; 0x90
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 fbf8 	bl	80011bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 80009cc:	0021      	movs	r1, r4
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2208      	movs	r2, #8
 80009d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2202      	movs	r2, #2
 80009d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2203      	movs	r2, #3
 80009e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80009ec:	187a      	adds	r2, r7, r1
 80009ee:	2390      	movs	r3, #144	; 0x90
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	0011      	movs	r1, r2
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fbe1 	bl	80011bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 f9ca 	bl	8000d98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 f9dc 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b00d      	add	sp, #52	; 0x34
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40013800 	.word	0x40013800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40004400 	.word	0x40004400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f8bc 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000a52:	f000 fa51 	bl	8000ef8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a6a:	2010      	movs	r0, #16
 8000a6c:	f000 fd50 	bl	8001510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a70:	2020      	movs	r0, #32
 8000a72:	f000 fd4d 	bl	8001510 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fd48 	bl	8001510 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 fb74 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	200000b0 	.word	0x200000b0

08000aa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <TIM1_CC_IRQHandler+0x14>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 fb68 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	200000b0 	.word	0x200000b0

08000ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <USART2_IRQHandler+0x14>)
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 ffdc 	bl	8002a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	200000f8 	.word	0x200000f8

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ade:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490e      	ldr	r1, [pc, #56]	; (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0b      	ldr	r4, [pc, #44]	; (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b06:	f7ff ffe3 	bl	8000ad0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b0a:	f002 fe4f 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0e:	f7ff fb87 	bl	8000220 <main>

08000b12 <LoopForever>:

LoopForever:
    b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   r0, =_estack
 8000b14:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b20:	08003870 	.word	0x08003870
  ldr r2, =_sbss
 8000b24:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b28:	200001a8 	.word	0x200001a8

08000b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>
	...

08000b30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <HAL_Init+0x24>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_Init+0x24>)
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f809 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b46:	f7ff fe5f 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	23fa      	movs	r3, #250	; 0xfa
 8000b6c:	0098      	lsls	r0, r3, #2
 8000b6e:	f7ff facb 	bl	8000108 <__udivsi3>
 8000b72:	0003      	movs	r3, r0
 8000b74:	0019      	movs	r1, r3
 8000b76:	0020      	movs	r0, r4
 8000b78:	f7ff fac6 	bl	8000108 <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f92f 	bl	8000de2 <HAL_SYSTICK_Config>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e00f      	b.n	8000bac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80b      	bhi.n	8000baa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f8fc 	bl	8000d98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_InitTick+0x64>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	18d2      	adds	r2, r2, r3
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	2000000c 	.word	0x2000000c
 8000be0:	20000180 	.word	0x20000180

08000be4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	20000180 	.word	0x20000180

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff fff0 	bl	8000be4 <HAL_GetTick>
 8000c04:	0003      	movs	r3, r0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001a      	movs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	189b      	adds	r3, r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	f7ff ffe0 	bl	8000be4 <HAL_GetTick>
 8000c24:	0002      	movs	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	2000000c 	.word	0x2000000c

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b7f      	cmp	r3, #127	; 0x7f
 8000c52:	d809      	bhi.n	8000c68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	231f      	movs	r3, #31
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_EnableIRQ+0x30>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	4091      	lsls	r1, r2
 8000c64:	000a      	movs	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b7f      	cmp	r3, #127	; 0x7f
 8000c88:	d828      	bhi.n	8000cdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <__NVIC_SetPriority+0xd4>)
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	33c0      	adds	r3, #192	; 0xc0
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	589b      	ldr	r3, [r3, r2]
 8000c9a:	1dfa      	adds	r2, r7, #7
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	00d2      	lsls	r2, r2, #3
 8000ca6:	21ff      	movs	r1, #255	; 0xff
 8000ca8:	4091      	lsls	r1, r2
 8000caa:	000a      	movs	r2, r1
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	401a      	ands	r2, r3
 8000cb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	22ff      	movs	r2, #255	; 0xff
 8000cb8:	401a      	ands	r2, r3
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	4003      	ands	r3, r0
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc8:	481f      	ldr	r0, [pc, #124]	; (8000d48 <__NVIC_SetPriority+0xd4>)
 8000cca:	1dfb      	adds	r3, r7, #7
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b25b      	sxtb	r3, r3
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	33c0      	adds	r3, #192	; 0xc0
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cda:	e031      	b.n	8000d40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <__NVIC_SetPriority+0xd8>)
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	400b      	ands	r3, r1
 8000ce8:	3b08      	subs	r3, #8
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3306      	adds	r3, #6
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	1dfa      	adds	r2, r7, #7
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	400a      	ands	r2, r1
 8000d00:	00d2      	lsls	r2, r2, #3
 8000d02:	21ff      	movs	r1, #255	; 0xff
 8000d04:	4091      	lsls	r1, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	43d2      	mvns	r2, r2
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	22ff      	movs	r2, #255	; 0xff
 8000d14:	401a      	ands	r2, r3
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	4003      	ands	r3, r0
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <__NVIC_SetPriority+0xd8>)
 8000d26:	1dfb      	adds	r3, r7, #7
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	001c      	movs	r4, r3
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	4023      	ands	r3, r4
 8000d30:	3b08      	subs	r3, #8
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	430a      	orrs	r2, r1
 8000d36:	3306      	adds	r3, #6
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	18c3      	adds	r3, r0, r3
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b003      	add	sp, #12
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1e5a      	subs	r2, r3, #1
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	045b      	lsls	r3, r3, #17
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d301      	bcc.n	8000d68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d64:	2301      	movs	r3, #1
 8000d66:	e010      	b.n	8000d8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <SysTick_Config+0x44>)
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	3a01      	subs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d70:	2301      	movs	r3, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	2103      	movs	r1, #3
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff7c 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x44>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x44>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	210f      	movs	r1, #15
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	1c02      	adds	r2, r0, #0
 8000da8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b004      	add	sp, #16
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	0002      	movs	r2, r0
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ff33 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ffaf 	bl	8000d50 <SysTick_Config>
 8000df2:	0003      	movs	r3, r0
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2221      	movs	r2, #33	; 0x21
 8000e08:	5c9b      	ldrb	r3, [r3, r2]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2204      	movs	r2, #4
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e020      	b.n	8000e64 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	210e      	movs	r1, #14
 8000e2e:	438a      	bics	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	438a      	bics	r2, r1
 8000e40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2221      	movs	r2, #33	; 0x21
 8000e56:	2101      	movs	r1, #1
 8000e58:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	2100      	movs	r1, #0
 8000e60:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	210f      	movs	r1, #15
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2221      	movs	r2, #33	; 0x21
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d006      	beq.n	8000e96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2201      	movs	r2, #1
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e028      	b.n	8000ee8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	210e      	movs	r1, #14
 8000ea2:	438a      	bics	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2221      	movs	r2, #33	; 0x21
 8000eca:	2101      	movs	r1, #1
 8000ecc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	0010      	movs	r0, r2
 8000ee6:	4798      	blx	r3
    } 
  }
  return status;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	781b      	ldrb	r3, [r3, #0]
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f02:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	2210      	movs	r2, #16
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	d005      	beq.n	8000f1a <HAL_FLASH_IRQHandler+0x22>
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2204      	movs	r2, #4
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d10f      	bne.n	8000f3a <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8000f1a:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	4252      	negs	r2, r2
 8000f26:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8000f28:	f000 f8fa 	bl	8001120 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f8d2 	bl	80010d8 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000f34:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f3a:	4b60      	ldr	r3, [pc, #384]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b20      	cmp	r3, #32
 8000f44:	d000      	beq.n	8000f48 <HAL_FLASH_IRQHandler+0x50>
 8000f46:	e0a1      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f48:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d100      	bne.n	8000f5a <HAL_FLASH_IRQHandler+0x62>
 8000f58:	e098      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d132      	bne.n	8000fca <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8000f64:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	4b55      	ldr	r3, [pc, #340]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f6c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8000f6e:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01b      	beq.n	8000fae <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8000f76:	4b52      	ldr	r3, [pc, #328]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 f8a2 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8000f84:	4b4e      	ldr	r3, [pc, #312]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	4694      	mov	ip, r2
 8000f8e:	4463      	add	r3, ip
 8000f90:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8000f92:	4b4b      	ldr	r3, [pc, #300]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f98:	4b48      	ldr	r3, [pc, #288]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f8ea 	bl	8001180 <FLASH_PageErase>
 8000fac:	e06e      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4b42      	ldr	r3, [pc, #264]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000fba:	4b41      	ldr	r3, [pc, #260]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 f880 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>
 8000fc8:	e060      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8000fca:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d10c      	bne.n	8000fee <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	438a      	bics	r2, r1
 8000fde:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f871 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000fe6:	4b36      	ldr	r3, [pc, #216]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
 8000fec:	e04e      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000ff6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d021      	beq.n	8001044 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	1c9a      	adds	r2, r3, #2
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001008:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	0419      	lsls	r1, r3, #16
 8001018:	0c14      	lsrs	r4, r2, #16
 800101a:	430c      	orrs	r4, r1
 800101c:	0c1d      	lsrs	r5, r3, #16
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001020:	611c      	str	r4, [r3, #16]
 8001022:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 800102a:	2101      	movs	r1, #1
 800102c:	438a      	bics	r2, r1
 800102e:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	b292      	uxth	r2, r2
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0011      	movs	r1, r2
 800103c:	0018      	movs	r0, r3
 800103e:	f000 f853 	bl	80010e8 <FLASH_Program_HalfWord>
 8001042:	e023      	b.n	800108c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b03      	cmp	r3, #3
 800104c:	d105      	bne.n	800105a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f838 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>
 8001058:	e011      	b.n	800107e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b04      	cmp	r3, #4
 8001062:	d106      	bne.n	8001072 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	3b02      	subs	r3, #2
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f82c 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>
 8001070:	e005      	b.n	800107e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	3b06      	subs	r3, #6
 8001078:	0018      	movs	r0, r3
 800107a:	f000 f825 	bl	80010c8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001080:	2201      	movs	r2, #1
 8001082:	4252      	negs	r2, r2
 8001084:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10e      	bne.n	80010b4 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 800109c:	2107      	movs	r1, #7
 800109e:	438a      	bics	r2, r1
 80010a0:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_FLASH_IRQHandler+0x1c4>)
 80010a8:	4906      	ldr	r1, [pc, #24]	; (80010c4 <HAL_FLASH_IRQHandler+0x1cc>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_FLASH_IRQHandler+0x1c8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	761a      	strb	r2, [r3, #24]
  }
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	40022000 	.word	0x40022000
 80010c0:	20000188 	.word	0x20000188
 80010c4:	ffffebff 	.word	0xffffebff

080010c8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	000a      	movs	r2, r1
 80010f2:	1cbb      	adds	r3, r7, #2
 80010f4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <FLASH_Program_HalfWord+0x30>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <FLASH_Program_HalfWord+0x34>)
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <FLASH_Program_HalfWord+0x34>)
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1cba      	adds	r2, r7, #2
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	801a      	strh	r2, [r3, #0]
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000188 	.word	0x20000188
 800111c:	40022000 	.word	0x40022000

08001120 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <FLASH_SetErrorCode+0x58>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2210      	movs	r2, #16
 8001130:	4013      	ands	r3, r2
 8001132:	2b10      	cmp	r3, #16
 8001134:	d109      	bne.n	800114a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <FLASH_SetErrorCode+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2202      	movs	r2, #2
 800113c:	431a      	orrs	r2, r3
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <FLASH_SetErrorCode+0x5c>)
 8001140:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2210      	movs	r2, #16
 8001146:	4313      	orrs	r3, r2
 8001148:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <FLASH_SetErrorCode+0x58>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	2b04      	cmp	r3, #4
 8001154:	d109      	bne.n	800116a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <FLASH_SetErrorCode+0x5c>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <FLASH_SetErrorCode+0x5c>)
 8001160:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	4313      	orrs	r3, r2
 8001168:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <FLASH_SetErrorCode+0x58>)
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
}  
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40022000 	.word	0x40022000
 800117c:	20000188 	.word	0x20000188

08001180 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <FLASH_PageErase+0x34>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <FLASH_PageErase+0x38>)
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <FLASH_PageErase+0x38>)
 8001194:	2102      	movs	r1, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <FLASH_PageErase+0x38>)
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <FLASH_PageErase+0x38>)
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <FLASH_PageErase+0x38>)
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	430a      	orrs	r2, r1
 80011aa:	611a      	str	r2, [r3, #16]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000188 	.word	0x20000188
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	e14f      	b.n	800146c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4091      	lsls	r1, r2
 80011d6:	000a      	movs	r2, r1
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d100      	bne.n	80011e4 <HAL_GPIO_Init+0x28>
 80011e2:	e140      	b.n	8001466 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d130      	bne.n	800125e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	409a      	lsls	r2, r3
 800121e:	0013      	movs	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001232:	2201      	movs	r2, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
 8001238:	0013      	movs	r3, r2
 800123a:	43da      	mvns	r2, r3
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	2201      	movs	r2, #1
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2203      	movs	r2, #3
 8001264:	4013      	ands	r3, r2
 8001266:	2b03      	cmp	r3, #3
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	409a      	lsls	r2, r3
 800128c:	0013      	movs	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	58d3      	ldr	r3, [r2, r3]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2207      	movs	r2, #7
 80012b8:	4013      	ands	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	409a      	lsls	r2, r3
 80012c0:	0013      	movs	r3, r2
 80012c2:	43da      	mvns	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	2107      	movs	r1, #7
 80012d2:	400b      	ands	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	409a      	lsls	r2, r3
 80012d8:	0013      	movs	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	401a      	ands	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	23c0      	movs	r3, #192	; 0xc0
 8001328:	029b      	lsls	r3, r3, #10
 800132a:	4013      	ands	r3, r2
 800132c:	d100      	bne.n	8001330 <HAL_GPIO_Init+0x174>
 800132e:	e09a      	b.n	8001466 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 8001332:	699a      	ldr	r2, [r3, #24]
 8001334:	4b53      	ldr	r3, [pc, #332]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 8001336:	2101      	movs	r1, #1
 8001338:	430a      	orrs	r2, r1
 800133a:	619a      	str	r2, [r3, #24]
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x2cc>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	589b      	ldr	r3, [r3, r2]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	409a      	lsls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	2390      	movs	r3, #144	; 0x90
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	429a      	cmp	r2, r3
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0x1e2>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a44      	ldr	r2, [pc, #272]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00d      	beq.n	800139a <HAL_GPIO_Init+0x1de>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_GPIO_Init+0x2d4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d007      	beq.n	8001396 <HAL_GPIO_Init+0x1da>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a42      	ldr	r2, [pc, #264]	; (8001494 <HAL_GPIO_Init+0x2d8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_GPIO_Init+0x1d6>
 800138e:	2303      	movs	r3, #3
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x1e4>
 8001392:	2305      	movs	r3, #5
 8001394:	e004      	b.n	80013a0 <HAL_GPIO_Init+0x1e4>
 8001396:	2302      	movs	r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x1e4>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x1e4>
 800139e:	2300      	movs	r3, #0
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	2103      	movs	r1, #3
 80013a4:	400a      	ands	r2, r1
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4093      	lsls	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b0:	4935      	ldr	r1, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x2cc>)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43da      	mvns	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	4013      	ands	r3, r2
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43da      	mvns	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	4013      	ands	r3, r2
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43da      	mvns	r2, r3
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	035b      	lsls	r3, r3, #13
 800142a:	4013      	ands	r3, r2
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	039b      	lsls	r3, r3, #14
 8001454:	4013      	ands	r3, r2
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	40da      	lsrs	r2, r3
 8001474:	1e13      	subs	r3, r2, #0
 8001476:	d000      	beq.n	800147a <HAL_GPIO_Init+0x2be>
 8001478:	e6a8      	b.n	80011cc <HAL_GPIO_Init+0x10>
  } 
}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b006      	add	sp, #24
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	000a      	movs	r2, r1
 80014a6:	1cbb      	adds	r3, r7, #2
 80014a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	1cba      	adds	r2, r7, #2
 80014b0:	8812      	ldrh	r2, [r2, #0]
 80014b2:	4013      	ands	r3, r2
 80014b4:	d004      	beq.n	80014c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80014b6:	230f      	movs	r3, #15
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e003      	b.n	80014c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80014c8:	230f      	movs	r3, #15
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	781b      	ldrb	r3, [r3, #0]
  }
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b004      	add	sp, #16
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	0008      	movs	r0, r1
 80014e0:	0011      	movs	r1, r2
 80014e2:	1cbb      	adds	r3, r7, #2
 80014e4:	1c02      	adds	r2, r0, #0
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	1c7b      	adds	r3, r7, #1
 80014ea:	1c0a      	adds	r2, r1, #0
 80014ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ee:	1c7b      	adds	r3, r7, #1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d004      	beq.n	8001500 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f6:	1cbb      	adds	r3, r7, #2
 80014f8:	881a      	ldrh	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014fe:	e003      	b.n	8001508 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001500:	1cbb      	adds	r3, r7, #2
 8001502:	881a      	ldrh	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	0002      	movs	r2, r0
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	4013      	ands	r3, r2
 8001526:	d008      	beq.n	800153a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800152a:	1dba      	adds	r2, r7, #6
 800152c:	8812      	ldrh	r2, [r2, #0]
 800152e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001530:	1dbb      	adds	r3, r7, #6
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff f843 	bl	80005c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e305      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x1e>
 8001564:	e08d      	b.n	8001682 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001566:	4bc5      	ldr	r3, [pc, #788]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	220c      	movs	r2, #12
 800156c:	4013      	ands	r3, r2
 800156e:	2b04      	cmp	r3, #4
 8001570:	d00e      	beq.n	8001590 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001572:	4bc2      	ldr	r3, [pc, #776]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	220c      	movs	r2, #12
 8001578:	4013      	ands	r3, r2
 800157a:	2b08      	cmp	r3, #8
 800157c:	d116      	bne.n	80015ac <HAL_RCC_OscConfig+0x64>
 800157e:	4bbf      	ldr	r3, [pc, #764]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	23c0      	movs	r3, #192	; 0xc0
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	401a      	ands	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	025b      	lsls	r3, r3, #9
 800158c:	429a      	cmp	r2, r3
 800158e:	d10d      	bne.n	80015ac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4bba      	ldr	r3, [pc, #744]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d100      	bne.n	800159e <HAL_RCC_OscConfig+0x56>
 800159c:	e070      	b.n	8001680 <HAL_RCC_OscConfig+0x138>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d000      	beq.n	80015a8 <HAL_RCC_OscConfig+0x60>
 80015a6:	e06b      	b.n	8001680 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e2dc      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d107      	bne.n	80015c4 <HAL_RCC_OscConfig+0x7c>
 80015b4:	4bb1      	ldr	r3, [pc, #708]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4bb0      	ldr	r3, [pc, #704]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0249      	lsls	r1, r1, #9
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e02f      	b.n	8001624 <HAL_RCC_OscConfig+0xdc>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x9e>
 80015cc:	4bab      	ldr	r3, [pc, #684]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4baa      	ldr	r3, [pc, #680]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015d2:	49ab      	ldr	r1, [pc, #684]	; (8001880 <HAL_RCC_OscConfig+0x338>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4ba8      	ldr	r3, [pc, #672]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4ba7      	ldr	r3, [pc, #668]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015de:	49a9      	ldr	r1, [pc, #676]	; (8001884 <HAL_RCC_OscConfig+0x33c>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e01e      	b.n	8001624 <HAL_RCC_OscConfig+0xdc>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0xc4>
 80015ee:	4ba3      	ldr	r3, [pc, #652]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4ba2      	ldr	r3, [pc, #648]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	02c9      	lsls	r1, r1, #11
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4b9f      	ldr	r3, [pc, #636]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b9e      	ldr	r3, [pc, #632]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	0249      	lsls	r1, r1, #9
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e00b      	b.n	8001624 <HAL_RCC_OscConfig+0xdc>
 800160c:	4b9b      	ldr	r3, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b9a      	ldr	r3, [pc, #616]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001612:	499b      	ldr	r1, [pc, #620]	; (8001880 <HAL_RCC_OscConfig+0x338>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	4b98      	ldr	r3, [pc, #608]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b97      	ldr	r3, [pc, #604]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800161e:	4999      	ldr	r1, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x33c>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d014      	beq.n	8001656 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fada 	bl	8000be4 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001636:	f7ff fad5 	bl	8000be4 <HAL_GetTick>
 800163a:	0002      	movs	r2, r0
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b64      	cmp	r3, #100	; 0x64
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e28e      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001648:	4b8c      	ldr	r3, [pc, #560]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	4013      	ands	r3, r2
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0xee>
 8001654:	e015      	b.n	8001682 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7ff fac5 	bl	8000be4 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fac0 	bl	8000be4 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e279      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b82      	ldr	r3, [pc, #520]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	4013      	ands	r3, r2
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x118>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x146>
 800168c:	e06c      	b.n	8001768 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800168e:	4b7b      	ldr	r3, [pc, #492]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	220c      	movs	r2, #12
 8001694:	4013      	ands	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	220c      	movs	r2, #12
 800169e:	4013      	ands	r3, r2
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d11f      	bne.n	80016e4 <HAL_RCC_OscConfig+0x19c>
 80016a4:	4b75      	ldr	r3, [pc, #468]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	401a      	ands	r2, r3
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d116      	bne.n	80016e4 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	4b71      	ldr	r3, [pc, #452]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x184>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e24c      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	4b6b      	ldr	r3, [pc, #428]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	22f8      	movs	r2, #248	; 0xf8
 80016d2:	4393      	bics	r3, r2
 80016d4:	0019      	movs	r1, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00da      	lsls	r2, r3, #3
 80016dc:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e2:	e041      	b.n	8001768 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d024      	beq.n	8001736 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ec:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b62      	ldr	r3, [pc, #392]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa74 	bl	8000be4 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fa6f 	bl	8000be4 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e228      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d0f1      	beq.n	8001702 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171e:	4b57      	ldr	r3, [pc, #348]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	22f8      	movs	r2, #248	; 0xf8
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00da      	lsls	r2, r3, #3
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e018      	b.n	8001768 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b51      	ldr	r3, [pc, #324]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa4f 	bl	8000be4 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174c:	f7ff fa4a 	bl	8000be4 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e203      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d1f1      	bne.n	800174c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2208      	movs	r2, #8
 800176e:	4013      	ands	r3, r2
 8001770:	d036      	beq.n	80017e0 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d019      	beq.n	80017ae <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b40      	ldr	r3, [pc, #256]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800177c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177e:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001780:	2101      	movs	r1, #1
 8001782:	430a      	orrs	r2, r1
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fa2d 	bl	8000be4 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fa28 	bl	8000be4 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1e1      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f1      	beq.n	8001790 <HAL_RCC_OscConfig+0x248>
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	438a      	bics	r2, r1
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fa13 	bl	8000be4 <HAL_GetTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fa0e 	bl	8000be4 <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1c7      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f1      	bne.n	80017c4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2204      	movs	r2, #4
 80017e6:	4013      	ands	r3, r2
 80017e8:	d100      	bne.n	80017ec <HAL_RCC_OscConfig+0x2a4>
 80017ea:	e0b5      	b.n	8001958 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ec:	201f      	movs	r0, #31
 80017ee:	183b      	adds	r3, r7, r0
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x334>)
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	055b      	lsls	r3, r3, #21
 80017fc:	4013      	ands	r3, r2
 80017fe:	d110      	bne.n	8001822 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001802:	69da      	ldr	r2, [r3, #28]
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0549      	lsls	r1, r1, #21
 800180a:	430a      	orrs	r2, r1
 800180c:	61da      	str	r2, [r3, #28]
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	055b      	lsls	r3, r3, #21
 8001816:	4013      	ands	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800181c:	183b      	adds	r3, r7, r0
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001822:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_OscConfig+0x340>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4013      	ands	r3, r2
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182e:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_RCC_OscConfig+0x340>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_RCC_OscConfig+0x340>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0049      	lsls	r1, r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183c:	f7ff f9d2 	bl	8000be4 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001846:	f7ff f9cd 	bl	8000be4 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b64      	cmp	r3, #100	; 0x64
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e186      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x340>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4013      	ands	r3, r2
 8001862:	d0f0      	beq.n	8001846 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d10f      	bne.n	800188c <HAL_RCC_OscConfig+0x344>
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_RCC_OscConfig+0x334>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <HAL_RCC_OscConfig+0x334>)
 8001872:	2101      	movs	r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	e036      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a0>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	fffeffff 	.word	0xfffeffff
 8001884:	fffbffff 	.word	0xfffbffff
 8001888:	40007000 	.word	0x40007000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x366>
 8001894:	4bb6      	ldr	r3, [pc, #728]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001896:	6a1a      	ldr	r2, [r3, #32]
 8001898:	4bb5      	ldr	r3, [pc, #724]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	621a      	str	r2, [r3, #32]
 80018a0:	4bb3      	ldr	r3, [pc, #716]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	4bb2      	ldr	r3, [pc, #712]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	621a      	str	r2, [r3, #32]
 80018ac:	e01c      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a0>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x388>
 80018b6:	4bae      	ldr	r3, [pc, #696]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	4bad      	ldr	r3, [pc, #692]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018bc:	2104      	movs	r1, #4
 80018be:	430a      	orrs	r2, r1
 80018c0:	621a      	str	r2, [r3, #32]
 80018c2:	4bab      	ldr	r3, [pc, #684]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018c4:	6a1a      	ldr	r2, [r3, #32]
 80018c6:	4baa      	ldr	r3, [pc, #680]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	430a      	orrs	r2, r1
 80018cc:	621a      	str	r2, [r3, #32]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0x3a0>
 80018d0:	4ba7      	ldr	r3, [pc, #668]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018d2:	6a1a      	ldr	r2, [r3, #32]
 80018d4:	4ba6      	ldr	r3, [pc, #664]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	621a      	str	r2, [r3, #32]
 80018dc:	4ba4      	ldr	r3, [pc, #656]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	4ba3      	ldr	r3, [pc, #652]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80018e2:	2104      	movs	r1, #4
 80018e4:	438a      	bics	r2, r1
 80018e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d014      	beq.n	800191a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff f978 	bl	8000be4 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e009      	b.n	800190e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f973 	bl	8000be4 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a9b      	ldr	r2, [pc, #620]	; (8001b74 <HAL_RCC_OscConfig+0x62c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e12b      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800190e:	4b98      	ldr	r3, [pc, #608]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2202      	movs	r2, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x3b2>
 8001918:	e013      	b.n	8001942 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff f963 	bl	8000be4 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff f95e 	bl	8000be4 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a91      	ldr	r2, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x62c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e116      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001938:	4b8d      	ldr	r3, [pc, #564]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001942:	231f      	movs	r3, #31
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 800194e:	69da      	ldr	r2, [r3, #28]
 8001950:	4b87      	ldr	r3, [pc, #540]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001952:	4989      	ldr	r1, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x630>)
 8001954:	400a      	ands	r2, r1
 8001956:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d063      	beq.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d12a      	bne.n	80019c0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800196a:	4b81      	ldr	r3, [pc, #516]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 800196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001970:	2104      	movs	r1, #4
 8001972:	430a      	orrs	r2, r1
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001976:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197a:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 800197c:	2101      	movs	r1, #1
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f92f 	bl	8000be4 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800198c:	f7ff f92a 	bl	8000be4 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0e3      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199e:	4b74      	ldr	r3, [pc, #464]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	2202      	movs	r2, #2
 80019a4:	4013      	ands	r3, r2
 80019a6:	d0f1      	beq.n	800198c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	22f8      	movs	r2, #248	; 0xf8
 80019ae:	4393      	bics	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	00da      	lsls	r2, r3, #3
 80019b8:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	635a      	str	r2, [r3, #52]	; 0x34
 80019be:	e034      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	3305      	adds	r3, #5
 80019c6:	d111      	bne.n	80019ec <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	22f8      	movs	r2, #248	; 0xf8
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	00da      	lsls	r2, r3, #3
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019e6:	430a      	orrs	r2, r1
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ea:	e01e      	b.n	8001a2a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019f2:	2104      	movs	r1, #4
 80019f4:	430a      	orrs	r2, r1
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019f8:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fc:	4b5c      	ldr	r3, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8ee 	bl	8000be4 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0e:	f7ff f8e9 	bl	8000be4 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0a2      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d100      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4ec>
 8001a32:	e097      	b.n	8001b64 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_OscConfig+0x4fa>
 8001a40:	e06b      	b.n	8001b1a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d14c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4b48      	ldr	r3, [pc, #288]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a50:	494a      	ldr	r1, [pc, #296]	; (8001b7c <HAL_RCC_OscConfig+0x634>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8c5 	bl	8000be4 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f8c0 	bl	8000be4 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e079      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	220f      	movs	r2, #15
 8001a84:	4393      	bics	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4a3a      	ldr	r2, [pc, #232]	; (8001b80 <HAL_RCC_OscConfig+0x638>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	0449      	lsls	r1, r1, #17
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f893 	bl	8000be4 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f88e 	bl	8000be4 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e047      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x57c>
 8001ae2:	e03f      	b.n	8001b64 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001aea:	4924      	ldr	r1, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x634>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f878 	bl	8000be4 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f873 	bl	8000be4 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e02c      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	049b      	lsls	r3, r3, #18
 8001b14:	4013      	ands	r3, r2
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x5b2>
 8001b18:	e024      	b.n	8001b64 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01f      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_RCC_OscConfig+0x628>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	23c0      	movs	r3, #192	; 0xc0
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d10e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	220f      	movs	r2, #15
 8001b46:	401a      	ands	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	23f0      	movs	r3, #240	; 0xf0
 8001b54:	039b      	lsls	r3, r3, #14
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b008      	add	sp, #32
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	00001388 	.word	0x00001388
 8001b78:	efffffff 	.word	0xefffffff
 8001b7c:	feffffff 	.word	0xfeffffff
 8001b80:	ffc27fff 	.word	0xffc27fff

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b3      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d911      	bls.n	8001bca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4393      	bics	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e09a      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d015      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2204      	movs	r2, #4
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d006      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bde:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001be4:	21e0      	movs	r1, #224	; 0xe0
 8001be6:	00c9      	lsls	r1, r1, #3
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	22f0      	movs	r2, #240	; 0xf0
 8001bf2:	4393      	bics	r3, r2
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d040      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	029b      	lsls	r3, r3, #10
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d114      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e06e      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	049b      	lsls	r3, r3, #18
 8001c32:	4013      	ands	r3, r2
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e062      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e05b      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c48:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4393      	bics	r3, r2
 8001c50:	0019      	movs	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c5c:	f7fe ffc2 	bl	8000be4 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c64:	e009      	b.n	8001c7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7fe ffbd 	bl	8000be4 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <HAL_RCC_ClockConfig+0x18c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e042      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	220c      	movs	r2, #12
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d211      	bcs.n	8001cbe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4393      	bics	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x184>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e020      	b.n	8001d00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d009      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_RCC_ClockConfig+0x190>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cdc:	f000 f820 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x188>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	220f      	movs	r2, #15
 8001cea:	4013      	ands	r3, r2
 8001cec:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x194>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	000a      	movs	r2, r1
 8001cf2:	40da      	lsrs	r2, r3
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x198>)
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe ff2d 	bl	8000b58 <HAL_InitTick>
  
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b004      	add	sp, #16
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	00001388 	.word	0x00001388
 8001d14:	fffff8ff 	.word	0xfffff8ff
 8001d18:	08003850 	.word	0x08003850
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b08f      	sub	sp, #60	; 0x3c
 8001d24:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d26:	2314      	movs	r3, #20
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d2e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d3a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d48:	2300      	movs	r3, #0
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d002      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x4a>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x50>
 8001d68:	e02f      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d6e:	e02f      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	220f      	movs	r2, #15
 8001d76:	4013      	ands	r3, r2
 8001d78:	2214      	movs	r2, #20
 8001d7a:	18ba      	adds	r2, r7, r2
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	220f      	movs	r2, #15
 8001d86:	4013      	ands	r3, r2
 8001d88:	1d3a      	adds	r2, r7, #4
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	025b      	lsls	r3, r3, #9
 8001d94:	401a      	ands	r2, r3
 8001d96:	2380      	movs	r3, #128	; 0x80
 8001d98:	025b      	lsls	r3, r3, #9
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d109      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001da0:	4811      	ldr	r0, [pc, #68]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001da2:	f7fe f9b1 	bl	8000108 <__udivsi3>
 8001da6:	0003      	movs	r3, r0
 8001da8:	001a      	movs	r2, r3
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	4353      	muls	r3, r2
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001db6:	f7fe f9a7 	bl	8000108 <__udivsi3>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	001a      	movs	r2, r3
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	4353      	muls	r3, r2
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dc8:	e002      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dce:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b00f      	add	sp, #60	; 0x3c
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	08003830 	.word	0x08003830
 8001de0:	08003840 	.word	0x08003840
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200

08001dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df0:	4b02      	ldr	r3, [pc, #8]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e04:	f7ff fff2 	bl	8001dec <HAL_RCC_GetHCLKFreq>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e16:	5cd3      	ldrb	r3, [r2, r3]
 8001e18:	40d9      	lsrs	r1, r3
 8001e1a:	000b      	movs	r3, r1
}    
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40021000 	.word	0x40021000
 8001e28:	08003860 	.word	0x08003860

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	025b      	lsls	r3, r3, #9
 8001e44:	4013      	ands	r3, r2
 8001e46:	d100      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e48:	e08e      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2017      	movs	r0, #23
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e54:	69da      	ldr	r2, [r3, #28]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	055b      	lsls	r3, r3, #21
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d110      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b5c      	ldr	r3, [pc, #368]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0549      	lsls	r1, r1, #21
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	61da      	str	r2, [r3, #28]
 8001e6c:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	055b      	lsls	r3, r3, #21
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	183b      	adds	r3, r7, r0
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d11a      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8c:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0049      	lsls	r1, r1, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7fe fea3 	bl	8000be4 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe fe9e 	bl	8000be4 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e087      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	23c0      	movs	r3, #192	; 0xc0
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d034      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d02c      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ef0:	6a1a      	ldr	r2, [r3, #32]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	0249      	lsls	r1, r1, #9
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001efc:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f02:	4936      	ldr	r1, [pc, #216]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	4013      	ands	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe65 	bl	8000be4 <HAL_GetTick>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe fe60 	bl	8000be4 <HAL_GetTick>
 8001f24:	0002      	movs	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e048      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f52:	2317      	movs	r3, #23
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f62:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d009      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	2203      	movs	r2, #3
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d009      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	2210      	movs	r2, #16
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b006      	add	sp, #24
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40007000 	.word	0x40007000
 8001fd8:	fffffcff 	.word	0xfffffcff
 8001fdc:	fffeffff 	.word	0xfffeffff
 8001fe0:	00001388 	.word	0x00001388
 8001fe4:	efffffff 	.word	0xefffffff

08001fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e042      	b.n	8002080 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223d      	movs	r2, #61	; 0x3d
 8001ffe:	5c9b      	ldrb	r3, [r3, r2]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223c      	movs	r2, #60	; 0x3c
 800200a:	2100      	movs	r1, #0
 800200c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	0018      	movs	r0, r3
 8002012:	f7fe fc2d 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223d      	movs	r2, #61	; 0x3d
 800201a:	2102      	movs	r1, #2
 800201c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	0019      	movs	r1, r3
 8002028:	0010      	movs	r0, r2
 800202a:	f000 fab1 	bl	8002590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2246      	movs	r2, #70	; 0x46
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	223e      	movs	r2, #62	; 0x3e
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223f      	movs	r2, #63	; 0x3f
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2241      	movs	r2, #65	; 0x41
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2242      	movs	r2, #66	; 0x42
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2243      	movs	r2, #67	; 0x43
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2244      	movs	r2, #68	; 0x44
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2245      	movs	r2, #69	; 0x45
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223d      	movs	r2, #61	; 0x3d
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	223d      	movs	r2, #61	; 0x3d
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d001      	beq.n	80020a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e035      	b.n	800210c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	223d      	movs	r2, #61	; 0x3d
 80020a4:	2102      	movs	r1, #2
 80020a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a15      	ldr	r2, [pc, #84]	; (8002114 <HAL_TIM_Base_Start_IT+0x8c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <HAL_TIM_Base_Start_IT+0x4e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_TIM_Base_Start_IT+0x90>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <HAL_TIM_Base_Start_IT+0x4e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <HAL_TIM_Base_Start_IT+0x94>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d111      	bne.n	80020fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2207      	movs	r2, #7
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d010      	beq.n	800210a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	e007      	b.n	800210a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2101      	movs	r1, #1
 8002134:	438a      	bics	r2, r1
 8002136:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_TIM_Base_Stop_IT+0x54>)
 8002140:	4013      	ands	r3, r2
 8002142:	d10d      	bne.n	8002160 <HAL_TIM_Base_Stop_IT+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_TIM_Base_Stop_IT+0x58>)
 800214c:	4013      	ands	r3, r2
 800214e:	d107      	bne.n	8002160 <HAL_TIM_Base_Stop_IT+0x40>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	223d      	movs	r2, #61	; 0x3d
 8002164:	2101      	movs	r1, #1
 8002166:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	00001111 	.word	0x00001111
 8002178:	00000444 	.word	0x00000444

0800217c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2202      	movs	r2, #2
 800218c:	4013      	ands	r3, r2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d124      	bne.n	80021dc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	2b02      	cmp	r3, #2
 800219e:	d11d      	bne.n	80021dc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4252      	negs	r2, r2
 80021a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	d004      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f9ce 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e007      	b.n	80021d6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f9c1 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 f9cd 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2204      	movs	r2, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d125      	bne.n	8002236 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2204      	movs	r2, #4
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d11e      	bne.n	8002236 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2205      	movs	r2, #5
 80021fe:	4252      	negs	r2, r2
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	23c0      	movs	r3, #192	; 0xc0
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4013      	ands	r3, r2
 8002214:	d004      	beq.n	8002220 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f9a1 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 800221e:	e007      	b.n	8002230 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f000 f994 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f9a0 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2208      	movs	r2, #8
 800223e:	4013      	ands	r3, r2
 8002240:	2b08      	cmp	r3, #8
 8002242:	d124      	bne.n	800228e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2208      	movs	r2, #8
 800224c:	4013      	ands	r3, r2
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11d      	bne.n	800228e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2209      	movs	r2, #9
 8002258:	4252      	negs	r2, r2
 800225a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2203      	movs	r2, #3
 800226a:	4013      	ands	r3, r2
 800226c:	d004      	beq.n	8002278 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f975 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 8002276:	e007      	b.n	8002288 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0018      	movs	r0, r3
 800227c:	f000 f968 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f974 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2210      	movs	r2, #16
 8002296:	4013      	ands	r3, r2
 8002298:	2b10      	cmp	r3, #16
 800229a:	d125      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	2210      	movs	r2, #16
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d11e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2211      	movs	r2, #17
 80022b0:	4252      	negs	r2, r2
 80022b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2208      	movs	r2, #8
 80022b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69da      	ldr	r2, [r3, #28]
 80022c0:	23c0      	movs	r3, #192	; 0xc0
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 f948 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e007      	b.n	80022e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f93b 	bl	8002550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f947 	bl	8002570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10f      	bne.n	8002316 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2202      	movs	r2, #2
 800230a:	4252      	negs	r2, r2
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	0018      	movs	r0, r3
 8002312:	f7fe f9c3 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2280      	movs	r2, #128	; 0x80
 800231e:	4013      	ands	r3, r2
 8002320:	2b80      	cmp	r3, #128	; 0x80
 8002322:	d10f      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	4013      	ands	r3, r2
 800232e:	2b80      	cmp	r3, #128	; 0x80
 8002330:	d108      	bne.n	8002344 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2281      	movs	r2, #129	; 0x81
 8002338:	4252      	negs	r2, r2
 800233a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 fa96 	bl	8002870 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2240      	movs	r2, #64	; 0x40
 800234c:	4013      	ands	r3, r2
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d10f      	bne.n	8002372 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	4013      	ands	r3, r2
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d108      	bne.n	8002372 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	4252      	negs	r2, r2
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f907 	bl	8002580 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2220      	movs	r2, #32
 800237a:	4013      	ands	r3, r2
 800237c:	2b20      	cmp	r3, #32
 800237e:	d10f      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	4013      	ands	r3, r2
 800238a:	2b20      	cmp	r3, #32
 800238c:	d108      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2221      	movs	r2, #33	; 0x21
 8002394:	4252      	negs	r2, r2
 8002396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 fa60 	bl	8002860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	230f      	movs	r3, #15
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2200      	movs	r2, #0
 80023b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	; 0x3c
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x20>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0bc      	b.n	8002542 <HAL_TIM_ConfigClockSource+0x19a>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	223c      	movs	r2, #60	; 0x3c
 80023cc:	2101      	movs	r1, #1
 80023ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	223d      	movs	r2, #61	; 0x3d
 80023d4:	2102      	movs	r1, #2
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2277      	movs	r2, #119	; 0x77
 80023e4:	4393      	bics	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	0192      	lsls	r2, r2, #6
 8002400:	4293      	cmp	r3, r2
 8002402:	d040      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0xde>
 8002404:	2280      	movs	r2, #128	; 0x80
 8002406:	0192      	lsls	r2, r2, #6
 8002408:	4293      	cmp	r3, r2
 800240a:	d900      	bls.n	800240e <HAL_TIM_ConfigClockSource+0x66>
 800240c:	e088      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	0152      	lsls	r2, r2, #5
 8002412:	4293      	cmp	r3, r2
 8002414:	d100      	bne.n	8002418 <HAL_TIM_ConfigClockSource+0x70>
 8002416:	e088      	b.n	800252a <HAL_TIM_ConfigClockSource+0x182>
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	0152      	lsls	r2, r2, #5
 800241c:	4293      	cmp	r3, r2
 800241e:	d900      	bls.n	8002422 <HAL_TIM_ConfigClockSource+0x7a>
 8002420:	e07e      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 8002422:	2b70      	cmp	r3, #112	; 0x70
 8002424:	d018      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0xb0>
 8002426:	d900      	bls.n	800242a <HAL_TIM_ConfigClockSource+0x82>
 8002428:	e07a      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 800242a:	2b60      	cmp	r3, #96	; 0x60
 800242c:	d04f      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x126>
 800242e:	d900      	bls.n	8002432 <HAL_TIM_ConfigClockSource+0x8a>
 8002430:	e076      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 8002432:	2b50      	cmp	r3, #80	; 0x50
 8002434:	d03b      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x106>
 8002436:	d900      	bls.n	800243a <HAL_TIM_ConfigClockSource+0x92>
 8002438:	e072      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 800243a:	2b40      	cmp	r3, #64	; 0x40
 800243c:	d057      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x146>
 800243e:	d900      	bls.n	8002442 <HAL_TIM_ConfigClockSource+0x9a>
 8002440:	e06e      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 8002442:	2b30      	cmp	r3, #48	; 0x30
 8002444:	d063      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x166>
 8002446:	d86b      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 8002448:	2b20      	cmp	r3, #32
 800244a:	d060      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x166>
 800244c:	d868      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d05d      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x166>
 8002452:	2b10      	cmp	r3, #16
 8002454:	d05b      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x166>
 8002456:	e063      	b.n	8002520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f000 f982 	bl	8002770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2277      	movs	r2, #119	; 0x77
 8002478:	4313      	orrs	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]
      break;
 8002484:	e052      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f000 f96b 	bl	8002770 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	01c9      	lsls	r1, r1, #7
 80024a8:	430a      	orrs	r2, r1
 80024aa:	609a      	str	r2, [r3, #8]
      break;
 80024ac:	e03e      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	001a      	movs	r2, r3
 80024bc:	f000 f8de 	bl	800267c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2150      	movs	r1, #80	; 0x50
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f938 	bl	800273c <TIM_ITRx_SetConfig>
      break;
 80024cc:	e02e      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	001a      	movs	r2, r3
 80024dc:	f000 f8fc 	bl	80026d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2160      	movs	r1, #96	; 0x60
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 f928 	bl	800273c <TIM_ITRx_SetConfig>
      break;
 80024ec:	e01e      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	001a      	movs	r2, r3
 80024fc:	f000 f8be 	bl	800267c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f918 	bl	800273c <TIM_ITRx_SetConfig>
      break;
 800250c:	e00e      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	0019      	movs	r1, r3
 8002518:	0010      	movs	r0, r2
 800251a:	f000 f90f 	bl	800273c <TIM_ITRx_SetConfig>
      break;
 800251e:	e005      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002520:	230f      	movs	r3, #15
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
      break;
 8002528:	e000      	b.n	800252c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800252a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	223d      	movs	r2, #61	; 0x3d
 8002530:	2101      	movs	r1, #1
 8002532:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	223c      	movs	r2, #60	; 0x3c
 8002538:	2100      	movs	r1, #0
 800253a:	5499      	strb	r1, [r3, r2]

  return status;
 800253c:	230f      	movs	r3, #15
 800253e:	18fb      	adds	r3, r7, r3
 8002540:	781b      	ldrb	r3, [r3, #0]
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	ffff00ff 	.word	0xffff00ff

08002550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002588:	46c0      	nop			; (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0x20>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a2e      	ldr	r2, [pc, #184]	; (8002664 <TIM_Base_SetConfig+0xd4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2270      	movs	r2, #112	; 0x70
 80025b4:	4393      	bics	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a25      	ldr	r2, [pc, #148]	; (8002664 <TIM_Base_SetConfig+0xd4>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a24      	ldr	r2, [pc, #144]	; (8002668 <TIM_Base_SetConfig+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <TIM_Base_SetConfig+0xdc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a22      	ldr	r2, [pc, #136]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a21      	ldr	r2, [pc, #132]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <TIM_Base_SetConfig+0xe8>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	4393      	bics	r3, r2
 800260a:	001a      	movs	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <TIM_Base_SetConfig+0xd0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00b      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a0d      	ldr	r2, [pc, #52]	; (800266c <TIM_Base_SetConfig+0xdc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <TIM_Base_SetConfig+0xe0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_Base_SetConfig+0xba>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <TIM_Base_SetConfig+0xe4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d103      	bne.n	8002652 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	615a      	str	r2, [r3, #20]
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b004      	add	sp, #16
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	40000400 	.word	0x40000400
 8002668:	40002000 	.word	0x40002000
 800266c:	40014000 	.word	0x40014000
 8002670:	40014400 	.word	0x40014400
 8002674:	40014800 	.word	0x40014800
 8002678:	fffffcff 	.word	0xfffffcff

0800267c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	2201      	movs	r2, #1
 8002694:	4393      	bics	r3, r2
 8002696:	001a      	movs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	22f0      	movs	r2, #240	; 0xf0
 80026a6:	4393      	bics	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	220a      	movs	r2, #10
 80026b8:	4393      	bics	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	621a      	str	r2, [r3, #32]
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b006      	add	sp, #24
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	2210      	movs	r2, #16
 80026ea:	4393      	bics	r3, r2
 80026ec:	001a      	movs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <TIM_TI2_ConfigInputStage+0x60>)
 8002702:	4013      	ands	r3, r2
 8002704:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	031b      	lsls	r3, r3, #12
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	22a0      	movs	r2, #160	; 0xa0
 8002714:	4393      	bics	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	ffff0fff 	.word	0xffff0fff

0800273c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2270      	movs	r2, #112	; 0x70
 8002750:	4393      	bics	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	2207      	movs	r2, #7
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	609a      	str	r2, [r3, #8]
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <TIM_ETR_SetConfig+0x3c>)
 8002788:	4013      	ands	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	021a      	lsls	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	431a      	orrs	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	609a      	str	r2, [r3, #8]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b006      	add	sp, #24
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	ffff00ff 	.word	0xffff00ff

080027b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223c      	movs	r2, #60	; 0x3c
 80027be:	5c9b      	ldrb	r3, [r3, r2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e041      	b.n	800284c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	223c      	movs	r2, #60	; 0x3c
 80027cc:	2101      	movs	r1, #1
 80027ce:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223d      	movs	r2, #61	; 0x3d
 80027d4:	2102      	movs	r1, #2
 80027d6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2270      	movs	r2, #112	; 0x70
 80027ec:	4393      	bics	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a13      	ldr	r2, [pc, #76]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a10      	ldr	r2, [pc, #64]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	4393      	bics	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	4313      	orrs	r3, r2
 8002830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223d      	movs	r2, #61	; 0x3d
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223c      	movs	r2, #60	; 0x3c
 8002846:	2100      	movs	r1, #0
 8002848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	40014000 	.word	0x40014000

08002860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b002      	add	sp, #8
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e044      	b.n	800291c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2274      	movs	r2, #116	; 0x74
 800289e:	2100      	movs	r1, #0
 80028a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7fe f813 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2224      	movs	r2, #36	; 0x24
 80028ae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2101      	movs	r1, #1
 80028bc:	438a      	bics	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f000 fbb6 	bl	8003034 <UART_SetConfig>
 80028c8:	0003      	movs	r3, r0
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e024      	b.n	800291c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 fd01 	bl	80032e4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	490d      	ldr	r1, [pc, #52]	; (8002924 <HAL_UART_Init+0xa4>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2108      	movs	r1, #8
 80028fe:	438a      	bics	r2, r1
 8002900:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fd99 	bl	800344c <UART_CheckIdleState>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b002      	add	sp, #8
 8002922:	bd80      	pop	{r7, pc}
 8002924:	fffff7ff 	.word	0xfffff7ff

08002928 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	1dbb      	adds	r3, r7, #6
 8002936:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293c:	2b20      	cmp	r3, #32
 800293e:	d000      	beq.n	8002942 <HAL_UART_Transmit+0x1a>
 8002940:	e096      	b.n	8002a70 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_UART_Transmit+0x28>
 8002948:	1dbb      	adds	r3, r7, #6
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e08e      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	015b      	lsls	r3, r3, #5
 800295c:	429a      	cmp	r2, r3
 800295e:	d109      	bne.n	8002974 <HAL_UART_Transmit+0x4c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e07e      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2274      	movs	r2, #116	; 0x74
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_UART_Transmit+0x5a>
 800297e:	2302      	movs	r3, #2
 8002980:	e077      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2274      	movs	r2, #116	; 0x74
 8002986:	2101      	movs	r1, #1
 8002988:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	2100      	movs	r1, #0
 8002990:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2221      	movs	r2, #33	; 0x21
 8002996:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002998:	f7fe f924 	bl	8000be4 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1dba      	adds	r2, r7, #6
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	8812      	ldrh	r2, [r2, #0]
 80029a8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1dba      	adds	r2, r7, #6
 80029ae:	2152      	movs	r1, #82	; 0x52
 80029b0:	8812      	ldrh	r2, [r2, #0]
 80029b2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	429a      	cmp	r2, r3
 80029be:	d108      	bne.n	80029d2 <HAL_UART_Transmit+0xaa>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
 80029d0:	e003      	b.n	80029da <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2274      	movs	r2, #116	; 0x74
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80029e2:	e02d      	b.n	8002a40 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	0013      	movs	r3, r2
 80029ee:	2200      	movs	r2, #0
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	f000 fd73 	bl	80034dc <UART_WaitOnFlagUntilTimeout>
 80029f6:	1e03      	subs	r3, r0, #0
 80029f8:	d001      	beq.n	80029fe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e039      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	05d2      	lsls	r2, r2, #23
 8002a0e:	0dd2      	lsrs	r2, r2, #23
 8002a10:	b292      	uxth	r2, r2
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	3302      	adds	r3, #2
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e008      	b.n	8002a2e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	781a      	ldrb	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b292      	uxth	r2, r2
 8002a26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2252      	movs	r2, #82	; 0x52
 8002a32:	5a9b      	ldrh	r3, [r3, r2]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b299      	uxth	r1, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2252      	movs	r2, #82	; 0x52
 8002a3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2252      	movs	r2, #82	; 0x52
 8002a44:	5a9b      	ldrh	r3, [r3, r2]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1cb      	bne.n	80029e4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	f000 fd3f 	bl	80034dc <UART_WaitOnFlagUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e005      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b008      	add	sp, #32
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b0ab      	sub	sp, #172	; 0xac
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	22a4      	movs	r2, #164	; 0xa4
 8002a8c:	18b9      	adds	r1, r7, r2
 8002a8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	20a0      	movs	r0, #160	; 0xa0
 8002a98:	1839      	adds	r1, r7, r0
 8002a9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	219c      	movs	r1, #156	; 0x9c
 8002aa4:	1879      	adds	r1, r7, r1
 8002aa6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	18bb      	adds	r3, r7, r2
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a99      	ldr	r2, [pc, #612]	; (8002d14 <HAL_UART_IRQHandler+0x298>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2298      	movs	r2, #152	; 0x98
 8002ab4:	18bc      	adds	r4, r7, r2
 8002ab6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002ab8:	18bb      	adds	r3, r7, r2
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d114      	bne.n	8002aea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00f      	beq.n	8002aea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d00a      	beq.n	8002aea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d100      	bne.n	8002ade <HAL_UART_IRQHandler+0x62>
 8002adc:	e27e      	b.n	8002fdc <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	0010      	movs	r0, r2
 8002ae6:	4798      	blx	r3
      }
      return;
 8002ae8:	e278      	b.n	8002fdc <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002aea:	2398      	movs	r3, #152	; 0x98
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d100      	bne.n	8002af6 <HAL_UART_IRQHandler+0x7a>
 8002af4:	e114      	b.n	8002d20 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002af6:	239c      	movs	r3, #156	; 0x9c
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	d106      	bne.n	8002b10 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b02:	23a0      	movs	r3, #160	; 0xa0
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a83      	ldr	r2, [pc, #524]	; (8002d18 <HAL_UART_IRQHandler+0x29c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d100      	bne.n	8002b10 <HAL_UART_IRQHandler+0x94>
 8002b0e:	e107      	b.n	8002d20 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b10:	23a4      	movs	r3, #164	; 0xa4
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d012      	beq.n	8002b42 <HAL_UART_IRQHandler+0xc6>
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4013      	ands	r3, r2
 8002b28:	d00b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	589b      	ldr	r3, [r3, r2]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b42:	23a4      	movs	r3, #164	; 0xa4
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d011      	beq.n	8002b72 <HAL_UART_IRQHandler+0xf6>
 8002b4e:	239c      	movs	r3, #156	; 0x9c
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	4013      	ands	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	589b      	ldr	r3, [r3, r2]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2180      	movs	r1, #128	; 0x80
 8002b70:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b72:	23a4      	movs	r3, #164	; 0xa4
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2204      	movs	r2, #4
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d011      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x126>
 8002b7e:	239c      	movs	r3, #156	; 0x9c
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	589b      	ldr	r3, [r3, r2]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ba2:	23a4      	movs	r3, #164	; 0xa4
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	4013      	ands	r3, r2
 8002bac:	d017      	beq.n	8002bde <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bae:	23a0      	movs	r3, #160	; 0xa0
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d105      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002bba:	239c      	movs	r3, #156	; 0x9c
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bc4:	d00b      	beq.n	8002bde <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	589b      	ldr	r3, [r3, r2]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bde:	23a4      	movs	r3, #164	; 0xa4
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4013      	ands	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_UART_IRQHandler+0x198>
 8002bec:	23a0      	movs	r3, #160	; 0xa0
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	04db      	lsls	r3, r3, #19
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d00c      	beq.n	8002c14 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	589b      	ldr	r3, [r3, r2]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2180      	movs	r1, #128	; 0x80
 8002c12:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	589b      	ldr	r3, [r3, r2]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d100      	bne.n	8002c20 <HAL_UART_IRQHandler+0x1a4>
 8002c1e:	e1df      	b.n	8002fe0 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c20:	23a4      	movs	r3, #164	; 0xa4
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2220      	movs	r2, #32
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c2c:	23a0      	movs	r3, #160	; 0xa0
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	4013      	ands	r3, r2
 8002c36:	d008      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	0010      	movs	r0, r2
 8002c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	589b      	ldr	r3, [r3, r2]
 8002c50:	2194      	movs	r1, #148	; 0x94
 8002c52:	187a      	adds	r2, r7, r1
 8002c54:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2240      	movs	r2, #64	; 0x40
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d004      	beq.n	8002c6e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c64:	187b      	adds	r3, r7, r1
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2228      	movs	r2, #40	; 0x28
 8002c6a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c6c:	d047      	beq.n	8002cfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fcf7 	bl	8003664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2240      	movs	r2, #64	; 0x40
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d137      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c84:	f3ef 8310 	mrs	r3, PRIMASK
 8002c88:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c8c:	2090      	movs	r0, #144	; 0x90
 8002c8e:	183a      	adds	r2, r7, r0
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	2301      	movs	r3, #1
 8002c94:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c98:	f383 8810 	msr	PRIMASK, r3
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	438a      	bics	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
 8002cae:	183b      	adds	r3, r7, r0
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_UART_IRQHandler+0x2a0>)
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7fe f8cb 	bl	8000e6c <HAL_DMA_Abort_IT>
 8002cd6:	1e03      	subs	r3, r0, #0
 8002cd8:	d01a      	beq.n	8002d10 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e012      	b.n	8002d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 f98d 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf2:	e00d      	b.n	8002d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f988 	bl	800300c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e008      	b.n	8002d10 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 f983 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002d0e:	e167      	b.n	8002fe0 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d10:	46c0      	nop			; (mov r8, r8)
    return;
 8002d12:	e165      	b.n	8002fe0 <HAL_UART_IRQHandler+0x564>
 8002d14:	0000080f 	.word	0x0000080f
 8002d18:	04000120 	.word	0x04000120
 8002d1c:	08003729 	.word	0x08003729

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d000      	beq.n	8002d2a <HAL_UART_IRQHandler+0x2ae>
 8002d28:	e131      	b.n	8002f8e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d2a:	23a4      	movs	r3, #164	; 0xa4
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
 8002d34:	d100      	bne.n	8002d38 <HAL_UART_IRQHandler+0x2bc>
 8002d36:	e12a      	b.n	8002f8e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d38:	23a0      	movs	r3, #160	; 0xa0
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	4013      	ands	r3, r2
 8002d42:	d100      	bne.n	8002d46 <HAL_UART_IRQHandler+0x2ca>
 8002d44:	e123      	b.n	8002f8e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d000      	beq.n	8002d5e <HAL_UART_IRQHandler+0x2e2>
 8002d5c:	e09b      	b.n	8002e96 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	217e      	movs	r1, #126	; 0x7e
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d100      	bne.n	8002d76 <HAL_UART_IRQHandler+0x2fa>
 8002d74:	e136      	b.n	8002fe4 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2258      	movs	r2, #88	; 0x58
 8002d7a:	5a9b      	ldrh	r3, [r3, r2]
 8002d7c:	187a      	adds	r2, r7, r1
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d300      	bcc.n	8002d86 <HAL_UART_IRQHandler+0x30a>
 8002d84:	e12e      	b.n	8002fe4 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	187a      	adds	r2, r7, r1
 8002d8a:	215a      	movs	r1, #90	; 0x5a
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d06e      	beq.n	8002e78 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da2:	67bb      	str	r3, [r7, #120]	; 0x78
 8002da4:	2301      	movs	r3, #1
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	498e      	ldr	r1, [pc, #568]	; (8002ff4 <HAL_UART_IRQHandler+0x578>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ddc:	f383 8810 	msr	PRIMASK, r3
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	438a      	bics	r2, r1
 8002df0:	609a      	str	r2, [r3, #8]
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df8:	f383 8810 	msr	PRIMASK, r3
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e06:	673b      	str	r3, [r7, #112]	; 0x70
 8002e08:	2301      	movs	r3, #1
 8002e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	438a      	bics	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e40:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e46:	2301      	movs	r3, #1
 8002e48:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e4c:	f383 8810 	msr	PRIMASK, r3
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	438a      	bics	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e68:	f383 8810 	msr	PRIMASK, r3
}
 8002e6c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7fd ffc2 	bl	8000dfc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2258      	movs	r2, #88	; 0x58
 8002e7c:	5a9a      	ldrh	r2, [r3, r2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	215a      	movs	r1, #90	; 0x5a
 8002e82:	5a5b      	ldrh	r3, [r3, r1]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f8c4 	bl	800301c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e94:	e0a6      	b.n	8002fe4 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2258      	movs	r2, #88	; 0x58
 8002e9a:	5a99      	ldrh	r1, [r3, r2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	225a      	movs	r2, #90	; 0x5a
 8002ea0:	5a9b      	ldrh	r3, [r3, r2]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	208e      	movs	r0, #142	; 0x8e
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	1a8a      	subs	r2, r1, r2
 8002eaa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	225a      	movs	r2, #90	; 0x5a
 8002eb0:	5a9b      	ldrh	r3, [r3, r2]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d100      	bne.n	8002eba <HAL_UART_IRQHandler+0x43e>
 8002eb8:	e096      	b.n	8002fe8 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8002eba:	183b      	adds	r3, r7, r0
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d100      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x448>
 8002ec2:	e091      	b.n	8002fe8 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	2488      	movs	r4, #136	; 0x88
 8002ece:	193a      	adds	r2, r7, r4
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4943      	ldr	r1, [pc, #268]	; (8002ff8 <HAL_UART_IRQHandler+0x57c>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	193b      	adds	r3, r7, r4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f383 8810 	msr	PRIMASK, r3
}
 8002efa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f02:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	2484      	movs	r4, #132	; 0x84
 8002f06:	193a      	adds	r2, r7, r4
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f383 8810 	msr	PRIMASK, r3
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	438a      	bics	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f383 8810 	msr	PRIMASK, r3
}
 8002f32:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f46:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	2480      	movs	r4, #128	; 0x80
 8002f50:	193a      	adds	r2, r7, r4
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	2301      	movs	r3, #1
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2110      	movs	r1, #16
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	193b      	adds	r3, r7, r4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	f383 8810 	msr	PRIMASK, r3
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f7e:	183b      	adds	r3, r7, r0
 8002f80:	881a      	ldrh	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0011      	movs	r1, r2
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f848 	bl	800301c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f8c:	e02c      	b.n	8002fe8 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f8e:	23a4      	movs	r3, #164	; 0xa4
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00f      	beq.n	8002fba <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f9a:	23a0      	movs	r3, #160	; 0xa0
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01e      	beq.n	8002fec <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	0010      	movs	r0, r2
 8002fb6:	4798      	blx	r3
    }
    return;
 8002fb8:	e018      	b.n	8002fec <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fba:	23a4      	movs	r3, #164	; 0xa4
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2240      	movs	r2, #64	; 0x40
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_UART_IRQHandler+0x572>
 8002fc6:	23a0      	movs	r3, #160	; 0xa0
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2240      	movs	r2, #64	; 0x40
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 fbbe 	bl	8003756 <UART_EndTransmit_IT>
    return;
 8002fda:	e008      	b.n	8002fee <HAL_UART_IRQHandler+0x572>
      return;
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	e006      	b.n	8002fee <HAL_UART_IRQHandler+0x572>
    return;
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	e004      	b.n	8002fee <HAL_UART_IRQHandler+0x572>
      return;
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	e002      	b.n	8002fee <HAL_UART_IRQHandler+0x572>
      return;
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	e000      	b.n	8002fee <HAL_UART_IRQHandler+0x572>
    return;
 8002fec:	46c0      	nop			; (mov r8, r8)
  }

}
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b02b      	add	sp, #172	; 0xac
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	fffffeff 	.word	0xfffffeff
 8002ff8:	fffffedf 	.word	0xfffffedf

08002ffc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b002      	add	sp, #8
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	000a      	movs	r2, r1
 8003026:	1cbb      	adds	r3, r7, #2
 8003028:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303c:	231e      	movs	r3, #30
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a97      	ldr	r2, [pc, #604]	; (80032c0 <UART_SetConfig+0x28c>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a92      	ldr	r2, [pc, #584]	; (80032c4 <UART_SetConfig+0x290>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a89      	ldr	r2, [pc, #548]	; (80032c8 <UART_SetConfig+0x294>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a85      	ldr	r2, [pc, #532]	; (80032cc <UART_SetConfig+0x298>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d127      	bne.n	800310a <UART_SetConfig+0xd6>
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <UART_SetConfig+0x29c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	2203      	movs	r2, #3
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d00d      	beq.n	80030e2 <UART_SetConfig+0xae>
 80030c6:	d81b      	bhi.n	8003100 <UART_SetConfig+0xcc>
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d014      	beq.n	80030f6 <UART_SetConfig+0xc2>
 80030cc:	d818      	bhi.n	8003100 <UART_SetConfig+0xcc>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <UART_SetConfig+0xa4>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d00a      	beq.n	80030ec <UART_SetConfig+0xb8>
 80030d6:	e013      	b.n	8003100 <UART_SetConfig+0xcc>
 80030d8:	231f      	movs	r3, #31
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e035      	b.n	800314e <UART_SetConfig+0x11a>
 80030e2:	231f      	movs	r3, #31
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e030      	b.n	800314e <UART_SetConfig+0x11a>
 80030ec:	231f      	movs	r3, #31
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2204      	movs	r2, #4
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e02b      	b.n	800314e <UART_SetConfig+0x11a>
 80030f6:	231f      	movs	r3, #31
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2208      	movs	r2, #8
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e026      	b.n	800314e <UART_SetConfig+0x11a>
 8003100:	231f      	movs	r3, #31
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2210      	movs	r2, #16
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e021      	b.n	800314e <UART_SetConfig+0x11a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a71      	ldr	r2, [pc, #452]	; (80032d4 <UART_SetConfig+0x2a0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d104      	bne.n	800311e <UART_SetConfig+0xea>
 8003114:	231f      	movs	r3, #31
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e017      	b.n	800314e <UART_SetConfig+0x11a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	; (80032d8 <UART_SetConfig+0x2a4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d104      	bne.n	8003132 <UART_SetConfig+0xfe>
 8003128:	231f      	movs	r3, #31
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e00d      	b.n	800314e <UART_SetConfig+0x11a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a69      	ldr	r2, [pc, #420]	; (80032dc <UART_SetConfig+0x2a8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d104      	bne.n	8003146 <UART_SetConfig+0x112>
 800313c:	231f      	movs	r3, #31
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e003      	b.n	800314e <UART_SetConfig+0x11a>
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2210      	movs	r2, #16
 800314c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	429a      	cmp	r2, r3
 8003158:	d15d      	bne.n	8003216 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d015      	beq.n	8003190 <UART_SetConfig+0x15c>
 8003164:	dc18      	bgt.n	8003198 <UART_SetConfig+0x164>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00d      	beq.n	8003186 <UART_SetConfig+0x152>
 800316a:	dc15      	bgt.n	8003198 <UART_SetConfig+0x164>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <UART_SetConfig+0x142>
 8003170:	2b02      	cmp	r3, #2
 8003172:	d005      	beq.n	8003180 <UART_SetConfig+0x14c>
 8003174:	e010      	b.n	8003198 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003176:	f7fe fe43 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]
        break;
 800317e:	e012      	b.n	80031a6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <UART_SetConfig+0x2ac>)
 8003182:	61bb      	str	r3, [r7, #24]
        break;
 8003184:	e00f      	b.n	80031a6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003186:	f7fe fdcb 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
        break;
 800318e:	e00a      	b.n	80031a6 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e006      	b.n	80031a6 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800319c:	231e      	movs	r3, #30
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
        break;
 80031a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d100      	bne.n	80031ae <UART_SetConfig+0x17a>
 80031ac:	e07b      	b.n	80032a6 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	18d2      	adds	r2, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f7fc ffa1 	bl	8000108 <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b0f      	cmp	r3, #15
 80031d0:	d91c      	bls.n	800320c <UART_SetConfig+0x1d8>
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	025b      	lsls	r3, r3, #9
 80031d8:	429a      	cmp	r2, r3
 80031da:	d217      	bcs.n	800320c <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	b29a      	uxth	r2, r3
 80031e0:	200e      	movs	r0, #14
 80031e2:	183b      	adds	r3, r7, r0
 80031e4:	210f      	movs	r1, #15
 80031e6:	438a      	bics	r2, r1
 80031e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2207      	movs	r2, #7
 80031f2:	4013      	ands	r3, r2
 80031f4:	b299      	uxth	r1, r3
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	183a      	adds	r2, r7, r0
 80031fa:	8812      	ldrh	r2, [r2, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	183a      	adds	r2, r7, r0
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	e04c      	b.n	80032a6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800320c:	231e      	movs	r3, #30
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	e047      	b.n	80032a6 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d015      	beq.n	800324c <UART_SetConfig+0x218>
 8003220:	dc18      	bgt.n	8003254 <UART_SetConfig+0x220>
 8003222:	2b04      	cmp	r3, #4
 8003224:	d00d      	beq.n	8003242 <UART_SetConfig+0x20e>
 8003226:	dc15      	bgt.n	8003254 <UART_SetConfig+0x220>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <UART_SetConfig+0x1fe>
 800322c:	2b02      	cmp	r3, #2
 800322e:	d005      	beq.n	800323c <UART_SetConfig+0x208>
 8003230:	e010      	b.n	8003254 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003232:	f7fe fde5 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8003236:	0003      	movs	r3, r0
 8003238:	61bb      	str	r3, [r7, #24]
        break;
 800323a:	e012      	b.n	8003262 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <UART_SetConfig+0x2ac>)
 800323e:	61bb      	str	r3, [r7, #24]
        break;
 8003240:	e00f      	b.n	8003262 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003242:	f7fe fd6d 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8003246:	0003      	movs	r3, r0
 8003248:	61bb      	str	r3, [r7, #24]
        break;
 800324a:	e00a      	b.n	8003262 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	61bb      	str	r3, [r7, #24]
        break;
 8003252:	e006      	b.n	8003262 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003258:	231e      	movs	r3, #30
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
        break;
 8003260:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01e      	beq.n	80032a6 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	085a      	lsrs	r2, r3, #1
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	18d2      	adds	r2, r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	0019      	movs	r1, r3
 8003278:	0010      	movs	r0, r2
 800327a:	f7fc ff45 	bl	8000108 <__udivsi3>
 800327e:	0003      	movs	r3, r0
 8003280:	b29b      	uxth	r3, r3
 8003282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d909      	bls.n	800329e <UART_SetConfig+0x26a>
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	025b      	lsls	r3, r3, #9
 8003290:	429a      	cmp	r2, r3
 8003292:	d204      	bcs.n	800329e <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	e003      	b.n	80032a6 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800329e:	231e      	movs	r3, #30
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032b2:	231e      	movs	r3, #30
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b008      	add	sp, #32
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	efff69f3 	.word	0xefff69f3
 80032c4:	ffffcfff 	.word	0xffffcfff
 80032c8:	fffff4ff 	.word	0xfffff4ff
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40004400 	.word	0x40004400
 80032d8:	40004800 	.word	0x40004800
 80032dc:	40004c00 	.word	0x40004c00
 80032e0:	007a1200 	.word	0x007a1200

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	d00b      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <UART_AdvFeatureConfig+0x144>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	d00b      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a43      	ldr	r2, [pc, #268]	; (800342c <UART_AdvFeatureConfig+0x148>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2204      	movs	r2, #4
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <UART_AdvFeatureConfig+0x14c>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2208      	movs	r2, #8
 8003358:	4013      	ands	r3, r2
 800335a:	d00b      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <UART_AdvFeatureConfig+0x150>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2210      	movs	r2, #16
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a2c      	ldr	r2, [pc, #176]	; (8003438 <UART_AdvFeatureConfig+0x154>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2220      	movs	r2, #32
 800339c:	4013      	ands	r3, r2
 800339e:	d00b      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <UART_AdvFeatureConfig+0x158>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d01d      	beq.n	80033fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <UART_AdvFeatureConfig+0x15c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	035b      	lsls	r3, r3, #13
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10b      	bne.n	80033fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <UART_AdvFeatureConfig+0x160>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	4013      	ands	r3, r2
 8003406:	d00b      	beq.n	8003420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <UART_AdvFeatureConfig+0x164>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fffdffff 	.word	0xfffdffff
 800342c:	fffeffff 	.word	0xfffeffff
 8003430:	fffbffff 	.word	0xfffbffff
 8003434:	ffff7fff 	.word	0xffff7fff
 8003438:	ffffefff 	.word	0xffffefff
 800343c:	ffffdfff 	.word	0xffffdfff
 8003440:	ffefffff 	.word	0xffefffff
 8003444:	ff9fffff 	.word	0xff9fffff
 8003448:	fff7ffff 	.word	0xfff7ffff

0800344c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2280      	movs	r2, #128	; 0x80
 8003458:	2100      	movs	r1, #0
 800345a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800345c:	f7fd fbc2 	bl	8000be4 <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2208      	movs	r2, #8
 800346c:	4013      	ands	r3, r2
 800346e:	2b08      	cmp	r3, #8
 8003470:	d10c      	bne.n	800348c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	0391      	lsls	r1, r2, #14
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <UART_CheckIdleState+0x8c>)
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	f000 f82c 	bl	80034dc <UART_WaitOnFlagUntilTimeout>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d001      	beq.n	800348c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e021      	b.n	80034d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2204      	movs	r2, #4
 8003494:	4013      	ands	r3, r2
 8003496:	2b04      	cmp	r3, #4
 8003498:	d10c      	bne.n	80034b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	03d1      	lsls	r1, r2, #15
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <UART_CheckIdleState+0x8c>)
 80034a4:	9200      	str	r2, [sp, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f000 f818 	bl	80034dc <UART_WaitOnFlagUntilTimeout>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e00d      	b.n	80034d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2274      	movs	r2, #116	; 0x74
 80034ca:	2100      	movs	r1, #0
 80034cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b004      	add	sp, #16
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	01ffffff 	.word	0x01ffffff

080034dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b094      	sub	sp, #80	; 0x50
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	1dfb      	adds	r3, r7, #7
 80034ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ec:	e0a3      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f0:	3301      	adds	r3, #1
 80034f2:	d100      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80034f4:	e09f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fd fb75 	bl	8000be4 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <UART_WaitOnFlagUntilTimeout+0x30>
 8003506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003508:	2b00      	cmp	r3, #0
 800350a:	d13d      	bne.n	8003588 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003514:	647b      	str	r3, [r7, #68]	; 0x44
 8003516:	2301      	movs	r3, #1
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	494c      	ldr	r1, [pc, #304]	; (8003660 <UART_WaitOnFlagUntilTimeout+0x184>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	643b      	str	r3, [r7, #64]	; 0x40
 8003548:	2301      	movs	r3, #1
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003566:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2274      	movs	r2, #116	; 0x74
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e067      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2204      	movs	r2, #4
 8003590:	4013      	ands	r3, r2
 8003592:	d050      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	401a      	ands	r2, r3
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d146      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b2:	f3ef 8310 	mrs	r3, PRIMASK
 80035b6:	613b      	str	r3, [r7, #16]
  return(result);
 80035b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035bc:	2301      	movs	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4923      	ldr	r1, [pc, #140]	; (8003660 <UART_WaitOnFlagUntilTimeout+0x184>)
 80035d4:	400a      	ands	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f383 8810 	msr	PRIMASK, r3
}
 80035e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e4:	f3ef 8310 	mrs	r3, PRIMASK
 80035e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80035ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ee:	2301      	movs	r3, #1
 80035f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	438a      	bics	r2, r1
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	2120      	movs	r1, #32
 8003628:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2274      	movs	r2, #116	; 0x74
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e010      	b.n	8003658 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	425a      	negs	r2, r3
 8003646:	4153      	adcs	r3, r2
 8003648:	b2db      	uxtb	r3, r3
 800364a:	001a      	movs	r2, r3
 800364c:	1dfb      	adds	r3, r7, #7
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d100      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003654:	e74b      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b014      	add	sp, #80	; 0x50
 800365e:	bd80      	pop	{r7, pc}
 8003660:	fffffe5f 	.word	0xfffffe5f

08003664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	; 0x38
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366c:	f3ef 8310 	mrs	r3, PRIMASK
 8003670:	617b      	str	r3, [r7, #20]
  return(result);
 8003672:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f383 8810 	msr	PRIMASK, r3
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4925      	ldr	r1, [pc, #148]	; (8003724 <UART_EndRxTransfer+0xc0>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f383 8810 	msr	PRIMASK, r3
}
 800369c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369e:	f3ef 8310 	mrs	r3, PRIMASK
 80036a2:	623b      	str	r3, [r7, #32]
  return(result);
 80036a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
 80036a8:	2301      	movs	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f383 8810 	msr	PRIMASK, r3
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	438a      	bics	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d118      	bne.n	800370a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d8:	f3ef 8310 	mrs	r3, PRIMASK
 80036dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80036de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e2:	2301      	movs	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2110      	movs	r1, #16
 80036fa:	438a      	bics	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2220      	movs	r2, #32
 800370e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b00e      	add	sp, #56	; 0x38
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fffffedf 	.word	0xfffffedf

08003728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	225a      	movs	r2, #90	; 0x5a
 800373a:	2100      	movs	r1, #0
 800373c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2252      	movs	r2, #82	; 0x52
 8003742:	2100      	movs	r1, #0
 8003744:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff fc5f 	bl	800300c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}

08003756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375e:	f3ef 8310 	mrs	r3, PRIMASK
 8003762:	60bb      	str	r3, [r7, #8]
  return(result);
 8003764:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	2301      	movs	r3, #1
 800376a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2140      	movs	r1, #64	; 0x40
 8003780:	438a      	bics	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0018      	movs	r0, r3
 80037a0:	f7ff fc2c 	bl	8002ffc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b006      	add	sp, #24
 80037aa:	bd80      	pop	{r7, pc}

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	2600      	movs	r6, #0
 80037b0:	4d0c      	ldr	r5, [pc, #48]	; (80037e4 <__libc_init_array+0x38>)
 80037b2:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b4:	1b64      	subs	r4, r4, r5
 80037b6:	10a4      	asrs	r4, r4, #2
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	2600      	movs	r6, #0
 80037be:	f000 f82b 	bl	8003818 <_init>
 80037c2:	4d0a      	ldr	r5, [pc, #40]	; (80037ec <__libc_init_array+0x40>)
 80037c4:	4c0a      	ldr	r4, [pc, #40]	; (80037f0 <__libc_init_array+0x44>)
 80037c6:	1b64      	subs	r4, r4, r5
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	00b3      	lsls	r3, r6, #2
 80037d2:	58eb      	ldr	r3, [r5, r3]
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	00b3      	lsls	r3, r6, #2
 80037dc:	58eb      	ldr	r3, [r5, r3]
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	08003868 	.word	0x08003868
 80037e8:	08003868 	.word	0x08003868
 80037ec:	08003868 	.word	0x08003868
 80037f0:	0800386c 	.word	0x0800386c

080037f4 <memcpy>:
 80037f4:	2300      	movs	r3, #0
 80037f6:	b510      	push	{r4, lr}
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d100      	bne.n	80037fe <memcpy+0xa>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	5ccc      	ldrb	r4, [r1, r3]
 8003800:	54c4      	strb	r4, [r0, r3]
 8003802:	3301      	adds	r3, #1
 8003804:	e7f8      	b.n	80037f8 <memcpy+0x4>

08003806 <memset>:
 8003806:	0003      	movs	r3, r0
 8003808:	1882      	adds	r2, r0, r2
 800380a:	4293      	cmp	r3, r2
 800380c:	d100      	bne.n	8003810 <memset+0xa>
 800380e:	4770      	bx	lr
 8003810:	7019      	strb	r1, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	e7f9      	b.n	800380a <memset+0x4>
	...

08003818 <_init>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr

08003824 <_fini>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr
