
Kodama_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005da8  08005da8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da8  08005da8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08005dc0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005dc0  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b86  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002986  00000000  00000000  00033bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00037698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011774  00000000  00000000  000386d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158a0  00000000  00000000  00049e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069b0f  00000000  00000000  0005f6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c91f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea8  00000000  00000000  000c9248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005cd4 	.word	0x08005cd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005cd4 	.word	0x08005cd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f001 f8f0 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9e4 	bl	80005f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f9b2 	bl	8000598 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f97e 	bl	8000534 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000238:	f000 f87e 	bl	8000338 <MX_ADC_Init>
  MX_TIM3_Init();
 800023c:	f000 f924 	bl	8000488 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000240:	f000 f8e2 	bl	8000408 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <main+0x38>)
 8000246:	0018      	movs	r0, r3
 8000248:	f001 ff76 	bl	8002138 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <main+0x3c>)
 800024e:	0018      	movs	r0, r3
 8000250:	f004 f978 	bl	8004544 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000254:	e7fe      	b.n	8000254 <main+0x34>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	200001d4 	.word	0x200001d4
 800025c:	20000084 	.word	0x20000084

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b097      	sub	sp, #92	; 0x5c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2428      	movs	r4, #40	; 0x28
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	; 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f005 fd26 	bl	8005cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2318      	movs	r3, #24
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f005 fd1e 	bl	8005cc2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f005 fd17 	bl	8005cc2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2212      	movs	r2, #18
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2201      	movs	r2, #1
 80002a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2210      	movs	r2, #16
 80002ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0212      	lsls	r2, r2, #8
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0352      	lsls	r2, r2, #13
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f003 fb96 	bl	8003a04 <HAL_RCC_OscConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002dc:	f000 fdaa 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	2118      	movs	r1, #24
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2101      	movs	r1, #1
 80002fe:	0018      	movs	r0, r3
 8000300:	f003 fe9e 	bl	8004040 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000308:	f000 fd94 	bl	8000e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2221      	movs	r2, #33	; 0x21
 8000310:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	0018      	movs	r0, r3
 8000322:	f003 ffe1 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8000326:	1e03      	subs	r3, r0, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800032a:	f000 fd83 	bl	8000e34 <Error_Handler>
  }
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	b017      	add	sp, #92	; 0x5c
 8000334:	bd90      	pop	{r4, r7, pc}
	...

08000338 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	0018      	movs	r0, r3
 8000342:	230c      	movs	r3, #12
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f005 fcbb 	bl	8005cc2 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <MX_ADC_Init+0xc8>)
 800034e:	4a2d      	ldr	r2, [pc, #180]	; (8000404 <MX_ADC_Init+0xcc>)
 8000350:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <MX_ADC_Init+0xc8>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000358:	4b29      	ldr	r3, [pc, #164]	; (8000400 <MX_ADC_Init+0xc8>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <MX_ADC_Init+0xc8>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <MX_ADC_Init+0xc8>)
 8000366:	2201      	movs	r2, #1
 8000368:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <MX_ADC_Init+0xc8>)
 800036c:	2208      	movs	r2, #8
 800036e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <MX_ADC_Init+0xc8>)
 8000372:	2200      	movs	r2, #0
 8000374:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <MX_ADC_Init+0xc8>)
 8000378:	2200      	movs	r2, #0
 800037a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800037c:	4b20      	ldr	r3, [pc, #128]	; (8000400 <MX_ADC_Init+0xc8>)
 800037e:	2201      	movs	r2, #1
 8000380:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <MX_ADC_Init+0xc8>)
 8000384:	2200      	movs	r2, #0
 8000386:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000388:	4b1d      	ldr	r3, [pc, #116]	; (8000400 <MX_ADC_Init+0xc8>)
 800038a:	22c2      	movs	r2, #194	; 0xc2
 800038c:	32ff      	adds	r2, #255	; 0xff
 800038e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_ADC_Init+0xc8>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <MX_ADC_Init+0xc8>)
 8000398:	2224      	movs	r2, #36	; 0x24
 800039a:	2100      	movs	r1, #0
 800039c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_ADC_Init+0xc8>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <MX_ADC_Init+0xc8>)
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f892 	bl	80014d0 <HAL_ADC_Init>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003b0:	f000 fd40 	bl	8000e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	220a      	movs	r2, #10
 80003b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	0152      	lsls	r2, r2, #5
 80003c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	0552      	lsls	r2, r2, #21
 80003c8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ca:	1d3a      	adds	r2, r7, #4
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_ADC_Init+0xc8>)
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 fc79 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003da:	f000 fd2b 	bl	8000e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	220b      	movs	r2, #11
 80003e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e4:	1d3a      	adds	r2, r7, #4
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_ADC_Init+0xc8>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fc6c 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80003f4:	f000 fd1e 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b004      	add	sp, #16
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	200001d4 	.word	0x200001d4
 8000404:	40012400 	.word	0x40012400

08000408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_I2C1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_I2C1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_I2C1_Init+0x74>)
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <MX_I2C1_Init+0x7c>)
 8000416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_I2C1_Init+0x74>)
 8000420:	2201      	movs	r2, #1
 8000422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_I2C1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_I2C1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_I2C1_Init+0x74>)
 8000444:	0018      	movs	r0, r3
 8000446:	f002 fbaf 	bl	8002ba8 <HAL_I2C_Init>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044e:	f000 fcf1 	bl	8000e34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000452:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_I2C1_Init+0x74>)
 8000454:	2100      	movs	r1, #0
 8000456:	0018      	movs	r0, r3
 8000458:	f003 fa3c 	bl	80038d4 <HAL_I2CEx_ConfigAnalogFilter>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000460:	f000 fce8 	bl	8000e34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <MX_I2C1_Init+0x74>)
 8000466:	2100      	movs	r1, #0
 8000468:	0018      	movs	r0, r3
 800046a:	f003 fa7f 	bl	800396c <HAL_I2CEx_ConfigDigitalFilter>
 800046e:	1e03      	subs	r3, r0, #0
 8000470:	d001      	beq.n	8000476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 fcdf 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000038 	.word	0x20000038
 8000480:	40005400 	.word	0x40005400
 8000484:	0000020b 	.word	0x0000020b

08000488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800048e:	2308      	movs	r3, #8
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	0018      	movs	r0, r3
 8000494:	2310      	movs	r3, #16
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f005 fc12 	bl	8005cc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800049e:	003b      	movs	r3, r7
 80004a0:	0018      	movs	r0, r3
 80004a2:	2308      	movs	r3, #8
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f005 fc0b 	bl	8005cc2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004ae:	4a1f      	ldr	r2, [pc, #124]	; (800052c <MX_TIM3_Init+0xa4>)
 80004b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004b4:	224a      	movs	r2, #74	; 0x4a
 80004b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <MX_TIM3_Init+0xa8>)
 80004c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f003 ffe6 	bl	80044a4 <HAL_TIM_Base_Init>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80004dc:	f000 fcaa 	bl	8000e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004e0:	2108      	movs	r1, #8
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2280      	movs	r2, #128	; 0x80
 80004e6:	0152      	lsls	r2, r2, #5
 80004e8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_TIM3_Init+0xa0>)
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f004 f9b7 	bl	8004864 <HAL_TIM_ConfigClockSource>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004fa:	f000 fc9b 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004fe:	003b      	movs	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000504:	003b      	movs	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800050a:	003a      	movs	r2, r7
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_TIM3_Init+0xa0>)
 800050e:	0011      	movs	r1, r2
 8000510:	0018      	movs	r0, r3
 8000512:	f004 fbab 	bl	8004c6c <HAL_TIMEx_MasterConfigSynchronization>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800051a:	f000 fc8b 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b006      	add	sp, #24
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000084 	.word	0x20000084
 800052c:	40000400 	.word	0x40000400
 8000530:	0000f9ff 	.word	0x0000f9ff

08000534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <MX_USART1_UART_Init+0x58>)
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <MX_USART1_UART_Init+0x5c>)
 800053c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <MX_USART1_UART_Init+0x60>)
 8000542:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <MX_USART1_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000558:	220c      	movs	r2, #12
 800055a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <MX_USART1_UART_Init+0x58>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000564:	2200      	movs	r2, #0
 8000566:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <MX_USART1_UART_Init+0x58>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000570:	2200      	movs	r2, #0
 8000572:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <MX_USART1_UART_Init+0x58>)
 8000576:	0018      	movs	r0, r3
 8000578:	f004 fbe0 	bl	8004d3c <HAL_UART_Init>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000580:	f000 fc58 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	200000cc 	.word	0x200000cc
 8000590:	40013800 	.word	0x40013800
 8000594:	00007a12 	.word	0x00007a12

08000598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <MX_USART2_UART_Init+0x5c>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005a4:	2296      	movs	r2, #150	; 0x96
 80005a6:	0192      	lsls	r2, r2, #6
 80005a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005be:	2208      	movs	r2, #8
 80005c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_USART2_UART_Init+0x58>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f004 fbad 	bl	8004d3c <HAL_UART_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005e6:	f000 fc25 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000150 	.word	0x20000150
 80005f4:	40004400 	.word	0x40004400

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b590      	push	{r4, r7, lr}
 80005fa:	b08b      	sub	sp, #44	; 0x2c
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	2414      	movs	r4, #20
 8000600:	193b      	adds	r3, r7, r4
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f005 fb5a 	bl	8005cc2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b57      	ldr	r3, [pc, #348]	; (800076c <MX_GPIO_Init+0x174>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <MX_GPIO_Init+0x174>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0309      	lsls	r1, r1, #12
 8000618:	430a      	orrs	r2, r1
 800061a:	615a      	str	r2, [r3, #20]
 800061c:	4b53      	ldr	r3, [pc, #332]	; (800076c <MX_GPIO_Init+0x174>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	031b      	lsls	r3, r3, #12
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <MX_GPIO_Init+0x174>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <MX_GPIO_Init+0x174>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	03c9      	lsls	r1, r1, #15
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b4c      	ldr	r3, [pc, #304]	; (800076c <MX_GPIO_Init+0x174>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	03db      	lsls	r3, r3, #15
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b49      	ldr	r3, [pc, #292]	; (800076c <MX_GPIO_Init+0x174>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b48      	ldr	r3, [pc, #288]	; (800076c <MX_GPIO_Init+0x174>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	0289      	lsls	r1, r1, #10
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b45      	ldr	r3, [pc, #276]	; (800076c <MX_GPIO_Init+0x174>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	029b      	lsls	r3, r3, #10
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b42      	ldr	r3, [pc, #264]	; (800076c <MX_GPIO_Init+0x174>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b41      	ldr	r3, [pc, #260]	; (800076c <MX_GPIO_Init+0x174>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	02c9      	lsls	r1, r1, #11
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b3e      	ldr	r3, [pc, #248]	; (800076c <MX_GPIO_Init+0x174>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	02db      	lsls	r3, r3, #11
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2390      	movs	r3, #144	; 0x90
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f002 fa55 	bl	8002b36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0192      	lsls	r2, r2, #6
 8000692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2288      	movs	r2, #136	; 0x88
 8000698:	0352      	lsls	r2, r2, #13
 800069a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	4a32      	ldr	r2, [pc, #200]	; (8000770 <MX_GPIO_Init+0x178>)
 80006a6:	0019      	movs	r1, r3
 80006a8:	0010      	movs	r0, r2
 80006aa:	f002 f8b7 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2220      	movs	r2, #32
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c6:	193a      	adds	r2, r7, r4
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 f8a4 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : UpPad1_Pin DownPad1_Pin Piezo2_Pin */
  GPIO_InitStruct.Pin = UpPad1_Pin|DownPad1_Pin|Piezo2_Pin;
 80006d4:	0021      	movs	r1, r4
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	228c      	movs	r2, #140	; 0x8c
 80006da:	0092      	lsls	r2, r2, #2
 80006dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	22c4      	movs	r2, #196	; 0xc4
 80006e2:	0392      	lsls	r2, r2, #14
 80006e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ec:	000c      	movs	r4, r1
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <MX_GPIO_Init+0x178>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f002 f891 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : UpPad2_Pin DownPad2_Pin UpPad3_Pin DownPad3_Pin
                           UpPad4_Pin Piezo3_Pin */
  GPIO_InitStruct.Pin = UpPad2_Pin|DownPad2_Pin|UpPad3_Pin|DownPad3_Pin
 80006fa:	0021      	movs	r1, r4
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <MX_GPIO_Init+0x17c>)
 8000700:	601a      	str	r2, [r3, #0]
                          |UpPad4_Pin|Piezo3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	22c4      	movs	r2, #196	; 0xc4
 8000706:	0392      	lsls	r2, r2, #14
 8000708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	000c      	movs	r4, r1
 8000712:	187b      	adds	r3, r7, r1
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_GPIO_Init+0x180>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f002 f87f 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : Piezo1_Pin DownPad4_Pin */
  GPIO_InitStruct.Pin = Piezo1_Pin|DownPad4_Pin;
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2288      	movs	r2, #136	; 0x88
 8000724:	0152      	lsls	r2, r2, #5
 8000726:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	22c4      	movs	r2, #196	; 0xc4
 800072c:	0392      	lsls	r2, r2, #14
 800072e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	187a      	adds	r2, r7, r1
 8000738:	2390      	movs	r3, #144	; 0x90
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f002 f86c 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2005      	movs	r0, #5
 800074a:	f001 fe49 	bl	80023e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800074e:	2005      	movs	r0, #5
 8000750:	f001 fe5b 	bl	800240a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	2007      	movs	r0, #7
 800075a:	f001 fe41 	bl	80023e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800075e:	2007      	movs	r0, #7
 8000760:	f001 fe53 	bl	800240a <HAL_NVIC_EnableIRQ>

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b00b      	add	sp, #44	; 0x2c
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	48000800 	.word	0x48000800
 8000774:	00008c07 	.word	0x00008c07
 8000778:	48000400 	.word	0x48000400

0800077c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800077c:	b5b0      	push	{r4, r5, r7, lr}
 800077e:	b0a2      	sub	sp, #136	; 0x88
 8000780:	af20      	add	r7, sp, #128	; 0x80
 8000782:	0002      	movs	r2, r0
 8000784:	1dbb      	adds	r3, r7, #6
 8000786:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0152      	lsls	r2, r2, #5
 8000790:	4293      	cmp	r3, r2
 8000792:	d100      	bne.n	8000796 <HAL_GPIO_EXTI_Callback+0x1a>
 8000794:	e1f5      	b.n	8000b82 <HAL_GPIO_EXTI_Callback+0x406>
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	0152      	lsls	r2, r2, #5
 800079a:	4293      	cmp	r3, r2
 800079c:	dd00      	ble.n	80007a0 <HAL_GPIO_EXTI_Callback+0x24>
 800079e:	e241      	b.n	8000c24 <HAL_GPIO_EXTI_Callback+0x4a8>
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d100      	bne.n	80007aa <HAL_GPIO_EXTI_Callback+0x2e>
 80007a8:	e0c8      	b.n	800093c <HAL_GPIO_EXTI_Callback+0x1c0>
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	4293      	cmp	r3, r2
 80007b0:	dd00      	ble.n	80007b4 <HAL_GPIO_EXTI_Callback+0x38>
 80007b2:	e237      	b.n	8000c24 <HAL_GPIO_EXTI_Callback+0x4a8>
 80007b4:	2b20      	cmp	r3, #32
 80007b6:	dc0a      	bgt.n	80007ce <HAL_GPIO_EXTI_Callback+0x52>
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dc00      	bgt.n	80007be <HAL_GPIO_EXTI_Callback+0x42>
 80007bc:	e232      	b.n	8000c24 <HAL_GPIO_EXTI_Callback+0x4a8>
 80007be:	2b20      	cmp	r3, #32
 80007c0:	d900      	bls.n	80007c4 <HAL_GPIO_EXTI_Callback+0x48>
 80007c2:	e22f      	b.n	8000c24 <HAL_GPIO_EXTI_Callback+0x4a8>
 80007c4:	009a      	lsls	r2, r3, #2
 80007c6:	4bd7      	ldr	r3, [pc, #860]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x3a8>)
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	469f      	mov	pc, r3
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	00d2      	lsls	r2, r2, #3
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d100      	bne.n	80007d8 <HAL_GPIO_EXTI_Callback+0x5c>
 80007d6:	e179      	b.n	8000acc <HAL_GPIO_EXTI_Callback+0x350>

//		case RDY_PIN_Pin: if (HAL_GPIO_ReadPin(RDY_PIN_GPIO_Port, RDY_PIN_Pin)== GPIO_PIN_RESET){
//			srv_iqs5xx_callback();
//		}
		default:
			break;
 80007d8:	e224      	b.n	8000c24 <HAL_GPIO_EXTI_Callback+0x4a8>
			if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_SET && UpPad1_state != true){
 80007da:	4bd3      	ldr	r3, [pc, #844]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80007dc:	2110      	movs	r1, #16
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 f98c 	bl	8002afc <HAL_GPIO_ReadPin>
 80007e4:	0003      	movs	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d121      	bne.n	800082e <HAL_GPIO_EXTI_Callback+0xb2>
 80007ea:	4bd0      	ldr	r3, [pc, #832]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x3b0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4053      	eors	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d01a      	beq.n	800082e <HAL_GPIO_EXTI_Callback+0xb2>
				CC1Value ++;
 80007f8:	4bcd      	ldr	r3, [pc, #820]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4bcb      	ldr	r3, [pc, #812]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8000802:	701a      	strb	r2, [r3, #0]
				srv_midi_internal_controlChange(1, CC1Value, huart1);
 8000804:	4bca      	ldr	r3, [pc, #808]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8000806:	781d      	ldrb	r5, [r3, #0]
 8000808:	4cca      	ldr	r4, [pc, #808]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 800080a:	466b      	mov	r3, sp
 800080c:	0018      	movs	r0, r3
 800080e:	0023      	movs	r3, r4
 8000810:	3308      	adds	r3, #8
 8000812:	227c      	movs	r2, #124	; 0x7c
 8000814:	0019      	movs	r1, r3
 8000816:	f005 fa4b 	bl	8005cb0 <memcpy>
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	0029      	movs	r1, r5
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fb57 	bl	8000ed4 <srv_midi_internal_controlChange>
				UpPad1_state = true;
 8000826:	4bc1      	ldr	r3, [pc, #772]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x3b0>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
			break;
 800082c:	e1fc      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x4ac>
			else if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_RESET && UpPad1_state != false) {
 800082e:	4bbe      	ldr	r3, [pc, #760]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x3ac>)
 8000830:	2110      	movs	r1, #16
 8000832:	0018      	movs	r0, r3
 8000834:	f002 f962 	bl	8002afc <HAL_GPIO_ReadPin>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d000      	beq.n	800083e <HAL_GPIO_EXTI_Callback+0xc2>
 800083c:	e1f4      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x4ac>
 800083e:	4bbb      	ldr	r3, [pc, #748]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x3b0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d100      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0xcc>
 8000846:	e1ef      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x4ac>
				UpPad1_state = false;
 8000848:	4bb8      	ldr	r3, [pc, #736]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x3b0>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
			break;
 800084e:	e1eb      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x4ac>
					if (HAL_GPIO_ReadPin(UpPad2_GPIO_Port, UpPad2_Pin)== GPIO_PIN_SET && UpPad2_state != true){
 8000850:	4bb9      	ldr	r3, [pc, #740]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8000852:	2101      	movs	r1, #1
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f951 	bl	8002afc <HAL_GPIO_ReadPin>
 800085a:	0003      	movs	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d121      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0x128>
 8000860:	4bb6      	ldr	r3, [pc, #728]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x3c0>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2201      	movs	r2, #1
 8000866:	4053      	eors	r3, r2
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d01a      	beq.n	80008a4 <HAL_GPIO_EXTI_Callback+0x128>
						CC2Value ++;
 800086e:	4bb4      	ldr	r3, [pc, #720]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4bb2      	ldr	r3, [pc, #712]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8000878:	701a      	strb	r2, [r3, #0]
						srv_midi_internal_controlChange(2, CC2Value, huart1);
 800087a:	4bb1      	ldr	r3, [pc, #708]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 800087c:	781d      	ldrb	r5, [r3, #0]
 800087e:	4cad      	ldr	r4, [pc, #692]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8000880:	466b      	mov	r3, sp
 8000882:	0018      	movs	r0, r3
 8000884:	0023      	movs	r3, r4
 8000886:	3308      	adds	r3, #8
 8000888:	227c      	movs	r2, #124	; 0x7c
 800088a:	0019      	movs	r1, r3
 800088c:	f005 fa10 	bl	8005cb0 <memcpy>
 8000890:	6822      	ldr	r2, [r4, #0]
 8000892:	6863      	ldr	r3, [r4, #4]
 8000894:	0029      	movs	r1, r5
 8000896:	2002      	movs	r0, #2
 8000898:	f000 fb1c 	bl	8000ed4 <srv_midi_internal_controlChange>
						UpPad2_state = true;
 800089c:	4ba7      	ldr	r3, [pc, #668]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x3c0>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
					break;
 80008a2:	e1c3      	b.n	8000c2c <HAL_GPIO_EXTI_Callback+0x4b0>
					else if (HAL_GPIO_ReadPin(UpPad2_GPIO_Port, UpPad2_Pin)== GPIO_PIN_RESET && UpPad2_state != false) {
 80008a4:	4ba4      	ldr	r3, [pc, #656]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 f927 	bl	8002afc <HAL_GPIO_ReadPin>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d000      	beq.n	80008b4 <HAL_GPIO_EXTI_Callback+0x138>
 80008b2:	e1bb      	b.n	8000c2c <HAL_GPIO_EXTI_Callback+0x4b0>
 80008b4:	4ba1      	ldr	r3, [pc, #644]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x3c0>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d100      	bne.n	80008be <HAL_GPIO_EXTI_Callback+0x142>
 80008bc:	e1b6      	b.n	8000c2c <HAL_GPIO_EXTI_Callback+0x4b0>
						UpPad2_state = false;
 80008be:	4b9f      	ldr	r3, [pc, #636]	; (8000b3c <HAL_GPIO_EXTI_Callback+0x3c0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
					break;
 80008c4:	e1b2      	b.n	8000c2c <HAL_GPIO_EXTI_Callback+0x4b0>
							if (HAL_GPIO_ReadPin(UpPad3_GPIO_Port, UpPad3_Pin)== GPIO_PIN_SET && UpPad3_state != true){
 80008c6:	4b9c      	ldr	r3, [pc, #624]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80008c8:	2104      	movs	r1, #4
 80008ca:	0018      	movs	r0, r3
 80008cc:	f002 f916 	bl	8002afc <HAL_GPIO_ReadPin>
 80008d0:	0003      	movs	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d121      	bne.n	800091a <HAL_GPIO_EXTI_Callback+0x19e>
 80008d6:	4b9b      	ldr	r3, [pc, #620]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x3c8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4053      	eors	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d01a      	beq.n	800091a <HAL_GPIO_EXTI_Callback+0x19e>
								CC3Value ++;
 80008e4:	4b98      	ldr	r3, [pc, #608]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b96      	ldr	r3, [pc, #600]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80008ee:	701a      	strb	r2, [r3, #0]
								srv_midi_internal_controlChange(3, CC3Value, huart1);
 80008f0:	4b95      	ldr	r3, [pc, #596]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 80008f2:	781d      	ldrb	r5, [r3, #0]
 80008f4:	4c8f      	ldr	r4, [pc, #572]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80008f6:	466b      	mov	r3, sp
 80008f8:	0018      	movs	r0, r3
 80008fa:	0023      	movs	r3, r4
 80008fc:	3308      	adds	r3, #8
 80008fe:	227c      	movs	r2, #124	; 0x7c
 8000900:	0019      	movs	r1, r3
 8000902:	f005 f9d5 	bl	8005cb0 <memcpy>
 8000906:	6822      	ldr	r2, [r4, #0]
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	0029      	movs	r1, r5
 800090c:	2003      	movs	r0, #3
 800090e:	f000 fae1 	bl	8000ed4 <srv_midi_internal_controlChange>
								UpPad3_state = true;
 8000912:	4b8c      	ldr	r3, [pc, #560]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
							break;
 8000918:	e18a      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x4b4>
							else if (HAL_GPIO_ReadPin(UpPad3_GPIO_Port, UpPad3_Pin)== GPIO_PIN_RESET && UpPad3_state != false) {
 800091a:	4b87      	ldr	r3, [pc, #540]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 800091c:	2104      	movs	r1, #4
 800091e:	0018      	movs	r0, r3
 8000920:	f002 f8ec 	bl	8002afc <HAL_GPIO_ReadPin>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d000      	beq.n	800092a <HAL_GPIO_EXTI_Callback+0x1ae>
 8000928:	e182      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x4b4>
 800092a:	4b86      	ldr	r3, [pc, #536]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x3c8>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <HAL_GPIO_EXTI_Callback+0x1b8>
 8000932:	e17d      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x4b4>
								UpPad3_state = false;
 8000934:	4b83      	ldr	r3, [pc, #524]	; (8000b44 <HAL_GPIO_EXTI_Callback+0x3c8>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
							break;
 800093a:	e179      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x4b4>
									if (HAL_GPIO_ReadPin(UpPad4_GPIO_Port, UpPad4_Pin)== GPIO_PIN_SET && UpPad4_state != true){
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	4a7d      	ldr	r2, [pc, #500]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f002 f8d9 	bl	8002afc <HAL_GPIO_ReadPin>
 800094a:	0003      	movs	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d124      	bne.n	800099a <HAL_GPIO_EXTI_Callback+0x21e>
 8000950:	4b7e      	ldr	r3, [pc, #504]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2201      	movs	r2, #1
 8000956:	4053      	eors	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d01d      	beq.n	800099a <HAL_GPIO_EXTI_Callback+0x21e>
										if (VideoSelector<27){
 800095e:	4b7c      	ldr	r3, [pc, #496]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b1a      	cmp	r3, #26
 8000964:	d815      	bhi.n	8000992 <HAL_GPIO_EXTI_Callback+0x216>
											VideoSelector++;
 8000966:	4b7a      	ldr	r3, [pc, #488]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b78      	ldr	r3, [pc, #480]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000970:	701a      	strb	r2, [r3, #0]
											srv_midi_internal_sendNote(VideoSelector, 3, 60, huart1);
 8000972:	4b77      	ldr	r3, [pc, #476]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x3d4>)
 8000974:	781d      	ldrb	r5, [r3, #0]
 8000976:	4c6f      	ldr	r4, [pc, #444]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8000978:	466b      	mov	r3, sp
 800097a:	0018      	movs	r0, r3
 800097c:	1d23      	adds	r3, r4, #4
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	0019      	movs	r1, r3
 8000982:	f005 f995 	bl	8005cb0 <memcpy>
 8000986:	6823      	ldr	r3, [r4, #0]
 8000988:	223c      	movs	r2, #60	; 0x3c
 800098a:	2103      	movs	r1, #3
 800098c:	0028      	movs	r0, r5
 800098e:	f000 fa57 	bl	8000e40 <srv_midi_internal_sendNote>
										UpPad4_state = true;
 8000992:	4b6e      	ldr	r3, [pc, #440]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x3d0>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
									break;
 8000998:	e14c      	b.n	8000c34 <HAL_GPIO_EXTI_Callback+0x4b8>
									else if (HAL_GPIO_ReadPin(UpPad4_GPIO_Port, UpPad4_Pin)== GPIO_PIN_RESET && UpPad4_state != false) {
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	011b      	lsls	r3, r3, #4
 800099e:	4a66      	ldr	r2, [pc, #408]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 80009a0:	0019      	movs	r1, r3
 80009a2:	0010      	movs	r0, r2
 80009a4:	f002 f8aa 	bl	8002afc <HAL_GPIO_ReadPin>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d000      	beq.n	80009ae <HAL_GPIO_EXTI_Callback+0x232>
 80009ac:	e142      	b.n	8000c34 <HAL_GPIO_EXTI_Callback+0x4b8>
 80009ae:	4b67      	ldr	r3, [pc, #412]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x3d0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d100      	bne.n	80009b8 <HAL_GPIO_EXTI_Callback+0x23c>
 80009b6:	e13d      	b.n	8000c34 <HAL_GPIO_EXTI_Callback+0x4b8>
										UpPad4_state = false;
 80009b8:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x3d0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
										srv_midi_internal_sendNote(VideoSelector, 3, 0, huart1);
 80009be:	4b64      	ldr	r3, [pc, #400]	; (8000b50 <HAL_GPIO_EXTI_Callback+0x3d4>)
 80009c0:	781d      	ldrb	r5, [r3, #0]
 80009c2:	4c5c      	ldr	r4, [pc, #368]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 80009c4:	466b      	mov	r3, sp
 80009c6:	0018      	movs	r0, r3
 80009c8:	1d23      	adds	r3, r4, #4
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0019      	movs	r1, r3
 80009ce:	f005 f96f 	bl	8005cb0 <memcpy>
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	2103      	movs	r1, #3
 80009d8:	0028      	movs	r0, r5
 80009da:	f000 fa31 	bl	8000e40 <srv_midi_internal_sendNote>
									break;
 80009de:	e129      	b.n	8000c34 <HAL_GPIO_EXTI_Callback+0x4b8>
			if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_SET && DownPad1_state != true){
 80009e0:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x3ac>)
 80009e2:	2120      	movs	r1, #32
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 f889 	bl	8002afc <HAL_GPIO_ReadPin>
 80009ea:	0003      	movs	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d121      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0x2b8>
 80009f0:	4b58      	ldr	r3, [pc, #352]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x3d8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2201      	movs	r2, #1
 80009f6:	4053      	eors	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d01a      	beq.n	8000a34 <HAL_GPIO_EXTI_Callback+0x2b8>
				CC1Value --;
 80009fe:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8000a08:	701a      	strb	r2, [r3, #0]
				srv_midi_internal_controlChange(1, CC1Value, huart1);
 8000a0a:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x3b4>)
 8000a0c:	781d      	ldrb	r5, [r3, #0]
 8000a0e:	4c49      	ldr	r4, [pc, #292]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8000a10:	466b      	mov	r3, sp
 8000a12:	0018      	movs	r0, r3
 8000a14:	0023      	movs	r3, r4
 8000a16:	3308      	adds	r3, #8
 8000a18:	227c      	movs	r2, #124	; 0x7c
 8000a1a:	0019      	movs	r1, r3
 8000a1c:	f005 f948 	bl	8005cb0 <memcpy>
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	0029      	movs	r1, r5
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fa54 	bl	8000ed4 <srv_midi_internal_controlChange>
				DownPad1_state = true;
 8000a2c:	4b49      	ldr	r3, [pc, #292]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
			break;
 8000a32:	e101      	b.n	8000c38 <HAL_GPIO_EXTI_Callback+0x4bc>
			else if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_RESET && DownPad1_state != false) {
 8000a34:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x3ac>)
 8000a36:	2120      	movs	r1, #32
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 f85f 	bl	8002afc <HAL_GPIO_ReadPin>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d000      	beq.n	8000a44 <HAL_GPIO_EXTI_Callback+0x2c8>
 8000a42:	e0f9      	b.n	8000c38 <HAL_GPIO_EXTI_Callback+0x4bc>
 8000a44:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d100      	bne.n	8000a4e <HAL_GPIO_EXTI_Callback+0x2d2>
 8000a4c:	e0f4      	b.n	8000c38 <HAL_GPIO_EXTI_Callback+0x4bc>
				DownPad1_state = false;
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <HAL_GPIO_EXTI_Callback+0x3d8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
			break;
 8000a54:	e0f0      	b.n	8000c38 <HAL_GPIO_EXTI_Callback+0x4bc>
					if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_SET && DownPad2_state != true){
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8000a58:	2102      	movs	r1, #2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 f84e 	bl	8002afc <HAL_GPIO_ReadPin>
 8000a60:	0003      	movs	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d121      	bne.n	8000aaa <HAL_GPIO_EXTI_Callback+0x32e>
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4053      	eors	r3, r2
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d01a      	beq.n	8000aaa <HAL_GPIO_EXTI_Callback+0x32e>
						CC2Value --;
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8000a7e:	701a      	strb	r2, [r3, #0]
						srv_midi_internal_controlChange(2, CC2Value, huart1);
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_GPIO_EXTI_Callback+0x3c4>)
 8000a82:	781d      	ldrb	r5, [r3, #0]
 8000a84:	4c2b      	ldr	r4, [pc, #172]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8000a86:	466b      	mov	r3, sp
 8000a88:	0018      	movs	r0, r3
 8000a8a:	0023      	movs	r3, r4
 8000a8c:	3308      	adds	r3, #8
 8000a8e:	227c      	movs	r2, #124	; 0x7c
 8000a90:	0019      	movs	r1, r3
 8000a92:	f005 f90d 	bl	8005cb0 <memcpy>
 8000a96:	6822      	ldr	r2, [r4, #0]
 8000a98:	6863      	ldr	r3, [r4, #4]
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f000 fa19 	bl	8000ed4 <srv_midi_internal_controlChange>
						DownPad2_state = true;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
					break;
 8000aa8:	e0c8      	b.n	8000c3c <HAL_GPIO_EXTI_Callback+0x4c0>
					else if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_RESET && DownPad2_state != false) {
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8000aac:	2102      	movs	r1, #2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 f824 	bl	8002afc <HAL_GPIO_ReadPin>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d000      	beq.n	8000aba <HAL_GPIO_EXTI_Callback+0x33e>
 8000ab8:	e0c0      	b.n	8000c3c <HAL_GPIO_EXTI_Callback+0x4c0>
 8000aba:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d100      	bne.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x348>
 8000ac2:	e0bb      	b.n	8000c3c <HAL_GPIO_EXTI_Callback+0x4c0>
						DownPad2_state = false;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <HAL_GPIO_EXTI_Callback+0x3dc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
					break;
 8000aca:	e0b7      	b.n	8000c3c <HAL_GPIO_EXTI_Callback+0x4c0>
							if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_SET && DownPad3_state != true){
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	0010      	movs	r0, r2
 8000ad6:	f002 f811 	bl	8002afc <HAL_GPIO_ReadPin>
 8000ada:	0003      	movs	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d13f      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x3e4>
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4053      	eors	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d038      	beq.n	8000b60 <HAL_GPIO_EXTI_Callback+0x3e4>
								CC3Value --;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000af8:	701a      	strb	r2, [r3, #0]
								srv_midi_internal_controlChange(3, CC3Value, huart1);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x3cc>)
 8000afc:	781d      	ldrb	r5, [r3, #0]
 8000afe:	4c0d      	ldr	r4, [pc, #52]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8000b00:	466b      	mov	r3, sp
 8000b02:	0018      	movs	r0, r3
 8000b04:	0023      	movs	r3, r4
 8000b06:	3308      	adds	r3, #8
 8000b08:	227c      	movs	r2, #124	; 0x7c
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	f005 f8d0 	bl	8005cb0 <memcpy>
 8000b10:	6822      	ldr	r2, [r4, #0]
 8000b12:	6863      	ldr	r3, [r4, #4]
 8000b14:	0029      	movs	r1, r5
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f9dc 	bl	8000ed4 <srv_midi_internal_controlChange>
								DownPad3_state = true;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_GPIO_EXTI_Callback+0x3e0>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
							break;
 8000b22:	e08d      	b.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4c4>
 8000b24:	08005d0c 	.word	0x08005d0c
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	20000000 	.word	0x20000000
 8000b34:	200000cc 	.word	0x200000cc
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	2000002d 	.word	0x2000002d
 8000b40:	20000001 	.word	0x20000001
 8000b44:	2000002e 	.word	0x2000002e
 8000b48:	20000002 	.word	0x20000002
 8000b4c:	2000002f 	.word	0x2000002f
 8000b50:	20000003 	.word	0x20000003
 8000b54:	20000030 	.word	0x20000030
 8000b58:	20000031 	.word	0x20000031
 8000b5c:	20000032 	.word	0x20000032
							else if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_RESET && DownPad3_state != false) {
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	4a3a      	ldr	r2, [pc, #232]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f001 ffc7 	bl	8002afc <HAL_GPIO_ReadPin>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d166      	bne.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4c4>
 8000b72:	4b38      	ldr	r3, [pc, #224]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d062      	beq.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4c4>
								DownPad3_state = false;
 8000b7a:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
							break;
 8000b80:	e05e      	b.n	8000c40 <HAL_GPIO_EXTI_Callback+0x4c4>
									if (HAL_GPIO_ReadPin(DownPad4_GPIO_Port, DownPad4_Pin)== GPIO_PIN_SET && DownPad4_state != true){
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	015a      	lsls	r2, r3, #5
 8000b86:	2390      	movs	r3, #144	; 0x90
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f001 ffb5 	bl	8002afc <HAL_GPIO_ReadPin>
 8000b92:	0003      	movs	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d124      	bne.n	8000be2 <HAL_GPIO_EXTI_Callback+0x466>
 8000b98:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4053      	eors	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d01d      	beq.n	8000be2 <HAL_GPIO_EXTI_Callback+0x466>
										if (VideoSelector>19){
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b13      	cmp	r3, #19
 8000bac:	d915      	bls.n	8000bda <HAL_GPIO_EXTI_Callback+0x45e>
											VideoSelector--;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000bb8:	701a      	strb	r2, [r3, #0]
											srv_midi_internal_sendNote(VideoSelector, 3, 60, huart1);
 8000bba:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000bbc:	781d      	ldrb	r5, [r3, #0]
 8000bbe:	4c28      	ldr	r4, [pc, #160]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000bc0:	466b      	mov	r3, sp
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	1d23      	adds	r3, r4, #4
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f005 f871 	bl	8005cb0 <memcpy>
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	223c      	movs	r2, #60	; 0x3c
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	0028      	movs	r0, r5
 8000bd6:	f000 f933 	bl	8000e40 <srv_midi_internal_sendNote>
										DownPad3_state = true;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
									break;
 8000be0:	e030      	b.n	8000c44 <HAL_GPIO_EXTI_Callback+0x4c8>
									else if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_RESET && DownPad3_state != false) {
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000be8:	0019      	movs	r1, r3
 8000bea:	0010      	movs	r0, r2
 8000bec:	f001 ff86 	bl	8002afc <HAL_GPIO_ReadPin>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d127      	bne.n	8000c44 <HAL_GPIO_EXTI_Callback+0x4c8>
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d023      	beq.n	8000c44 <HAL_GPIO_EXTI_Callback+0x4c8>
										DownPad3_state = false;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
										srv_midi_internal_sendNote(VideoSelector, 3, 0, huart1);
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000c04:	781d      	ldrb	r5, [r3, #0]
 8000c06:	4c16      	ldr	r4, [pc, #88]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x4e4>)
 8000c08:	466b      	mov	r3, sp
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	1d23      	adds	r3, r4, #4
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0019      	movs	r1, r3
 8000c12:	f005 f84d 	bl	8005cb0 <memcpy>
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	0028      	movs	r0, r5
 8000c1e:	f000 f90f 	bl	8000e40 <srv_midi_internal_sendNote>
									break;
 8000c22:	e00f      	b.n	8000c44 <HAL_GPIO_EXTI_Callback+0x4c8>
			break;
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	e00e      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
			break;
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	e00c      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
					break;
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	e00a      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
							break;
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
									break;
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
			break;
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	e004      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
					break;
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
							break;
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	e000      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x4ca>
									break;
 8000c44:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	48000400 	.word	0x48000400
 8000c54:	20000032 	.word	0x20000032
 8000c58:	20000033 	.word	0x20000033
 8000c5c:	20000003 	.word	0x20000003
 8000c60:	200000cc 	.word	0x200000cc

08000c64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
 //Non blocking delay for getting ADC value every x ms
  GET_ADC_Value();
 8000c6c:	f000 f8d6 	bl	8000e1c <GET_ADC_Value>
  HAL_TIM_Base_Stop_IT(&htim3);
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f003 fcb2 	bl	80045dc <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f003 fc62 	bl	8004544 <HAL_TIM_Base_Start_IT>

}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000084 	.word	0x20000084

08000c8c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //Callback when ADC got a value
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b0a5      	sub	sp, #148	; 0x94
 8000c90:	af20      	add	r7, sp, #128	; 0x80
 8000c92:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	//HAL_Delay(1000);
	uint16_t LumValue_1 = HAL_ADC_GetValue(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 ff42 	bl	8001b20 <HAL_ADC_GetValue>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	210e      	movs	r1, #14
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	801a      	strh	r2, [r3, #0]
    if (LumValue_1 < LUM1THRESHOLD && Play1 !=true){
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	4a49      	ldr	r2, [pc, #292]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x144>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d818      	bhi.n	8000ce0 <HAL_ADC_ConvCpltCallback+0x54>
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x148>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4053      	eors	r3, r2
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d011      	beq.n	8000ce0 <HAL_ADC_ConvCpltCallback+0x54>
    	srv_midi_internal_sendNote(PLAY1_NOTE, 1, 50, huart1);
 8000cbc:	4c46      	ldr	r4, [pc, #280]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000cbe:	466b      	mov	r3, sp
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	1d23      	adds	r3, r4, #4
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f004 fff2 	bl	8005cb0 <memcpy>
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	2232      	movs	r2, #50	; 0x32
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2018      	movs	r0, #24
 8000cd4:	f000 f8b4 	bl	8000e40 <srv_midi_internal_sendNote>
    	Play1 = true;
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x148>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e01a      	b.n	8000d16 <HAL_ADC_ConvCpltCallback+0x8a>
    }
    else if (LumValue_1 >= LUM1THRESHOLD && Play1 == true) {
 8000ce0:	230e      	movs	r3, #14
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4a3a      	ldr	r2, [pc, #232]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x144>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d914      	bls.n	8000d16 <HAL_ADC_ConvCpltCallback+0x8a>
 8000cec:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x148>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d010      	beq.n	8000d16 <HAL_ADC_ConvCpltCallback+0x8a>
    	Play1 = false;
 8000cf4:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x148>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
    	srv_midi_internal_sendNote(PLAY1_NOTE, 1, 0, huart1);
 8000cfa:	4c37      	ldr	r4, [pc, #220]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000cfc:	466b      	mov	r3, sp
 8000cfe:	0018      	movs	r0, r3
 8000d00:	1d23      	adds	r3, r4, #4
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	0019      	movs	r1, r3
 8000d06:	f004 ffd3 	bl	8005cb0 <memcpy>
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2018      	movs	r0, #24
 8000d12:	f000 f895 	bl	8000e40 <srv_midi_internal_sendNote>
    }

    HAL_ADC_Stop_IT(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 feb7 	bl	8001a8c <HAL_ADC_Stop_IT>

    ADC_Select_CH11();
 8000d1e:	f000 f85f 	bl	8000de0 <ADC_Select_CH11>
    HAL_ADC_Start(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 fd13 	bl	8001750 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	425a      	negs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 fda0 	bl	8001878 <HAL_ADC_PollForConversion>
    uint16_t LumValue_2 = HAL_ADC_GetValue(hadc);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fef0 	bl	8001b20 <HAL_ADC_GetValue>
 8000d40:	0002      	movs	r2, r0
 8000d42:	210c      	movs	r1, #12
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	801a      	strh	r2, [r3, #0]
        if (LumValue_2 < LUM2THRESHOLD && Play2 !=true){
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	23e1      	movs	r3, #225	; 0xe1
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d218      	bcs.n	8000d86 <HAL_ADC_ConvCpltCallback+0xfa>
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x150>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4053      	eors	r3, r2
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d011      	beq.n	8000d86 <HAL_ADC_ConvCpltCallback+0xfa>
        	srv_midi_internal_sendNote(PLAY2_NOTE, 1, 50, huart1);
 8000d62:	4c1d      	ldr	r4, [pc, #116]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000d64:	466b      	mov	r3, sp
 8000d66:	0018      	movs	r0, r3
 8000d68:	1d23      	adds	r3, r4, #4
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	f004 ff9f 	bl	8005cb0 <memcpy>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	2232      	movs	r2, #50	; 0x32
 8000d76:	2101      	movs	r1, #1
 8000d78:	2019      	movs	r0, #25
 8000d7a:	f000 f861 	bl	8000e40 <srv_midi_internal_sendNote>
        	Play2 = true;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x150>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
 8000d84:	e01b      	b.n	8000dbe <HAL_ADC_ConvCpltCallback+0x132>
        }
        else if (LumValue_2 >= LUM2THRESHOLD && Play2 == true) {
 8000d86:	230c      	movs	r3, #12
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	23e1      	movs	r3, #225	; 0xe1
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d314      	bcc.n	8000dbe <HAL_ADC_ConvCpltCallback+0x132>
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x150>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d010      	beq.n	8000dbe <HAL_ADC_ConvCpltCallback+0x132>
        	Play2 = false;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x150>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
        	srv_midi_internal_sendNote(PLAY2_NOTE, 1, 0, huart1);
 8000da2:	4c0d      	ldr	r4, [pc, #52]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000da4:	466b      	mov	r3, sp
 8000da6:	0018      	movs	r0, r3
 8000da8:	1d23      	adds	r3, r4, #4
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	0019      	movs	r1, r3
 8000dae:	f004 ff7f 	bl	8005cb0 <memcpy>
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	2101      	movs	r1, #1
 8000db8:	2019      	movs	r0, #25
 8000dba:	f000 f841 	bl	8000e40 <srv_midi_internal_sendNote>
        }
        HAL_ADC_Stop(hadc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fd19 	bl	80017f8 <HAL_ADC_Stop>
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b005      	add	sp, #20
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	00000e73 	.word	0x00000e73
 8000dd4:	20000034 	.word	0x20000034
 8000dd8:	200000cc 	.word	0x200000cc
 8000ddc:	20000035 	.word	0x20000035

08000de0 <ADC_Select_CH11>:

void ADC_Select_CH11 (void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	0018      	movs	r0, r3
 8000dea:	230c      	movs	r3, #12
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f004 ff67 	bl	8005cc2 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	220b      	movs	r2, #11
 8000df8:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dfa:	1d3a      	adds	r2, r7, #4
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <ADC_Select_CH11+0x38>)
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 ff61 	bl	8001cc8 <HAL_ADC_ConfigChannel>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <ADC_Select_CH11+0x2e>
	  {
	    Error_Handler();
 8000e0a:	f000 f813 	bl	8000e34 <Error_Handler>
	  }
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	200001d4 	.word	0x200001d4

08000e1c <GET_ADC_Value>:

void GET_ADC_Value(void){ //Function to get all ADC values
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

	HAL_ADC_Start_IT(&hadc);
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <GET_ADC_Value+0x14>)
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fdc0 	bl	80019a8 <HAL_ADC_Start_IT>

}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	200001d4 	.word	0x200001d4

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>
	...

08000e40 <srv_midi_internal_sendNote>:

/* Private variables ---------------------------------------------------------*/
uint8_t aTxBuffer[3];

/* Public functions -----------------------------------------------*/
void srv_midi_internal_sendNote(uint8_t note,uint8_t channel, uint8_t velocity,UART_HandleTypeDef uart){
 8000e40:	b082      	sub	sp, #8
 8000e42:	b5b0      	push	{r4, r5, r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	0004      	movs	r4, r0
 8000e4a:	0008      	movs	r0, r1
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	2204      	movs	r2, #4
 8000e50:	2520      	movs	r5, #32
 8000e52:	46ac      	mov	ip, r5
 8000e54:	44bc      	add	ip, r7
 8000e56:	4462      	add	r2, ip
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	1c22      	adds	r2, r4, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	1d7b      	adds	r3, r7, #5
 8000e68:	1c0a      	adds	r2, r1, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
	uint8_t channelBuffer, noteBuffer, velocityBuffer;
	channelBuffer = 0x0F & channel; //To be sure that channel is 4 bits value
 8000e6c:	200f      	movs	r0, #15
 8000e6e:	183b      	adds	r3, r7, r0
 8000e70:	1dba      	adds	r2, r7, #6
 8000e72:	7812      	ldrb	r2, [r2, #0]
 8000e74:	210f      	movs	r1, #15
 8000e76:	400a      	ands	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	noteBuffer = 0x7F & note; //To be sure that note is 7 bits value
 8000e7a:	240e      	movs	r4, #14
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	1dfa      	adds	r2, r7, #7
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	217f      	movs	r1, #127	; 0x7f
 8000e84:	400a      	ands	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
	velocityBuffer = 0x7F & velocity; //To be sure that velocity is 7 bits value
 8000e88:	250d      	movs	r5, #13
 8000e8a:	197b      	adds	r3, r7, r5
 8000e8c:	1d7a      	adds	r2, r7, #5
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	217f      	movs	r1, #127	; 0x7f
 8000e92:	400a      	ands	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = channelBuffer+NOTE_ON;
 8000e96:	183b      	adds	r3, r7, r0
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	3b70      	subs	r3, #112	; 0x70
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <srv_midi_internal_sendNote+0x90>)
 8000ea0:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <srv_midi_internal_sendNote+0x90>)
 8000ea4:	193a      	adds	r2, r7, r4
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <srv_midi_internal_sendNote+0x90>)
 8000eac:	197a      	adds	r2, r7, r5
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 8000eb2:	23fa      	movs	r3, #250	; 0xfa
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4906      	ldr	r1, [pc, #24]	; (8000ed0 <srv_midi_internal_sendNote+0x90>)
 8000eb8:	2224      	movs	r2, #36	; 0x24
 8000eba:	18b8      	adds	r0, r7, r2
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	f003 ff91 	bl	8004de4 <HAL_UART_Transmit>
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b004      	add	sp, #16
 8000ec8:	bcb0      	pop	{r4, r5, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	b002      	add	sp, #8
 8000ece:	4718      	bx	r3
 8000ed0:	20000214 	.word	0x20000214

08000ed4 <srv_midi_internal_controlChange>:

void srv_midi_internal_controlChange(uint8_t controlNumber, uint8_t controlValue, UART_HandleTypeDef uart){
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	b5b0      	push	{r4, r5, r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	0004      	movs	r4, r0
 8000ede:	0008      	movs	r0, r1
 8000ee0:	2518      	movs	r5, #24
 8000ee2:	1979      	adds	r1, r7, r5
 8000ee4:	600a      	str	r2, [r1, #0]
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	1c22      	adds	r2, r4, #0
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	1c02      	adds	r2, r0, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = CONTROL_CHANGE;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <srv_midi_internal_controlChange+0x54>)
 8000ef6:	22b0      	movs	r2, #176	; 0xb0
 8000ef8:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = controlNumber;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <srv_midi_internal_controlChange+0x54>)
 8000efc:	1dfa      	adds	r2, r7, #7
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = controlValue;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <srv_midi_internal_controlChange+0x54>)
 8000f04:	1dba      	adds	r2, r7, #6
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 8000f0a:	23fa      	movs	r3, #250	; 0xfa
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4906      	ldr	r1, [pc, #24]	; (8000f28 <srv_midi_internal_controlChange+0x54>)
 8000f10:	1978      	adds	r0, r7, r5
 8000f12:	2203      	movs	r2, #3
 8000f14:	f003 ff66 	bl	8004de4 <HAL_UART_Transmit>

}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bcb0      	pop	{r4, r5, r7}
 8000f20:	bc08      	pop	{r3}
 8000f22:	b002      	add	sp, #8
 8000f24:	4718      	bx	r3
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000214 	.word	0x20000214

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_MspInit+0x64>)
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_MspInit+0x64>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_MspInit+0x64>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_MspInit+0x64>)
 8000f4c:	69da      	ldr	r2, [r3, #28]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_MspInit+0x64>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0549      	lsls	r1, r1, #21
 8000f54:	430a      	orrs	r2, r1
 8000f56:	61da      	str	r2, [r3, #28]
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HAL_MspInit+0x64>)
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	055b      	lsls	r3, r3, #21
 8000f60:	4013      	ands	r3, r2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f001 fa38 	bl	80023e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f001 fa4a 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f001 fa30 	bl	80023e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f001 fa42 	bl	800240a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	2414      	movs	r4, #20
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	2314      	movs	r3, #20
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f004 fe8b 	bl	8005cc2 <memset>
  if(hadc->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <HAL_ADC_MspInit+0x90>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d132      	bne.n	800101c <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	0089      	lsls	r1, r1, #2
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	0309      	lsls	r1, r1, #12
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_ADC_MspInit+0x94>)
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	031b      	lsls	r3, r3, #12
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    PC1     ------> ADC_IN11
    */
    GPIO_InitStruct.Pin = Photo_resistor1_Pin|Photo_resistor2_Pin;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	193b      	adds	r3, r7, r4
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_ADC_MspInit+0x98>)
 8001004:	0019      	movs	r1, r3
 8001006:	0010      	movs	r0, r2
 8001008:	f001 fc08 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	200c      	movs	r0, #12
 8001012:	f001 f9e5 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001016:	200c      	movs	r0, #12
 8001018:	f001 f9f7 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b00b      	add	sp, #44	; 0x2c
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	40012400 	.word	0x40012400
 8001028:	40021000 	.word	0x40021000
 800102c:	48000800 	.word	0x48000800

08001030 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	; 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2414      	movs	r4, #20
 800103a:	193b      	adds	r3, r7, r4
 800103c:	0018      	movs	r0, r3
 800103e:	2314      	movs	r3, #20
 8001040:	001a      	movs	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f004 fe3d 	bl	8005cc2 <memset>
  if(hi2c->Instance==I2C1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <HAL_I2C_MspInit+0xa0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d139      	bne.n	80010c6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	02c9      	lsls	r1, r1, #11
 800105c:	430a      	orrs	r2, r1
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	02db      	lsls	r3, r3, #11
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106e:	0021      	movs	r1, r4
 8001070:	187b      	adds	r3, r7, r1
 8001072:	22c0      	movs	r2, #192	; 0xc0
 8001074:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2212      	movs	r2, #18
 800107a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2203      	movs	r2, #3
 8001086:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2201      	movs	r2, #1
 800108c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	187b      	adds	r3, r7, r1
 8001090:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <HAL_I2C_MspInit+0xa8>)
 8001092:	0019      	movs	r1, r3
 8001094:	0010      	movs	r0, r2
 8001096:	f001 fbc1 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 800109c:	69da      	ldr	r2, [r3, #28]
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	0389      	lsls	r1, r1, #14
 80010a4:	430a      	orrs	r2, r1
 80010a6:	61da      	str	r2, [r3, #28]
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_I2C_MspInit+0xa4>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	039b      	lsls	r3, r3, #14
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2017      	movs	r0, #23
 80010bc:	f001 f990 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80010c0:	2017      	movs	r0, #23
 80010c2:	f001 f9a2 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b00b      	add	sp, #44	; 0x2c
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40005400 	.word	0x40005400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	48000400 	.word	0x48000400

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_TIM_Base_MspInit+0x44>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d113      	bne.n	8001116 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_TIM_Base_MspInit+0x48>)
 80010f0:	69da      	ldr	r2, [r3, #28]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_TIM_Base_MspInit+0x48>)
 80010f4:	2102      	movs	r1, #2
 80010f6:	430a      	orrs	r2, r1
 80010f8:	61da      	str	r2, [r3, #28]
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_TIM_Base_MspInit+0x48>)
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2010      	movs	r0, #16
 800110c:	f001 f968 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001110:	2010      	movs	r0, #16
 8001112:	f001 f97a 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b004      	add	sp, #16
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	40000400 	.word	0x40000400
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b08d      	sub	sp, #52	; 0x34
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	241c      	movs	r4, #28
 8001132:	193b      	adds	r3, r7, r4
 8001134:	0018      	movs	r0, r3
 8001136:	2314      	movs	r3, #20
 8001138:	001a      	movs	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	f004 fdc1 	bl	8005cc2 <memset>
  if(huart->Instance==USART1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a49      	ldr	r2, [pc, #292]	; (800126c <HAL_UART_MspInit+0x144>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d134      	bne.n	80011b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800114a:	4b49      	ldr	r3, [pc, #292]	; (8001270 <HAL_UART_MspInit+0x148>)
 800114c:	699a      	ldr	r2, [r3, #24]
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_UART_MspInit+0x148>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	01c9      	lsls	r1, r1, #7
 8001154:	430a      	orrs	r2, r1
 8001156:	619a      	str	r2, [r3, #24]
 8001158:	4b45      	ldr	r3, [pc, #276]	; (8001270 <HAL_UART_MspInit+0x148>)
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	01db      	lsls	r3, r3, #7
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b42      	ldr	r3, [pc, #264]	; (8001270 <HAL_UART_MspInit+0x148>)
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_UART_MspInit+0x148>)
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	0289      	lsls	r1, r1, #10
 8001170:	430a      	orrs	r2, r1
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	4b3e      	ldr	r3, [pc, #248]	; (8001270 <HAL_UART_MspInit+0x148>)
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	029b      	lsls	r3, r3, #10
 800117c:	4013      	ands	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001182:	193b      	adds	r3, r7, r4
 8001184:	22c0      	movs	r2, #192	; 0xc0
 8001186:	00d2      	lsls	r2, r2, #3
 8001188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	0021      	movs	r1, r4
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2202      	movs	r2, #2
 8001190:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2203      	movs	r2, #3
 800119c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2201      	movs	r2, #1
 80011a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	187a      	adds	r2, r7, r1
 80011a6:	2390      	movs	r3, #144	; 0x90
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f001 fb35 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	e056      	b.n	8001262 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <HAL_UART_MspInit+0x14c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d151      	bne.n	8001262 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	0289      	lsls	r1, r1, #10
 80011c8:	430a      	orrs	r2, r1
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011ce:	69da      	ldr	r2, [r3, #28]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0289      	lsls	r1, r1, #10
 80011e4:	430a      	orrs	r2, r1
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_UART_MspInit+0x148>)
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	029b      	lsls	r3, r3, #10
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80011f6:	241c      	movs	r4, #28
 80011f8:	193b      	adds	r3, r7, r4
 80011fa:	2204      	movs	r2, #4
 80011fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	2202      	movs	r2, #2
 8001202:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120a:	193b      	adds	r3, r7, r4
 800120c:	2203      	movs	r2, #3
 800120e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001210:	193b      	adds	r3, r7, r4
 8001212:	2201      	movs	r2, #1
 8001214:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001216:	193a      	adds	r2, r7, r4
 8001218:	2390      	movs	r3, #144	; 0x90
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f001 fafc 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001224:	0021      	movs	r1, r4
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2208      	movs	r2, #8
 800122a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2202      	movs	r2, #2
 8001230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2202      	movs	r2, #2
 8001236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2203      	movs	r2, #3
 800123c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2201      	movs	r2, #1
 8001242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001244:	187a      	adds	r2, r7, r1
 8001246:	2390      	movs	r3, #144	; 0x90
 8001248:	05db      	lsls	r3, r3, #23
 800124a:	0011      	movs	r1, r2
 800124c:	0018      	movs	r0, r3
 800124e:	f001 fae5 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	201c      	movs	r0, #28
 8001258:	f001 f8c2 	bl	80023e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f001 f8d4 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b00d      	add	sp, #52	; 0x34
 8001268:	bd90      	pop	{r4, r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	40013800 	.word	0x40013800
 8001270:	40021000 	.word	0x40021000
 8001274:	40004400 	.word	0x40004400

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f8fc 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80012aa:	f001 f955 	bl	8002558 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f001 fc54 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f001 fc51 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80012d8:	2010      	movs	r0, #16
 80012da:	f001 fc49 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012de:	2020      	movs	r0, #32
 80012e0:	f001 fc46 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	0018      	movs	r0, r3
 80012ea:	f001 fc41 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	0018      	movs	r0, r3
 80012f4:	f001 fc3c 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	0018      	movs	r0, r3
 80012fe:	f001 fc37 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	0018      	movs	r0, r3
 8001308:	f001 fc32 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	015b      	lsls	r3, r3, #5
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fc2d 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	0018      	movs	r0, r3
 800131c:	f001 fc28 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	0018      	movs	r0, r3
 8001326:	f001 fc23 	bl	8002b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <ADC1_IRQHandler+0x14>)
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fbfe 	bl	8001b38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	200001d4 	.word	0x200001d4

08001348 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <TIM3_IRQHandler+0x14>)
 800134e:	0018      	movs	r0, r3
 8001350:	f003 f972 	bl	8004638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20000084 	.word	0x20000084

08001360 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <I2C1_IRQHandler+0x2c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	23e0      	movs	r3, #224	; 0xe0
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4013      	ands	r3, r2
 8001370:	d004      	beq.n	800137c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <I2C1_IRQHandler+0x2c>)
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fcc7 	bl	8002d08 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800137a:	e003      	b.n	8001384 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <I2C1_IRQHandler+0x2c>)
 800137e:	0018      	movs	r0, r3
 8001380:	f001 fca8 	bl	8002cd4 <HAL_I2C_EV_IRQHandler>
}
 8001384:	46c0      	nop			; (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	20000038 	.word	0x20000038

08001390 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <USART2_IRQHandler+0x14>)
 8001396:	0018      	movs	r0, r3
 8001398:	f003 fdce 	bl	8004f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	20000150 	.word	0x20000150

080013a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopForever+0xe>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopForever+0x16>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013de:	f7ff ffe3 	bl	80013a8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013e2:	f004 fc41 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e6:	f7fe ff1b 	bl	8000220 <main>

080013ea <LoopForever>:

LoopForever:
    b LoopForever
 80013ea:	e7fe      	b.n	80013ea <LoopForever>
  ldr   r0, =_estack
 80013ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013f8:	08005db0 	.word	0x08005db0
  ldr r2, =_sbss
 80013fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001400:	20000240 	.word	0x20000240

08001404 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <DMA1_Channel1_IRQHandler>
	...

08001408 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_Init+0x24>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_Init+0x24>)
 8001412:	2110      	movs	r1, #16
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f809 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141e:	f7ff fd85 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	0018      	movs	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_InitTick+0x5c>)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_InitTick+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0019      	movs	r1, r3
 8001442:	23fa      	movs	r3, #250	; 0xfa
 8001444:	0098      	lsls	r0, r3, #2
 8001446:	f7fe fe5f 	bl	8000108 <__udivsi3>
 800144a:	0003      	movs	r3, r0
 800144c:	0019      	movs	r1, r3
 800144e:	0020      	movs	r0, r4
 8001450:	f7fe fe5a 	bl	8000108 <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 ffe7 	bl	800242a <HAL_SYSTICK_Config>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00f      	b.n	8001484 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d80b      	bhi.n	8001482 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	0018      	movs	r0, r3
 8001474:	f000 ffb4 	bl	80023e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_InitTick+0x64>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b003      	add	sp, #12
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	20000004 	.word	0x20000004
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	001a      	movs	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	18d2      	adds	r2, r2, r3
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000218 	.word	0x20000218

080014bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	20000218 	.word	0x20000218

080014d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e125      	b.n	800173a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10a      	bne.n	800150c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2234      	movs	r2, #52	; 0x34
 8001500:	2100      	movs	r1, #0
 8001502:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fd44 	bl	8000f94 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	2210      	movs	r2, #16
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_Init+0x48>
 8001516:	e103      	b.n	8001720 <HAL_ADC_Init+0x250>
 8001518:	230f      	movs	r3, #15
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <HAL_ADC_Init+0x54>
 8001522:	e0fd      	b.n	8001720 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2204      	movs	r2, #4
 800152c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800152e:	d000      	beq.n	8001532 <HAL_ADC_Init+0x62>
 8001530:	e0f6      	b.n	8001720 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001536:	4a83      	ldr	r2, [pc, #524]	; (8001744 <HAL_ADC_Init+0x274>)
 8001538:	4013      	ands	r3, r2
 800153a:	2202      	movs	r2, #2
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2203      	movs	r2, #3
 800154a:	4013      	ands	r3, r2
 800154c:	2b01      	cmp	r3, #1
 800154e:	d112      	bne.n	8001576 <HAL_ADC_Init+0xa6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	4013      	ands	r3, r2
 800155a:	2b01      	cmp	r3, #1
 800155c:	d009      	beq.n	8001572 <HAL_ADC_Init+0xa2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	401a      	ands	r2, r3
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	429a      	cmp	r2, r3
 8001570:	d101      	bne.n	8001576 <HAL_ADC_Init+0xa6>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_ADC_Init+0xa8>
 8001576:	2300      	movs	r3, #0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2218      	movs	r2, #24
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	0899      	lsrs	r1, r3, #2
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4964      	ldr	r1, [pc, #400]	; (8001748 <HAL_ADC_Init+0x278>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7e1b      	ldrb	r3, [r3, #24]
 80015be:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e5b      	ldrb	r3, [r3, #25]
 80015c4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80015ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d002      	beq.n	80015de <HAL_ADC_Init+0x10e>
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Init+0x110>
 80015de:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015e0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80015e6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_Init+0x124>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e000      	b.n	80015f6 <HAL_ADC_Init+0x126>
 80015f4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80015f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2124      	movs	r1, #36	; 0x24
 80015fc:	5c5b      	ldrb	r3, [r3, r1]
 80015fe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001600:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	4313      	orrs	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7edb      	ldrb	r3, [r3, #27]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d115      	bne.n	800163c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e9b      	ldrb	r3, [r3, #26]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	0252      	lsls	r2, r2, #9
 800161e:	4313      	orrs	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	e00b      	b.n	800163c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001628:	2220      	movs	r2, #32
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	2201      	movs	r2, #1
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	23c2      	movs	r3, #194	; 0xc2
 8001642:	33ff      	adds	r3, #255	; 0xff
 8001644:	429a      	cmp	r2, r3
 8001646:	d007      	beq.n	8001658 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001650:	4313      	orrs	r3, r2
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	4313      	orrs	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68d9      	ldr	r1, [r3, #12]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	055b      	lsls	r3, r3, #21
 8001670:	429a      	cmp	r2, r3
 8001672:	d01b      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001678:	2b01      	cmp	r3, #1
 800167a:	d017      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	2b02      	cmp	r3, #2
 8001682:	d013      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	2b03      	cmp	r3, #3
 800168a:	d00f      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	2b04      	cmp	r3, #4
 8001692:	d00b      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	2b05      	cmp	r3, #5
 800169a:	d007      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d003      	beq.n	80016ac <HAL_ADC_Init+0x1dc>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d112      	bne.n	80016d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2107      	movs	r1, #7
 80016b8:	438a      	bics	r2, r1
 80016ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6959      	ldr	r1, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	2207      	movs	r2, #7
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_ADC_Init+0x27c>)
 80016da:	4013      	ands	r3, r2
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d10b      	bne.n	80016fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ec:	2203      	movs	r2, #3
 80016ee:	4393      	bics	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80016f8:	e01c      	b.n	8001734 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	2212      	movs	r2, #18
 8001700:	4393      	bics	r3, r2
 8001702:	2210      	movs	r2, #16
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	2201      	movs	r2, #1
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001716:	230f      	movs	r3, #15
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800171e:	e009      	b.n	8001734 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	2210      	movs	r2, #16
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	fffffefd 	.word	0xfffffefd
 8001748:	fffe0219 	.word	0xfffe0219
 800174c:	833fffe7 	.word	0x833fffe7

08001750 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001758:	230f      	movs	r3, #15
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d138      	bne.n	80017de <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2234      	movs	r2, #52	; 0x34
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_ADC_Start+0x2a>
 8001776:	2302      	movs	r3, #2
 8001778:	e038      	b.n	80017ec <HAL_ADC_Start+0x9c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2234      	movs	r2, #52	; 0x34
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7e5b      	ldrb	r3, [r3, #25]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d007      	beq.n	800179a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800178a:	230f      	movs	r3, #15
 800178c:	18fc      	adds	r4, r7, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f000 fb8f 	bl	8001eb4 <ADC_Enable>
 8001796:	0003      	movs	r3, r0
 8001798:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800179a:	230f      	movs	r3, #15
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d120      	bne.n	80017e6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_ADC_Start+0xa4>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0052      	lsls	r2, r2, #1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2234      	movs	r2, #52	; 0x34
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	221c      	movs	r2, #28
 80017ca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2104      	movs	r1, #4
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	e003      	b.n	80017e6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017de:	230f      	movs	r3, #15
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b005      	add	sp, #20
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	fffff0fe 	.word	0xfffff0fe

080017f8 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2234      	movs	r2, #52	; 0x34
 800180c:	5c9b      	ldrb	r3, [r3, r2]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Stop+0x1e>
 8001812:	2302      	movs	r3, #2
 8001814:	e029      	b.n	800186a <HAL_ADC_Stop+0x72>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2234      	movs	r2, #52	; 0x34
 800181a:	2101      	movs	r1, #1
 800181c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800181e:	250f      	movs	r5, #15
 8001820:	197c      	adds	r4, r7, r5
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f000 fc3a 	bl	800209e <ADC_ConversionStop>
 800182a:	0003      	movs	r3, r0
 800182c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d112      	bne.n	800185c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001836:	197c      	adds	r4, r7, r5
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fbbe 	bl	8001fbc <ADC_Disable>
 8001840:	0003      	movs	r3, r0
 8001842:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001844:	197b      	adds	r3, r7, r5
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_ADC_Stop+0x7c>)
 8001852:	4013      	ands	r3, r2
 8001854:	2201      	movs	r2, #1
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2234      	movs	r2, #52	; 0x34
 8001860:	2100      	movs	r1, #0
 8001862:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001864:	230f      	movs	r3, #15
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	781b      	ldrb	r3, [r3, #0]
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	fffffefe 	.word	0xfffffefe

08001878 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	2b08      	cmp	r3, #8
 8001888:	d102      	bne.n	8001890 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800188a:	2308      	movs	r3, #8
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e014      	b.n	80018ba <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10b      	bne.n	80018b6 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	2220      	movs	r2, #32
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2234      	movs	r2, #52	; 0x34
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e071      	b.n	800199a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018b6:	230c      	movs	r3, #12
 80018b8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80018ba:	f7ff fdff 	bl	80014bc <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018c2:	e01f      	b.n	8001904 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	d01c      	beq.n	8001904 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_ADC_PollForConversion+0x68>
 80018d0:	f7ff fdf4 	bl	80014bc <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d211      	bcs.n	8001904 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	d10b      	bne.n	8001904 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f0:	2204      	movs	r2, #4
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2234      	movs	r2, #52	; 0x34
 80018fc:	2100      	movs	r1, #0
 80018fe:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e04a      	b.n	800199a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	d0d9      	beq.n	80018c4 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	23c0      	movs	r3, #192	; 0xc0
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4013      	ands	r3, r2
 800192a:	d12d      	bne.n	8001988 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001930:	2b00      	cmp	r3, #0
 8001932:	d129      	bne.n	8001988 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2208      	movs	r2, #8
 800193c:	4013      	ands	r3, r2
 800193e:	2b08      	cmp	r3, #8
 8001940:	d122      	bne.n	8001988 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d110      	bne.n	8001970 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	210c      	movs	r1, #12
 800195a:	438a      	bics	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_ADC_PollForConversion+0x12c>)
 8001964:	4013      	ands	r3, r2
 8001966:	2201      	movs	r2, #1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	639a      	str	r2, [r3, #56]	; 0x38
 800196e:	e00b      	b.n	8001988 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001974:	2220      	movs	r2, #32
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2201      	movs	r2, #1
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e1b      	ldrb	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	220c      	movs	r2, #12
 8001996:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fffffefe 	.word	0xfffffefe

080019a8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	230f      	movs	r3, #15
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2204      	movs	r2, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d156      	bne.n	8001a72 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2234      	movs	r2, #52	; 0x34
 80019c8:	5c9b      	ldrb	r3, [r3, r2]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start_IT+0x2a>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e056      	b.n	8001a80 <HAL_ADC_Start_IT+0xd8>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2234      	movs	r2, #52	; 0x34
 80019d6:	2101      	movs	r1, #1
 80019d8:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7e5b      	ldrb	r3, [r3, #25]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d007      	beq.n	80019f2 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80019e2:	230f      	movs	r3, #15
 80019e4:	18fc      	adds	r4, r7, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f000 fa63 	bl	8001eb4 <ADC_Enable>
 80019ee:	0003      	movs	r3, r0
 80019f0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d13e      	bne.n	8001a7a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <HAL_ADC_Start_IT+0xe0>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0052      	lsls	r2, r2, #1
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2234      	movs	r2, #52	; 0x34
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	221c      	movs	r2, #28
 8001a22:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d110      	bne.n	8001a4e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2104      	movs	r1, #4
 8001a38:	438a      	bics	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2118      	movs	r1, #24
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
          break;
 8001a4c:	e008      	b.n	8001a60 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	211c      	movs	r1, #28
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
          break;
 8001a5e:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	e003      	b.n	8001a7a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2202      	movs	r2, #2
 8001a78:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	18fb      	adds	r3, r7, r3
 8001a7e:	781b      	ldrb	r3, [r3, #0]
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b005      	add	sp, #20
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	fffff0fe 	.word	0xfffff0fe

08001a8c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	230f      	movs	r3, #15
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2234      	movs	r2, #52	; 0x34
 8001aa0:	5c9b      	ldrb	r3, [r3, r2]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Stop_IT+0x1e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e033      	b.n	8001b12 <HAL_ADC_Stop_IT+0x86>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2234      	movs	r2, #52	; 0x34
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001ab2:	250f      	movs	r5, #15
 8001ab4:	197c      	adds	r4, r7, r5
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 faf0 	bl	800209e <ADC_ConversionStop>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d11b      	bne.n	8001b04 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	211c      	movs	r1, #28
 8001ad8:	438a      	bics	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001adc:	0005      	movs	r5, r0
 8001ade:	183c      	adds	r4, r7, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 fa6a 	bl	8001fbc <ADC_Disable>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001aec:	197b      	adds	r3, r7, r5
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d107      	bne.n	8001b04 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_ADC_Stop_IT+0x90>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	2201      	movs	r2, #1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2234      	movs	r2, #52	; 0x34
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001b0c:	230f      	movs	r3, #15
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	781b      	ldrb	r3, [r3, #0]
}
 8001b12:	0018      	movs	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	fffffefe 	.word	0xfffffefe

08001b20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b002      	add	sp, #8
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2204      	movs	r2, #4
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d106      	bne.n	8001b5c <HAL_ADC_IRQHandler+0x24>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d00d      	beq.n	8001b78 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2208      	movs	r2, #8
 8001b64:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d14f      	bne.n	8001c0a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2208      	movs	r2, #8
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d148      	bne.n	8001c0a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d12d      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d129      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2208      	movs	r2, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d122      	bne.n	8001bfa <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d110      	bne.n	8001be2 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	210c      	movs	r1, #12
 8001bcc:	438a      	bics	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_ADC_IRQHandler+0x16c>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
 8001be0:	e00b      	b.n	8001bfa <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	2220      	movs	r2, #32
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff f845 	bl	8000c8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d115      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x10c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b80      	cmp	r3, #128	; 0x80
 8001c24:	d10e      	bne.n	8001c44 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	0252      	lsls	r2, r2, #9
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f000 f836 	bl	8001ca8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b10      	cmp	r3, #16
 8001c50:	d123      	bne.n	8001c9a <HAL_ADC_IRQHandler+0x162>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b10      	cmp	r3, #16
 8001c5e:	d11c      	bne.n	8001c9a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d006      	beq.n	8001c76 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d10d      	bne.n	8001c92 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f813 	bl	8001cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2210      	movs	r2, #16
 8001c98:	601a      	str	r2, [r3, #0]
  }

}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	fffffefe 	.word	0xfffffefe

08001ca8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	055b      	lsls	r3, r3, #21
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d011      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x46>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d00d      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x46>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d009      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x46>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d005      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x46>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d001      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x46>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2234      	movs	r2, #52	; 0x34
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x54>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e0bb      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x1cc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2234      	movs	r2, #52	; 0x34
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d000      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x6a>
 8001d30:	e09f      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4a59      	ldr	r2, [pc, #356]	; (8001e9c <HAL_ADC_ConfigChannel+0x1d4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d100      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x76>
 8001d3c:	e077      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d037      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d033      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d02f      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d02b      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d027      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d023      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	2b06      	cmp	r3, #6
 8001d8e:	d01f      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d01b      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	2107      	movs	r1, #7
 8001da4:	400b      	ands	r3, r1
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d012      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2107      	movs	r1, #7
 8001db6:	438a      	bics	r2, r1
 8001db8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6959      	ldr	r1, [r3, #20]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d003      	beq.n	8001de0 <HAL_ADC_ConfigChannel+0x118>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b11      	cmp	r3, #17
 8001dde:	d152      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d102      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x12a>
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	041b      	lsls	r3, r3, #16
 8001df0:	e001      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x12e>
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	03db      	lsls	r3, r3, #15
 8001df6:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d140      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_ADC_ConfigChannel+0x1dc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4927      	ldr	r1, [pc, #156]	; (8001ea8 <HAL_ADC_ConfigChannel+0x1e0>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7fe f97c 	bl	8000108 <__udivsi3>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	189b      	adds	r3, r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e1e:	e002      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f9      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x158>
 8001e2c:	e02b      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4099      	lsls	r1, r3
 8001e3c:	000b      	movs	r3, r1
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	400a      	ands	r2, r1
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b10      	cmp	r3, #16
 8001e4e:	d003      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x190>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d116      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x1a0>
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_ADC_ConfigChannel+0x1e4>)
 8001e66:	e000      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1a2>
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_ADC_ConfigChannel+0x1d8>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e009      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	2220      	movs	r2, #32
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001e7e:	230f      	movs	r3, #15
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2234      	movs	r2, #52	; 0x34
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	781b      	ldrb	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b004      	add	sp, #16
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	00001001 	.word	0x00001001
 8001ea0:	40012708 	.word	0x40012708
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	000f4240 	.word	0x000f4240
 8001eac:	ff7fffff 	.word	0xff7fffff
 8001eb0:	ffbfffff 	.word	0xffbfffff

08001eb4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d112      	bne.n	8001ef8 <ADC_Enable+0x44>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d009      	beq.n	8001ef4 <ADC_Enable+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	401a      	ands	r2, r3
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d101      	bne.n	8001ef8 <ADC_Enable+0x44>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <ADC_Enable+0x46>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d152      	bne.n	8001fa4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <ADC_Enable+0xfc>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	2210      	movs	r2, #16
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e03f      	b.n	8001fa6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f36:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <ADC_Enable+0x100>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	491f      	ldr	r1, [pc, #124]	; (8001fb8 <ADC_Enable+0x104>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7fe f8e3 	bl	8000108 <__udivsi3>
 8001f42:	0003      	movs	r3, r0
 8001f44:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f46:	e002      	b.n	8001f4e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f54:	f7ff fab2 	bl	80014bc <HAL_GetTick>
 8001f58:	0003      	movs	r3, r0
 8001f5a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f5c:	e01b      	b.n	8001f96 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f5e:	f7ff faad 	bl	80014bc <HAL_GetTick>
 8001f62:	0002      	movs	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d914      	bls.n	8001f96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d00d      	beq.n	8001f96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	2210      	movs	r2, #16
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e007      	b.n	8001fa6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d1dc      	bne.n	8001f5e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	80000017 	.word	0x80000017
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	000f4240 	.word	0x000f4240

08001fbc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d112      	bne.n	8001ffc <ADC_Disable+0x40>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d009      	beq.n	8001ff8 <ADC_Disable+0x3c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	401a      	ands	r2, r3
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d101      	bne.n	8001ffc <ADC_Disable+0x40>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <ADC_Disable+0x42>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d048      	beq.n	8002094 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2205      	movs	r2, #5
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d110      	bne.n	8002032 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2102      	movs	r1, #2
 800201c:	430a      	orrs	r2, r1
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2203      	movs	r2, #3
 8002026:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002028:	f7ff fa48 	bl	80014bc <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002030:	e029      	b.n	8002086 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	2210      	movs	r2, #16
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2201      	movs	r2, #1
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e023      	b.n	8002096 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800204e:	f7ff fa35 	bl	80014bc <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d914      	bls.n	8002086 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2201      	movs	r2, #1
 8002064:	4013      	ands	r3, r2
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10d      	bne.n	8002086 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	2210      	movs	r2, #16
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	2201      	movs	r2, #1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d0dc      	beq.n	800204e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}

0800209e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2204      	movs	r2, #4
 80020b2:	4013      	ands	r3, r2
 80020b4:	d03a      	beq.n	800212c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2204      	movs	r2, #4
 80020be:	4013      	ands	r3, r2
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d10d      	bne.n	80020e0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80020ce:	d107      	bne.n	80020e0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2110      	movs	r1, #16
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020e0:	f7ff f9ec 	bl	80014bc <HAL_GetTick>
 80020e4:	0003      	movs	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80020e8:	e01a      	b.n	8002120 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80020ea:	f7ff f9e7 	bl	80014bc <HAL_GetTick>
 80020ee:	0002      	movs	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d913      	bls.n	8002120 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2204      	movs	r2, #4
 8002100:	4013      	ands	r3, r2
 8002102:	d00d      	beq.n	8002120 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002108:	2210      	movs	r2, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2201      	movs	r2, #1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e006      	b.n	800212e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d1de      	bne.n	80020ea <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	2317      	movs	r3, #23
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2234      	movs	r2, #52	; 0x34
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADCEx_Calibration_Start+0x26>
 800215a:	2302      	movs	r3, #2
 800215c:	e08d      	b.n	800227a <HAL_ADCEx_Calibration_Start+0x142>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2234      	movs	r2, #52	; 0x34
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	2b01      	cmp	r3, #1
 8002172:	d112      	bne.n	800219a <HAL_ADCEx_Calibration_Start+0x62>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	2b01      	cmp	r3, #1
 8002180:	d009      	beq.n	8002196 <HAL_ADCEx_Calibration_Start+0x5e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	401a      	ands	r2, r3
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	429a      	cmp	r2, r3
 8002194:	d101      	bne.n	800219a <HAL_ADCEx_Calibration_Start+0x62>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_ADCEx_Calibration_Start+0x64>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d15b      	bne.n	8002258 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	4a37      	ldr	r2, [pc, #220]	; (8002284 <HAL_ADCEx_Calibration_Start+0x14c>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	2202      	movs	r2, #2
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2203      	movs	r2, #3
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2103      	movs	r1, #3
 80021c8:	438a      	bics	r2, r1
 80021ca:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	0609      	lsls	r1, r1, #24
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80021de:	f7ff f96d 	bl	80014bc <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80021e6:	e01d      	b.n	8002224 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021e8:	f7ff f968 	bl	80014bc <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d916      	bls.n	8002224 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	0fdb      	lsrs	r3, r3, #31
 80021fe:	07da      	lsls	r2, r3, #31
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	061b      	lsls	r3, r3, #24
 8002204:	429a      	cmp	r2, r3
 8002206:	d10d      	bne.n	8002224 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	2212      	movs	r2, #18
 800220e:	4393      	bics	r3, r2
 8002210:	2210      	movs	r2, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2234      	movs	r2, #52	; 0x34
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e02a      	b.n	800227a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	0fdb      	lsrs	r3, r3, #31
 800222c:	07da      	lsls	r2, r3, #31
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	429a      	cmp	r2, r3
 8002234:	d0d8      	beq.n	80021e8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68d9      	ldr	r1, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	430a      	orrs	r2, r1
 8002244:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	2203      	movs	r2, #3
 800224c:	4393      	bics	r3, r2
 800224e:	2201      	movs	r2, #1
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	639a      	str	r2, [r3, #56]	; 0x38
 8002256:	e009      	b.n	800226c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	2220      	movs	r2, #32
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002264:	2317      	movs	r3, #23
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2234      	movs	r2, #52	; 0x34
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002274:	2317      	movs	r3, #23
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b006      	add	sp, #24
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	fffffefd 	.word	0xfffffefd

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	0002      	movs	r2, r0
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b7f      	cmp	r3, #127	; 0x7f
 800229a:	d809      	bhi.n	80022b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	001a      	movs	r2, r3
 80022a2:	231f      	movs	r3, #31
 80022a4:	401a      	ands	r2, r3
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_EnableIRQ+0x30>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	4091      	lsls	r1, r2
 80022ac:	000a      	movs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
  }
}
 80022b0:	46c0      	nop			; (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	0002      	movs	r2, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b7f      	cmp	r3, #127	; 0x7f
 80022d0:	d828      	bhi.n	8002324 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <__NVIC_SetPriority+0xd4>)
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	33c0      	adds	r3, #192	; 0xc0
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	589b      	ldr	r3, [r3, r2]
 80022e2:	1dfa      	adds	r2, r7, #7
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	0011      	movs	r1, r2
 80022e8:	2203      	movs	r2, #3
 80022ea:	400a      	ands	r2, r1
 80022ec:	00d2      	lsls	r2, r2, #3
 80022ee:	21ff      	movs	r1, #255	; 0xff
 80022f0:	4091      	lsls	r1, r2
 80022f2:	000a      	movs	r2, r1
 80022f4:	43d2      	mvns	r2, r2
 80022f6:	401a      	ands	r2, r3
 80022f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	019b      	lsls	r3, r3, #6
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	401a      	ands	r2, r3
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0018      	movs	r0, r3
 8002308:	2303      	movs	r3, #3
 800230a:	4003      	ands	r3, r0
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002310:	481f      	ldr	r0, [pc, #124]	; (8002390 <__NVIC_SetPriority+0xd4>)
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	b25b      	sxtb	r3, r3
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	430a      	orrs	r2, r1
 800231c:	33c0      	adds	r3, #192	; 0xc0
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002322:	e031      	b.n	8002388 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <__NVIC_SetPriority+0xd8>)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	0019      	movs	r1, r3
 800232c:	230f      	movs	r3, #15
 800232e:	400b      	ands	r3, r1
 8002330:	3b08      	subs	r3, #8
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3306      	adds	r3, #6
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	18d3      	adds	r3, r2, r3
 800233a:	3304      	adds	r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1dfa      	adds	r2, r7, #7
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	0011      	movs	r1, r2
 8002344:	2203      	movs	r2, #3
 8002346:	400a      	ands	r2, r1
 8002348:	00d2      	lsls	r2, r2, #3
 800234a:	21ff      	movs	r1, #255	; 0xff
 800234c:	4091      	lsls	r1, r2
 800234e:	000a      	movs	r2, r1
 8002350:	43d2      	mvns	r2, r2
 8002352:	401a      	ands	r2, r3
 8002354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	019b      	lsls	r3, r3, #6
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	401a      	ands	r2, r3
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	2303      	movs	r3, #3
 8002366:	4003      	ands	r3, r0
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800236c:	4809      	ldr	r0, [pc, #36]	; (8002394 <__NVIC_SetPriority+0xd8>)
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	001c      	movs	r4, r3
 8002374:	230f      	movs	r3, #15
 8002376:	4023      	ands	r3, r4
 8002378:	3b08      	subs	r3, #8
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	430a      	orrs	r2, r1
 800237e:	3306      	adds	r3, #6
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	18c3      	adds	r3, r0, r3
 8002384:	3304      	adds	r3, #4
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	46c0      	nop			; (mov r8, r8)
 800238a:	46bd      	mov	sp, r7
 800238c:	b003      	add	sp, #12
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	045b      	lsls	r3, r3, #17
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d301      	bcc.n	80023b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ac:	2301      	movs	r3, #1
 80023ae:	e010      	b.n	80023d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <SysTick_Config+0x44>)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	3a01      	subs	r2, #1
 80023b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b8:	2301      	movs	r3, #1
 80023ba:	425b      	negs	r3, r3
 80023bc:	2103      	movs	r1, #3
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff ff7c 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x44>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x44>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b002      	add	sp, #8
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	210f      	movs	r1, #15
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	1c02      	adds	r2, r0, #0
 80023f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b004      	add	sp, #16
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	0002      	movs	r2, r0
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b25b      	sxtb	r3, r3
 800241c:	0018      	movs	r0, r3
 800241e:	f7ff ff33 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b002      	add	sp, #8
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff ffaf 	bl	8002398 <SysTick_Config>
 800243a:	0003      	movs	r3, r0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2221      	movs	r2, #33	; 0x21
 8002450:	5c9b      	ldrb	r3, [r3, r2]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	2100      	movs	r1, #0
 8002464:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e020      	b.n	80024ac <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	210e      	movs	r1, #14
 8002476:	438a      	bics	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2101      	movs	r1, #1
 8002486:	438a      	bics	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	2100      	movs	r1, #0
 80024a8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024bc:	210f      	movs	r1, #15
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2221      	movs	r2, #33	; 0x21
 80024c8:	5c9b      	ldrb	r3, [r3, r2]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d006      	beq.n	80024de <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2204      	movs	r2, #4
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e028      	b.n	8002530 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	210e      	movs	r1, #14
 80024ea:	438a      	bics	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2101      	movs	r1, #1
 80024fa:	438a      	bics	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2101      	movs	r1, #1
 8002508:	4091      	lsls	r1, r2
 800250a:	000a      	movs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2221      	movs	r2, #33	; 0x21
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	0010      	movs	r0, r2
 800252e:	4798      	blx	r3
    } 
  }
  return status;
 8002530:	230f      	movs	r3, #15
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	781b      	ldrb	r3, [r3, #0]
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2221      	movs	r2, #33	; 0x21
 800254a:	5c9b      	ldrb	r3, [r3, r2]
 800254c:	b2db      	uxtb	r3, r3
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002558:	b5b0      	push	{r4, r5, r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002562:	4b6e      	ldr	r3, [pc, #440]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2210      	movs	r2, #16
 8002568:	4013      	ands	r3, r2
 800256a:	2b10      	cmp	r3, #16
 800256c:	d005      	beq.n	800257a <HAL_FLASH_IRQHandler+0x22>
 800256e:	4b6b      	ldr	r3, [pc, #428]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2204      	movs	r2, #4
 8002574:	4013      	ands	r3, r2
 8002576:	2b04      	cmp	r3, #4
 8002578:	d10f      	bne.n	800259a <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800257a:	4b69      	ldr	r3, [pc, #420]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002580:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002582:	2201      	movs	r2, #1
 8002584:	4252      	negs	r2, r2
 8002586:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002588:	f000 f8fa 	bl	8002780 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f8d2 	bl	8002738 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002594:	4b62      	ldr	r3, [pc, #392]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800259a:	4b60      	ldr	r3, [pc, #384]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d000      	beq.n	80025a8 <HAL_FLASH_IRQHandler+0x50>
 80025a6:	e0a1      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025a8:	4b5c      	ldr	r3, [pc, #368]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 80025aa:	2220      	movs	r2, #32
 80025ac:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80025ae:	4b5c      	ldr	r3, [pc, #368]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d100      	bne.n	80025ba <HAL_FLASH_IRQHandler+0x62>
 80025b8:	e098      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80025ba:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d132      	bne.n	800262a <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025cc:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01b      	beq.n	800260e <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 80025d6:	4b52      	ldr	r3, [pc, #328]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 f8a2 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80025e4:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	4694      	mov	ip, r2
 80025ee:	4463      	add	r3, ip
 80025f0:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80025f2:	4b4b      	ldr	r3, [pc, #300]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80025f8:	4b48      	ldr	r3, [pc, #288]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 80025fe:	2102      	movs	r1, #2
 8002600:	438a      	bics	r2, r1
 8002602:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f8ea 	bl	80027e0 <FLASH_PageErase>
 800260c:	e06e      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 800260e:	2301      	movs	r3, #1
 8002610:	425b      	negs	r3, r3
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b42      	ldr	r3, [pc, #264]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f880 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>
 8002628:	e060      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d10c      	bne.n	800264e <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002634:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 800263a:	2104      	movs	r1, #4
 800263c:	438a      	bics	r2, r1
 800263e:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8002640:	2000      	movs	r0, #0
 8002642:	f000 f871 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002646:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e04e      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800264e:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	1e5a      	subs	r2, r3, #1
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002656:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d021      	beq.n	80026a4 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	1c9a      	adds	r2, r3, #2
 8002666:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002668:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002670:	4b2b      	ldr	r3, [pc, #172]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	0419      	lsls	r1, r3, #16
 8002678:	0c14      	lsrs	r4, r2, #16
 800267a:	430c      	orrs	r4, r1
 800267c:	0c1d      	lsrs	r5, r3, #16
 800267e:	4b28      	ldr	r3, [pc, #160]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002680:	611c      	str	r4, [r3, #16]
 8002682:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 800268a:	2101      	movs	r1, #1
 800268c:	438a      	bics	r2, r1
 800268e:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002690:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	b292      	uxth	r2, r2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f853 	bl	8002748 <FLASH_Program_HalfWord>
 80026a2:	e023      	b.n	80026ec <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80026a4:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d105      	bne.n	80026ba <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 f838 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>
 80026b8:	e011      	b.n	80026de <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d106      	bne.n	80026d2 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	3b02      	subs	r3, #2
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 f82c 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>
 80026d0:	e005      	b.n	80026de <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	3b06      	subs	r3, #6
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 f825 	bl	8002728 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	4252      	negs	r2, r2
 80026e4:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 80026fc:	2107      	movs	r1, #7
 80026fe:	438a      	bics	r2, r1
 8002700:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_FLASH_IRQHandler+0x1c4>)
 8002708:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_FLASH_IRQHandler+0x1cc>)
 800270a:	400a      	ands	r2, r1
 800270c:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_FLASH_IRQHandler+0x1c8>)
 8002710:	2200      	movs	r2, #0
 8002712:	761a      	strb	r2, [r3, #24]
  }
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	40022000 	.word	0x40022000
 8002720:	20000220 	.word	0x20000220
 8002724:	ffffebff 	.word	0xffffebff

08002728 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	000a      	movs	r2, r1
 8002752:	1cbb      	adds	r3, r7, #2
 8002754:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <FLASH_Program_HalfWord+0x30>)
 8002758:	2200      	movs	r2, #0
 800275a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <FLASH_Program_HalfWord+0x34>)
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <FLASH_Program_HalfWord+0x34>)
 8002762:	2101      	movs	r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	1cba      	adds	r2, r7, #2
 800276c:	8812      	ldrh	r2, [r2, #0]
 800276e:	801a      	strh	r2, [r3, #0]
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000220 	.word	0x20000220
 800277c:	40022000 	.word	0x40022000

08002780 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <FLASH_SetErrorCode+0x58>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2210      	movs	r2, #16
 8002790:	4013      	ands	r3, r2
 8002792:	2b10      	cmp	r3, #16
 8002794:	d109      	bne.n	80027aa <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <FLASH_SetErrorCode+0x5c>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	2202      	movs	r2, #2
 800279c:	431a      	orrs	r2, r3
 800279e:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <FLASH_SetErrorCode+0x5c>)
 80027a0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2210      	movs	r2, #16
 80027a6:	4313      	orrs	r3, r2
 80027a8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <FLASH_SetErrorCode+0x58>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d109      	bne.n	80027ca <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <FLASH_SetErrorCode+0x5c>)
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2201      	movs	r2, #1
 80027bc:	431a      	orrs	r2, r3
 80027be:	4b07      	ldr	r3, [pc, #28]	; (80027dc <FLASH_SetErrorCode+0x5c>)
 80027c0:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4313      	orrs	r3, r2
 80027c8:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027ca:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <FLASH_SetErrorCode+0x58>)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
}  
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40022000 	.word	0x40022000
 80027dc:	20000220 	.word	0x20000220

080027e0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <FLASH_PageErase+0x34>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <FLASH_PageErase+0x38>)
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <FLASH_PageErase+0x38>)
 80027f4:	2102      	movs	r1, #2
 80027f6:	430a      	orrs	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <FLASH_PageErase+0x38>)
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <FLASH_PageErase+0x38>)
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <FLASH_PageErase+0x38>)
 8002806:	2140      	movs	r1, #64	; 0x40
 8002808:	430a      	orrs	r2, r1
 800280a:	611a      	str	r2, [r3, #16]
}
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000220 	.word	0x20000220
 8002818:	40022000 	.word	0x40022000

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800282a:	e14f      	b.n	8002acc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2101      	movs	r1, #1
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4091      	lsls	r1, r2
 8002836:	000a      	movs	r2, r1
 8002838:	4013      	ands	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d100      	bne.n	8002844 <HAL_GPIO_Init+0x28>
 8002842:	e140      	b.n	8002ac6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2203      	movs	r2, #3
 800284a:	4013      	ands	r3, r2
 800284c:	2b01      	cmp	r3, #1
 800284e:	d005      	beq.n	800285c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002858:	2b02      	cmp	r3, #2
 800285a:	d130      	bne.n	80028be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	409a      	lsls	r2, r3
 800286a:	0013      	movs	r3, r2
 800286c:	43da      	mvns	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002892:	2201      	movs	r2, #1
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
 8002898:	0013      	movs	r3, r2
 800289a:	43da      	mvns	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	2201      	movs	r2, #1
 80028aa:	401a      	ands	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	409a      	lsls	r2, r3
 80028b0:	0013      	movs	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2203      	movs	r2, #3
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d017      	beq.n	80028fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	43da      	mvns	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2203      	movs	r2, #3
 8002900:	4013      	ands	r3, r2
 8002902:	2b02      	cmp	r3, #2
 8002904:	d123      	bne.n	800294e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	08da      	lsrs	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3208      	adds	r2, #8
 800290e:	0092      	lsls	r2, r2, #2
 8002910:	58d3      	ldr	r3, [r2, r3]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2207      	movs	r2, #7
 8002918:	4013      	ands	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	220f      	movs	r2, #15
 800291e:	409a      	lsls	r2, r3
 8002920:	0013      	movs	r3, r2
 8002922:	43da      	mvns	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2107      	movs	r1, #7
 8002932:	400b      	ands	r3, r1
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	409a      	lsls	r2, r3
 8002938:	0013      	movs	r3, r2
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	6939      	ldr	r1, [r7, #16]
 800294c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	2203      	movs	r2, #3
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	43da      	mvns	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2203      	movs	r2, #3
 800296c:	401a      	ands	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	409a      	lsls	r2, r3
 8002974:	0013      	movs	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	23c0      	movs	r3, #192	; 0xc0
 8002988:	029b      	lsls	r3, r3, #10
 800298a:	4013      	ands	r3, r2
 800298c:	d100      	bne.n	8002990 <HAL_GPIO_Init+0x174>
 800298e:	e09a      	b.n	8002ac6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002990:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <HAL_GPIO_Init+0x2c8>)
 8002992:	699a      	ldr	r2, [r3, #24]
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_GPIO_Init+0x2c8>)
 8002996:	2101      	movs	r1, #1
 8002998:	430a      	orrs	r2, r1
 800299a:	619a      	str	r2, [r3, #24]
 800299c:	4b51      	ldr	r3, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x2c8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4013      	ands	r3, r2
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x2cc>)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	589b      	ldr	r3, [r3, r2]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2203      	movs	r2, #3
 80029ba:	4013      	ands	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	409a      	lsls	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	43da      	mvns	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	2390      	movs	r3, #144	; 0x90
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x1e2>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a44      	ldr	r2, [pc, #272]	; (8002aec <HAL_GPIO_Init+0x2d0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00d      	beq.n	80029fa <HAL_GPIO_Init+0x1de>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a43      	ldr	r2, [pc, #268]	; (8002af0 <HAL_GPIO_Init+0x2d4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <HAL_GPIO_Init+0x1da>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_GPIO_Init+0x2d8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d101      	bne.n	80029f2 <HAL_GPIO_Init+0x1d6>
 80029ee:	2303      	movs	r3, #3
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029f2:	2305      	movs	r3, #5
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x1e4>
 80029fe:	2300      	movs	r3, #0
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	2103      	movs	r1, #3
 8002a04:	400a      	ands	r2, r1
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x2cc>)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1e:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	43da      	mvns	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	025b      	lsls	r3, r3, #9
 8002a36:	4013      	ands	r3, r2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	4013      	ands	r3, r2
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a72:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	035b      	lsls	r3, r3, #13
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43da      	mvns	r2, r3
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	039b      	lsls	r3, r3, #14
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_GPIO_Init+0x2dc>)
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	40da      	lsrs	r2, r3
 8002ad4:	1e13      	subs	r3, r2, #0
 8002ad6:	d000      	beq.n	8002ada <HAL_GPIO_Init+0x2be>
 8002ad8:	e6a8      	b.n	800282c <HAL_GPIO_Init+0x10>
  } 
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b006      	add	sp, #24
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	48000400 	.word	0x48000400
 8002af0:	48000800 	.word	0x48000800
 8002af4:	48000c00 	.word	0x48000c00
 8002af8:	40010400 	.word	0x40010400

08002afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	000a      	movs	r2, r1
 8002b06:	1cbb      	adds	r3, r7, #2
 8002b08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	1cba      	adds	r2, r7, #2
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	4013      	ands	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e003      	b.n	8002b28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b20:	230f      	movs	r3, #15
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b28:	230f      	movs	r3, #15
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
  }
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b004      	add	sp, #16
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	0008      	movs	r0, r1
 8002b40:	0011      	movs	r1, r2
 8002b42:	1cbb      	adds	r3, r7, #2
 8002b44:	1c02      	adds	r2, r0, #0
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	1c7b      	adds	r3, r7, #1
 8002b4a:	1c0a      	adds	r2, r1, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b4e:	1c7b      	adds	r3, r7, #1
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b56:	1cbb      	adds	r3, r7, #2
 8002b58:	881a      	ldrh	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b5e:	e003      	b.n	8002b68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b60:	1cbb      	adds	r3, r7, #2
 8002b62:	881a      	ldrh	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	0002      	movs	r2, r0
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	1dba      	adds	r2, r7, #6
 8002b82:	8812      	ldrh	r2, [r2, #0]
 8002b84:	4013      	ands	r3, r2
 8002b86:	d008      	beq.n	8002b9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b8a:	1dba      	adds	r2, r7, #6
 8002b8c:	8812      	ldrh	r2, [r2, #0]
 8002b8e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7fd fdf1 	bl	800077c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b002      	add	sp, #8
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e082      	b.n	8002cc0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	; 0x41
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fe fa2d 	bl	8001030 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2241      	movs	r2, #65	; 0x41
 8002bda:	2124      	movs	r1, #36	; 0x24
 8002bdc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_I2C_Init+0x120>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4931      	ldr	r1, [pc, #196]	; (8002ccc <HAL_I2C_Init+0x124>)
 8002c08:	400a      	ands	r2, r1
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0209      	lsls	r1, r1, #8
 8002c20:	430a      	orrs	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	e007      	b.n	8002c36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2184      	movs	r1, #132	; 0x84
 8002c30:	0209      	lsls	r1, r1, #8
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d104      	bne.n	8002c48 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	491f      	ldr	r1, [pc, #124]	; (8002cd0 <HAL_I2C_Init+0x128>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_I2C_Init+0x124>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69d9      	ldr	r1, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1a      	ldr	r2, [r3, #32]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2120      	movs	r1, #32
 8002cae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2242      	movs	r2, #66	; 0x42
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	f0ffffff 	.word	0xf0ffffff
 8002ccc:	ffff7fff 	.word	0xffff7fff
 8002cd0:	02008000 	.word	0x02008000

08002cd4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
  }
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	001a      	movs	r2, r3
 8002d26:	2301      	movs	r3, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d010      	beq.n	8002d4e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	09db      	lsrs	r3, r3, #7
 8002d30:	001a      	movs	r2, r3
 8002d32:	2301      	movs	r3, #1
 8002d34:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002d36:	d00a      	beq.n	8002d4e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	0052      	lsls	r2, r2, #1
 8002d4c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	0a9b      	lsrs	r3, r3, #10
 8002d52:	001a      	movs	r2, r3
 8002d54:	2301      	movs	r3, #1
 8002d56:	4013      	ands	r3, r2
 8002d58:	d010      	beq.n	8002d7c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	09db      	lsrs	r3, r3, #7
 8002d5e:	001a      	movs	r2, r3
 8002d60:	2301      	movs	r3, #1
 8002d62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d64:	d00a      	beq.n	8002d7c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	00d2      	lsls	r2, r2, #3
 8002d7a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	0a5b      	lsrs	r3, r3, #9
 8002d80:	001a      	movs	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d010      	beq.n	8002daa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	09db      	lsrs	r3, r3, #7
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d92:	d00a      	beq.n	8002daa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d98:	2202      	movs	r2, #2
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	220b      	movs	r2, #11
 8002db4:	4013      	ands	r3, r2
 8002db6:	d005      	beq.n	8002dc4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fbd8 	bl	8003574 <I2C_ITError>
  }
}
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b006      	add	sp, #24
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b002      	add	sp, #8
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	0008      	movs	r0, r1
 8002df6:	0011      	movs	r1, r2
 8002df8:	1cfb      	adds	r3, r7, #3
 8002dfa:	1c02      	adds	r2, r0, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
 8002dfe:	003b      	movs	r3, r7
 8002e00:	1c0a      	adds	r2, r1, #0
 8002e02:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2240      	movs	r2, #64	; 0x40
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <I2C_Slave_ISR_IT+0x24>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e0fa      	b.n	8003056 <I2C_Slave_ISR_IT+0x21a>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	; 0x40
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	2301      	movs	r3, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	001a      	movs	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e7e:	d005      	beq.n	8002e8c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0011      	movs	r1, r2
 8002e86:	0018      	movs	r0, r3
 8002e88:	f000 f9f6 	bl	8003278 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	001a      	movs	r2, r3
 8002e92:	2301      	movs	r3, #1
 8002e94:	4013      	ands	r3, r2
 8002e96:	d054      	beq.n	8002f42 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ea2:	d04e      	beq.n	8002f42 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d12d      	bne.n	8002f0a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2241      	movs	r2, #65	; 0x41
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b28      	cmp	r3, #40	; 0x28
 8002eb8:	d10b      	bne.n	8002ed2 <I2C_Slave_ISR_IT+0x96>
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	049b      	lsls	r3, r3, #18
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d106      	bne.n	8002ed2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 faf8 	bl	80034c0 <I2C_ITListenCplt>
 8002ed0:	e036      	b.n	8002f40 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2241      	movs	r2, #65	; 0x41
 8002ed6:	5c9b      	ldrb	r3, [r3, r2]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b29      	cmp	r3, #41	; 0x29
 8002edc:	d110      	bne.n	8002f00 <I2C_Slave_ISR_IT+0xc4>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4a5f      	ldr	r2, [pc, #380]	; (8003060 <I2C_Slave_ISR_IT+0x224>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00c      	beq.n	8002f00 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2210      	movs	r2, #16
 8002eec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f000 fc4a 	bl	800378a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 f957 	bl	80031ac <I2C_ITSlaveSeqCplt>
 8002efe:	e01f      	b.n	8002f40 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f08:	e09d      	b.n	8003046 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2210      	movs	r2, #16
 8002f10:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	2204      	movs	r2, #4
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <I2C_Slave_ISR_IT+0xf4>
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	045b      	lsls	r3, r3, #17
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d000      	beq.n	8002f30 <I2C_Slave_ISR_IT+0xf4>
 8002f2e:	e08a      	b.n	8003046 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	0011      	movs	r1, r2
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 fb1b 	bl	8003574 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f3e:	e082      	b.n	8003046 <I2C_Slave_ISR_IT+0x20a>
 8002f40:	e081      	b.n	8003046 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	001a      	movs	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	001a      	movs	r2, r3
 8002f54:	2301      	movs	r3, #1
 8002f56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f58:	d02b      	beq.n	8002fb2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d018      	beq.n	8002f96 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d154      	bne.n	800304a <I2C_Slave_ISR_IT+0x20e>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <I2C_Slave_ISR_IT+0x224>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d050      	beq.n	800304a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f8fe 	bl	80031ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fb0:	e04b      	b.n	800304a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d00c      	beq.n	8002fd8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002fc8:	d006      	beq.n	8002fd8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f000 f847 	bl	8003064 <I2C_ITAddrCplt>
 8002fd6:	e039      	b.n	800304c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	001a      	movs	r2, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d033      	beq.n	800304c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	001a      	movs	r2, r3
 8002fea:	2301      	movs	r3, #1
 8002fec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fee:	d02d      	beq.n	800304c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
 800302a:	e00f      	b.n	800304c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	2380      	movs	r3, #128	; 0x80
 8003030:	045b      	lsls	r3, r3, #17
 8003032:	429a      	cmp	r2, r3
 8003034:	d002      	beq.n	800303c <I2C_Slave_ISR_IT+0x200>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 f8b4 	bl	80031ac <I2C_ITSlaveSeqCplt>
 8003044:	e002      	b.n	800304c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	e000      	b.n	800304c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800304a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	2100      	movs	r1, #0
 8003052:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	ffff0000 	.word	0xffff0000

08003064 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003064:	b5b0      	push	{r4, r5, r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2241      	movs	r2, #65	; 0x41
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	001a      	movs	r2, r3
 8003078:	2328      	movs	r3, #40	; 0x28
 800307a:	4013      	ands	r3, r2
 800307c:	2b28      	cmp	r3, #40	; 0x28
 800307e:	d000      	beq.n	8003082 <I2C_ITAddrCplt+0x1e>
 8003080:	e088      	b.n	8003194 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	b2da      	uxtb	r2, r3
 800308c:	250f      	movs	r5, #15
 800308e:	197b      	adds	r3, r7, r5
 8003090:	2101      	movs	r1, #1
 8003092:	400a      	ands	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	b29a      	uxth	r2, r3
 80030a0:	200c      	movs	r0, #12
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	21fe      	movs	r1, #254	; 0xfe
 80030a6:	400a      	ands	r2, r1
 80030a8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	240a      	movs	r4, #10
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	0592      	lsls	r2, r2, #22
 80030b8:	0d92      	lsrs	r2, r2, #22
 80030ba:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	2308      	movs	r3, #8
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	21fe      	movs	r1, #254	; 0xfe
 80030ca:	400a      	ands	r2, r1
 80030cc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d148      	bne.n	8003168 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030d6:	0021      	movs	r1, r4
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	09db      	lsrs	r3, r3, #7
 80030de:	b29a      	uxth	r2, r3
 80030e0:	183b      	adds	r3, r7, r0
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	4053      	eors	r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	001a      	movs	r2, r3
 80030ea:	2306      	movs	r3, #6
 80030ec:	4013      	ands	r3, r2
 80030ee:	d120      	bne.n	8003132 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	187a      	adds	r2, r7, r1
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003106:	2b02      	cmp	r3, #2
 8003108:	d14c      	bne.n	80031a4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2208      	movs	r2, #8
 8003116:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003120:	183b      	adds	r3, r7, r0
 8003122:	881a      	ldrh	r2, [r3, #0]
 8003124:	197b      	adds	r3, r7, r5
 8003126:	7819      	ldrb	r1, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff fe5e 	bl	8002dec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003130:	e038      	b.n	80031a4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003132:	240c      	movs	r4, #12
 8003134:	193b      	adds	r3, r7, r4
 8003136:	2208      	movs	r2, #8
 8003138:	18ba      	adds	r2, r7, r2
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fb60 	bl	800380c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	2100      	movs	r1, #0
 8003152:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003154:	193b      	adds	r3, r7, r4
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	230f      	movs	r3, #15
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	7819      	ldrb	r1, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff fe43 	bl	8002dec <HAL_I2C_AddrCallback>
}
 8003166:	e01d      	b.n	80031a4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fb4b 	bl	800380c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2240      	movs	r2, #64	; 0x40
 800317a:	2100      	movs	r1, #0
 800317c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800317e:	230c      	movs	r3, #12
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	230f      	movs	r3, #15
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	7819      	ldrb	r1, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	0018      	movs	r0, r3
 800318e:	f7ff fe2d 	bl	8002dec <HAL_I2C_AddrCallback>
}
 8003192:	e007      	b.n	80031a4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2208      	movs	r2, #8
 800319a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	2100      	movs	r1, #0
 80031a2:	5499      	strb	r1, [r3, r2]
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bdb0      	pop	{r4, r5, r7, pc}

080031ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2242      	movs	r2, #66	; 0x42
 80031c0:	2100      	movs	r1, #0
 80031c2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	0b9b      	lsrs	r3, r3, #14
 80031c8:	001a      	movs	r2, r3
 80031ca:	2301      	movs	r3, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d008      	beq.n	80031e2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4925      	ldr	r1, [pc, #148]	; (8003270 <I2C_ITSlaveSeqCplt+0xc4>)
 80031dc:	400a      	ands	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e00d      	b.n	80031fe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0bdb      	lsrs	r3, r3, #15
 80031e6:	001a      	movs	r2, r3
 80031e8:	2301      	movs	r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d007      	beq.n	80031fe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	491e      	ldr	r1, [pc, #120]	; (8003274 <I2C_ITSlaveSeqCplt+0xc8>)
 80031fa:	400a      	ands	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2241      	movs	r2, #65	; 0x41
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b29      	cmp	r3, #41	; 0x29
 8003208:	d114      	bne.n	8003234 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2241      	movs	r2, #65	; 0x41
 800320e:	2128      	movs	r1, #40	; 0x28
 8003210:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2101      	movs	r1, #1
 800321c:	0018      	movs	r0, r3
 800321e:	f000 faf5 	bl	800380c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2240      	movs	r2, #64	; 0x40
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7ff fdcd 	bl	8002dcc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003232:	e019      	b.n	8003268 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	5c9b      	ldrb	r3, [r3, r2]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b2a      	cmp	r3, #42	; 0x2a
 800323e:	d113      	bne.n	8003268 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2241      	movs	r2, #65	; 0x41
 8003244:	2128      	movs	r1, #40	; 0x28
 8003246:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2222      	movs	r2, #34	; 0x22
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2102      	movs	r1, #2
 8003252:	0018      	movs	r0, r3
 8003254:	f000 fada 	bl	800380c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	2100      	movs	r1, #0
 800325e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff fdba 	bl	8002ddc <HAL_I2C_SlaveRxCpltCallback>
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	ffffbfff 	.word	0xffffbfff
 8003274:	ffff7fff 	.word	0xffff7fff

08003278 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800328e:	200f      	movs	r0, #15
 8003290:	183b      	adds	r3, r7, r0
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	2141      	movs	r1, #65	; 0x41
 8003296:	5c52      	ldrb	r2, [r2, r1]
 8003298:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032a2:	183b      	adds	r3, r7, r0
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b21      	cmp	r3, #33	; 0x21
 80032a8:	d003      	beq.n	80032b2 <I2C_ITSlaveCplt+0x3a>
 80032aa:	183b      	adds	r3, r7, r0
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b29      	cmp	r3, #41	; 0x29
 80032b0:	d109      	bne.n	80032c6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80032b2:	4a7d      	ldr	r2, [pc, #500]	; (80034a8 <I2C_ITSlaveCplt+0x230>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0011      	movs	r1, r2
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 faa7 	bl	800380c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
 80032c4:	e011      	b.n	80032ea <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032c6:	220f      	movs	r2, #15
 80032c8:	18bb      	adds	r3, r7, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b22      	cmp	r3, #34	; 0x22
 80032ce:	d003      	beq.n	80032d8 <I2C_ITSlaveCplt+0x60>
 80032d0:	18bb      	adds	r3, r7, r2
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d108      	bne.n	80032ea <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032d8:	4a74      	ldr	r2, [pc, #464]	; (80034ac <I2C_ITSlaveCplt+0x234>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f000 fa94 	bl	800380c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2222      	movs	r2, #34	; 0x22
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	0209      	lsls	r1, r1, #8
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	496a      	ldr	r1, [pc, #424]	; (80034b0 <I2C_ITSlaveCplt+0x238>)
 8003308:	400a      	ands	r2, r1
 800330a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fa3b 	bl	800378a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	0b9b      	lsrs	r3, r3, #14
 8003318:	001a      	movs	r2, r3
 800331a:	2301      	movs	r3, #1
 800331c:	4013      	ands	r3, r2
 800331e:	d013      	beq.n	8003348 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4962      	ldr	r1, [pc, #392]	; (80034b4 <I2C_ITSlaveCplt+0x23c>)
 800332c:	400a      	ands	r2, r1
 800332e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	b29a      	uxth	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003346:	e018      	b.n	800337a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	0bdb      	lsrs	r3, r3, #15
 800334c:	001a      	movs	r2, r3
 800334e:	2301      	movs	r3, #1
 8003350:	4013      	ands	r3, r2
 8003352:	d012      	beq.n	800337a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4956      	ldr	r1, [pc, #344]	; (80034b8 <I2C_ITSlaveCplt+0x240>)
 8003360:	400a      	ands	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d006      	beq.n	800337a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b29a      	uxth	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	001a      	movs	r2, r3
 8003380:	2301      	movs	r3, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d020      	beq.n	80033c8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2204      	movs	r2, #4
 800338a:	4393      	bics	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	2204      	movs	r2, #4
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2242      	movs	r2, #66	; 0x42
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f8b9 	bl	8003574 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2241      	movs	r2, #65	; 0x41
 8003406:	5c9b      	ldrb	r3, [r3, r2]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b28      	cmp	r3, #40	; 0x28
 800340c:	d147      	bne.n	800349e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0011      	movs	r1, r2
 8003414:	0018      	movs	r0, r3
 8003416:	f000 f853 	bl	80034c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800341a:	e040      	b.n	800349e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4a26      	ldr	r2, [pc, #152]	; (80034bc <I2C_ITSlaveCplt+0x244>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d016      	beq.n	8003454 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff febf 	bl	80031ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <I2C_ITSlaveCplt+0x244>)
 8003432:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2241      	movs	r2, #65	; 0x41
 8003438:	2120      	movs	r1, #32
 800343a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7ff fcdd 	bl	8002e0c <HAL_I2C_ListenCpltCallback>
}
 8003452:	e024      	b.n	800349e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2241      	movs	r2, #65	; 0x41
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b22      	cmp	r3, #34	; 0x22
 800345e:	d10f      	bne.n	8003480 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2241      	movs	r2, #65	; 0x41
 8003464:	2120      	movs	r1, #32
 8003466:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2240      	movs	r2, #64	; 0x40
 8003472:	2100      	movs	r1, #0
 8003474:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff fcaf 	bl	8002ddc <HAL_I2C_SlaveRxCpltCallback>
}
 800347e:	e00e      	b.n	800349e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2241      	movs	r2, #65	; 0x41
 8003484:	2120      	movs	r1, #32
 8003486:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2240      	movs	r2, #64	; 0x40
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff fc97 	bl	8002dcc <HAL_I2C_SlaveTxCpltCallback>
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b006      	add	sp, #24
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	00008001 	.word	0x00008001
 80034ac:	00008002 	.word	0x00008002
 80034b0:	fe00e800 	.word	0xfe00e800
 80034b4:	ffffbfff 	.word	0xffffbfff
 80034b8:	ffff7fff 	.word	0xffff7fff
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <I2C_ITListenCplt+0xac>)
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2241      	movs	r2, #65	; 0x41
 80034da:	2120      	movs	r1, #32
 80034dc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2242      	movs	r2, #66	; 0x42
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	001a      	movs	r2, r3
 80034f2:	2301      	movs	r3, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d022      	beq.n	800353e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	2204      	movs	r2, #4
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800353e:	4a0c      	ldr	r2, [pc, #48]	; (8003570 <I2C_ITListenCplt+0xb0>)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0011      	movs	r1, r2
 8003544:	0018      	movs	r0, r3
 8003546:	f000 f961 	bl	800380c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2210      	movs	r2, #16
 8003550:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff fc55 	bl	8002e0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	ffff0000 	.word	0xffff0000
 8003570:	00008003 	.word	0x00008003

08003574 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800357e:	200f      	movs	r0, #15
 8003580:	183b      	adds	r3, r7, r0
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	2141      	movs	r1, #65	; 0x41
 8003586:	5c52      	ldrb	r2, [r2, r1]
 8003588:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2242      	movs	r2, #66	; 0x42
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a62      	ldr	r2, [pc, #392]	; (8003720 <I2C_ITError+0x1ac>)
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b28      	cmp	r3, #40	; 0x28
 80035b0:	d007      	beq.n	80035c2 <I2C_ITError+0x4e>
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b29      	cmp	r3, #41	; 0x29
 80035b8:	d003      	beq.n	80035c2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035ba:	183b      	adds	r3, r7, r0
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b2a      	cmp	r3, #42	; 0x2a
 80035c0:	d10c      	bne.n	80035dc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2103      	movs	r1, #3
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f920 	bl	800380c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2241      	movs	r2, #65	; 0x41
 80035d0:	2128      	movs	r1, #40	; 0x28
 80035d2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a53      	ldr	r2, [pc, #332]	; (8003724 <I2C_ITError+0x1b0>)
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
 80035da:	e012      	b.n	8003602 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <I2C_ITError+0x1b4>)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	0011      	movs	r1, r2
 80035e2:	0018      	movs	r0, r3
 80035e4:	f000 f912 	bl	800380c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2241      	movs	r2, #65	; 0x41
 80035ec:	5c9b      	ldrb	r3, [r3, r2]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b60      	cmp	r3, #96	; 0x60
 80035f2:	d003      	beq.n	80035fc <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2241      	movs	r2, #65	; 0x41
 80035f8:	2120      	movs	r1, #32
 80035fa:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03b      	beq.n	8003688 <I2C_ITError+0x114>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b11      	cmp	r3, #17
 8003614:	d002      	beq.n	800361c <I2C_ITError+0xa8>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b21      	cmp	r3, #33	; 0x21
 800361a:	d135      	bne.n	8003688 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	01db      	lsls	r3, r3, #7
 8003626:	401a      	ands	r2, r3
 8003628:	2380      	movs	r3, #128	; 0x80
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	493c      	ldr	r1, [pc, #240]	; (800372c <I2C_ITError+0x1b8>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	0018      	movs	r0, r3
 8003646:	f7fe ff7a 	bl	800253e <HAL_DMA_GetState>
 800364a:	0003      	movs	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d016      	beq.n	800367e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	4a36      	ldr	r2, [pc, #216]	; (8003730 <I2C_ITError+0x1bc>)
 8003656:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	2100      	movs	r1, #0
 800365e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	0018      	movs	r0, r3
 8003666:	f7fe ff25 	bl	80024b4 <HAL_DMA_Abort_IT>
 800366a:	1e03      	subs	r3, r0, #0
 800366c:	d051      	beq.n	8003712 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	0018      	movs	r0, r3
 800367a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800367c:	e049      	b.n	8003712 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f859 	bl	8003738 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003686:	e044      	b.n	8003712 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d03b      	beq.n	8003708 <I2C_ITError+0x194>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b12      	cmp	r3, #18
 8003694:	d002      	beq.n	800369c <I2C_ITError+0x128>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b22      	cmp	r3, #34	; 0x22
 800369a:	d135      	bne.n	8003708 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	401a      	ands	r2, r3
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d107      	bne.n	80036c0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	491e      	ldr	r1, [pc, #120]	; (8003734 <I2C_ITError+0x1c0>)
 80036bc:	400a      	ands	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7fe ff3a 	bl	800253e <HAL_DMA_GetState>
 80036ca:	0003      	movs	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d016      	beq.n	80036fe <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	4a16      	ldr	r2, [pc, #88]	; (8003730 <I2C_ITError+0x1bc>)
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	2100      	movs	r1, #0
 80036de:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fe fee5 	bl	80024b4 <HAL_DMA_Abort_IT>
 80036ea:	1e03      	subs	r3, r0, #0
 80036ec:	d013      	beq.n	8003716 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	0018      	movs	r0, r3
 80036fa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036fc:	e00b      	b.n	8003716 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f819 	bl	8003738 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003706:	e006      	b.n	8003716 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	0018      	movs	r0, r3
 800370c:	f000 f814 	bl	8003738 <I2C_TreatErrorCallback>
  }
}
 8003710:	e002      	b.n	8003718 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	e000      	b.n	8003718 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003716:	46c0      	nop			; (mov r8, r8)
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	ffff0000 	.word	0xffff0000
 8003724:	08002e3d 	.word	0x08002e3d
 8003728:	00008003 	.word	0x00008003
 800372c:	ffffbfff 	.word	0xffffbfff
 8003730:	080037cf 	.word	0x080037cf
 8003734:	ffff7fff 	.word	0xffff7fff

08003738 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2241      	movs	r2, #65	; 0x41
 8003744:	5c9b      	ldrb	r3, [r3, r2]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d10f      	bne.n	800376c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2241      	movs	r2, #65	; 0x41
 8003750:	2120      	movs	r1, #32
 8003752:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff fb61 	bl	8002e2c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800376a:	e00a      	b.n	8003782 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2240      	movs	r2, #64	; 0x40
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	0018      	movs	r0, r3
 800377e:	f7ff fb4d 	bl	8002e1c <HAL_I2C_ErrorCallback>
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2202      	movs	r2, #2
 800379a:	4013      	ands	r3, r2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d103      	bne.n	80037a8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d007      	beq.n	80037c6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	430a      	orrs	r2, r1
 80037c4:	619a      	str	r2, [r3, #24]
  }
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}

080037ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff ff9a 	bl	8003738 <I2C_TreatErrorCallback>
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b004      	add	sp, #16
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	000a      	movs	r2, r1
 8003816:	1cbb      	adds	r3, r7, #2
 8003818:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800381e:	1cbb      	adds	r3, r7, #2
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	2201      	movs	r2, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d010      	beq.n	800384a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2242      	movs	r2, #66	; 0x42
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2241      	movs	r2, #65	; 0x41
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	001a      	movs	r2, r3
 800383a:	2328      	movs	r3, #40	; 0x28
 800383c:	4013      	ands	r3, r2
 800383e:	2b28      	cmp	r3, #40	; 0x28
 8003840:	d003      	beq.n	800384a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22b0      	movs	r2, #176	; 0xb0
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800384a:	1cbb      	adds	r3, r7, #2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	2202      	movs	r2, #2
 8003850:	4013      	ands	r3, r2
 8003852:	d010      	beq.n	8003876 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2244      	movs	r2, #68	; 0x44
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2241      	movs	r2, #65	; 0x41
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	001a      	movs	r2, r3
 8003866:	2328      	movs	r3, #40	; 0x28
 8003868:	4013      	ands	r3, r2
 800386a:	2b28      	cmp	r3, #40	; 0x28
 800386c:	d003      	beq.n	8003876 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	22b0      	movs	r2, #176	; 0xb0
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003876:	1cbb      	adds	r3, r7, #2
 8003878:	2200      	movs	r2, #0
 800387a:	5e9b      	ldrsh	r3, [r3, r2]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da03      	bge.n	8003888 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	22b8      	movs	r2, #184	; 0xb8
 8003884:	4313      	orrs	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003888:	1cbb      	adds	r3, r7, #2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d103      	bne.n	8003898 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2290      	movs	r2, #144	; 0x90
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003898:	1cbb      	adds	r3, r7, #2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	2b20      	cmp	r3, #32
 800389e:	d103      	bne.n	80038a8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038a8:	1cbb      	adds	r3, r7, #2
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d103      	bne.n	80038b8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43d9      	mvns	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	400a      	ands	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b004      	add	sp, #16
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2241      	movs	r2, #65	; 0x41
 80038e2:	5c9b      	ldrb	r3, [r3, r2]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d138      	bne.n	800395c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2240      	movs	r2, #64	; 0x40
 80038ee:	5c9b      	ldrb	r3, [r3, r2]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e032      	b.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2240      	movs	r2, #64	; 0x40
 80038fc:	2101      	movs	r1, #1
 80038fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2241      	movs	r2, #65	; 0x41
 8003904:	2124      	movs	r1, #36	; 0x24
 8003906:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2101      	movs	r1, #1
 8003914:	438a      	bics	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4911      	ldr	r1, [pc, #68]	; (8003968 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2241      	movs	r2, #65	; 0x41
 800394c:	2120      	movs	r1, #32
 800394e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2240      	movs	r2, #64	; 0x40
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	ffffefff 	.word	0xffffefff

0800396c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2241      	movs	r2, #65	; 0x41
 800397a:	5c9b      	ldrb	r3, [r3, r2]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b20      	cmp	r3, #32
 8003980:	d139      	bne.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2240      	movs	r2, #64	; 0x40
 8003986:	5c9b      	ldrb	r3, [r3, r2]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800398c:	2302      	movs	r3, #2
 800398e:	e033      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	2101      	movs	r1, #1
 8003996:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2241      	movs	r2, #65	; 0x41
 800399c:	2124      	movs	r1, #36	; 0x24
 800399e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2101      	movs	r1, #1
 80039ac:	438a      	bics	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039bc:	4013      	ands	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2241      	movs	r2, #65	; 0x41
 80039e6:	2120      	movs	r1, #32
 80039e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2240      	movs	r2, #64	; 0x40
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	fffff0ff 	.word	0xfffff0ff

08003a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e305      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <HAL_RCC_OscConfig+0x1e>
 8003a20:	e08d      	b.n	8003b3e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a22:	4bc5      	ldr	r3, [pc, #788]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	220c      	movs	r2, #12
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d00e      	beq.n	8003a4c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a2e:	4bc2      	ldr	r3, [pc, #776]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	220c      	movs	r2, #12
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x64>
 8003a3a:	4bbf      	ldr	r3, [pc, #764]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	23c0      	movs	r3, #192	; 0xc0
 8003a40:	025b      	lsls	r3, r3, #9
 8003a42:	401a      	ands	r2, r3
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d10d      	bne.n	8003a68 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	4bba      	ldr	r3, [pc, #744]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	4013      	ands	r3, r2
 8003a56:	d100      	bne.n	8003a5a <HAL_RCC_OscConfig+0x56>
 8003a58:	e070      	b.n	8003b3c <HAL_RCC_OscConfig+0x138>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d000      	beq.n	8003a64 <HAL_RCC_OscConfig+0x60>
 8003a62:	e06b      	b.n	8003b3c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e2dc      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <HAL_RCC_OscConfig+0x7c>
 8003a70:	4bb1      	ldr	r3, [pc, #708]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4bb0      	ldr	r3, [pc, #704]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a76:	2180      	movs	r1, #128	; 0x80
 8003a78:	0249      	lsls	r1, r1, #9
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e02f      	b.n	8003ae0 <HAL_RCC_OscConfig+0xdc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x9e>
 8003a88:	4bab      	ldr	r3, [pc, #684]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4baa      	ldr	r3, [pc, #680]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a8e:	49ab      	ldr	r1, [pc, #684]	; (8003d3c <HAL_RCC_OscConfig+0x338>)
 8003a90:	400a      	ands	r2, r1
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	4ba8      	ldr	r3, [pc, #672]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4ba7      	ldr	r3, [pc, #668]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003a9a:	49a9      	ldr	r1, [pc, #676]	; (8003d40 <HAL_RCC_OscConfig+0x33c>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e01e      	b.n	8003ae0 <HAL_RCC_OscConfig+0xdc>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xc4>
 8003aaa:	4ba3      	ldr	r3, [pc, #652]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4ba2      	ldr	r3, [pc, #648]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	02c9      	lsls	r1, r1, #11
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b9f      	ldr	r3, [pc, #636]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b9e      	ldr	r3, [pc, #632]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0249      	lsls	r1, r1, #9
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e00b      	b.n	8003ae0 <HAL_RCC_OscConfig+0xdc>
 8003ac8:	4b9b      	ldr	r3, [pc, #620]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b9a      	ldr	r3, [pc, #616]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003ace:	499b      	ldr	r1, [pc, #620]	; (8003d3c <HAL_RCC_OscConfig+0x338>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	4b98      	ldr	r3, [pc, #608]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b97      	ldr	r3, [pc, #604]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003ada:	4999      	ldr	r1, [pc, #612]	; (8003d40 <HAL_RCC_OscConfig+0x33c>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d014      	beq.n	8003b12 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fce8 	bl	80014bc <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af2:	f7fd fce3 	bl	80014bc <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e28e      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	4b8c      	ldr	r3, [pc, #560]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	029b      	lsls	r3, r3, #10
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0xee>
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fd fcd3 	bl	80014bc <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fcce 	bl	80014bc <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e279      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	029b      	lsls	r3, r3, #10
 8003b36:	4013      	ands	r3, r2
 8003b38:	d1f0      	bne.n	8003b1c <HAL_RCC_OscConfig+0x118>
 8003b3a:	e000      	b.n	8003b3e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2202      	movs	r2, #2
 8003b44:	4013      	ands	r3, r2
 8003b46:	d100      	bne.n	8003b4a <HAL_RCC_OscConfig+0x146>
 8003b48:	e06c      	b.n	8003c24 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b4a:	4b7b      	ldr	r3, [pc, #492]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	220c      	movs	r2, #12
 8003b50:	4013      	ands	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b54:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	220c      	movs	r2, #12
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11f      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x19c>
 8003b60:	4b75      	ldr	r3, [pc, #468]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	23c0      	movs	r3, #192	; 0xc0
 8003b66:	025b      	lsls	r3, r3, #9
 8003b68:	401a      	ands	r2, r3
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d116      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	4b71      	ldr	r3, [pc, #452]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_OscConfig+0x184>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e24c      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b88:	4b6b      	ldr	r3, [pc, #428]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	22f8      	movs	r2, #248	; 0xf8
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00da      	lsls	r2, r3, #3
 8003b98:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	e041      	b.n	8003c24 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d024      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b62      	ldr	r3, [pc, #392]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fc82 	bl	80014bc <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bbe:	f7fd fc7d 	bl	80014bc <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e228      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d0f1      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	22f8      	movs	r2, #248	; 0xf8
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	00da      	lsls	r2, r3, #3
 8003bea:	4b53      	ldr	r3, [pc, #332]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e018      	b.n	8003c24 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b50      	ldr	r3, [pc, #320]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd fc5d 	bl	80014bc <HAL_GetTick>
 8003c02:	0003      	movs	r3, r0
 8003c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd fc58 	bl	80014bc <HAL_GetTick>
 8003c0c:	0002      	movs	r2, r0
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e203      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b47      	ldr	r3, [pc, #284]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	4013      	ands	r3, r2
 8003c22:	d1f1      	bne.n	8003c08 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2208      	movs	r2, #8
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d036      	beq.n	8003c9c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c36:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fd fc3b 	bl	80014bc <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fc36 	bl	80014bc <HAL_GetTick>
 8003c50:	0002      	movs	r2, r0
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e1e1      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d0f1      	beq.n	8003c4c <HAL_RCC_OscConfig+0x248>
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6a:	4b33      	ldr	r3, [pc, #204]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6e:	4b32      	ldr	r3, [pc, #200]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	438a      	bics	r2, r1
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fd fc21 	bl	80014bc <HAL_GetTick>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7fd fc1c 	bl	80014bc <HAL_GetTick>
 8003c84:	0002      	movs	r2, r0
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e1c7      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c92:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d1f1      	bne.n	8003c80 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d100      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2a4>
 8003ca6:	e0b5      	b.n	8003e14 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca8:	201f      	movs	r0, #31
 8003caa:	183b      	adds	r3, r7, r0
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	055b      	lsls	r3, r3, #21
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d110      	bne.n	8003cde <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0549      	lsls	r1, r1, #21
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	61da      	str	r2, [r3, #28]
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	055b      	lsls	r3, r3, #21
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_OscConfig+0x340>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d11a      	bne.n	8003d20 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cea:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <HAL_RCC_OscConfig+0x340>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_RCC_OscConfig+0x340>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0049      	lsls	r1, r1, #1
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fbe0 	bl	80014bc <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fd fbdb 	bl	80014bc <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e186      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_OscConfig+0x340>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d10f      	bne.n	8003d48 <HAL_RCC_OscConfig+0x344>
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	4b02      	ldr	r3, [pc, #8]	; (8003d38 <HAL_RCC_OscConfig+0x334>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	621a      	str	r2, [r3, #32]
 8003d34:	e036      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a0>
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	fffeffff 	.word	0xfffeffff
 8003d40:	fffbffff 	.word	0xfffbffff
 8003d44:	40007000 	.word	0x40007000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_OscConfig+0x366>
 8003d50:	4bb6      	ldr	r3, [pc, #728]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	4bb5      	ldr	r3, [pc, #724]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	621a      	str	r2, [r3, #32]
 8003d5c:	4bb3      	ldr	r3, [pc, #716]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	4bb2      	ldr	r3, [pc, #712]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d62:	2104      	movs	r1, #4
 8003d64:	438a      	bics	r2, r1
 8003d66:	621a      	str	r2, [r3, #32]
 8003d68:	e01c      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a0>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x388>
 8003d72:	4bae      	ldr	r3, [pc, #696]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	4bad      	ldr	r3, [pc, #692]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d78:	2104      	movs	r1, #4
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	4bab      	ldr	r3, [pc, #684]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d80:	6a1a      	ldr	r2, [r3, #32]
 8003d82:	4baa      	ldr	r3, [pc, #680]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d84:	2101      	movs	r1, #1
 8003d86:	430a      	orrs	r2, r1
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x3a0>
 8003d8c:	4ba7      	ldr	r3, [pc, #668]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d8e:	6a1a      	ldr	r2, [r3, #32]
 8003d90:	4ba6      	ldr	r3, [pc, #664]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d92:	2101      	movs	r1, #1
 8003d94:	438a      	bics	r2, r1
 8003d96:	621a      	str	r2, [r3, #32]
 8003d98:	4ba4      	ldr	r3, [pc, #656]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	4ba3      	ldr	r3, [pc, #652]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003d9e:	2104      	movs	r1, #4
 8003da0:	438a      	bics	r2, r1
 8003da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fd fb86 	bl	80014bc <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	e009      	b.n	8003dca <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fd fb81 	bl	80014bc <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	4a9b      	ldr	r2, [pc, #620]	; (8004030 <HAL_RCC_OscConfig+0x62c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e12b      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	4b98      	ldr	r3, [pc, #608]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x3b2>
 8003dd4:	e013      	b.n	8003dfe <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd6:	f7fd fb71 	bl	80014bc <HAL_GetTick>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dde:	e009      	b.n	8003df4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de0:	f7fd fb6c 	bl	80014bc <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	4a91      	ldr	r2, [pc, #580]	; (8004030 <HAL_RCC_OscConfig+0x62c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e116      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	4b8d      	ldr	r3, [pc, #564]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dfe:	231f      	movs	r3, #31
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e08:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	4b87      	ldr	r3, [pc, #540]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e0e:	4989      	ldr	r1, [pc, #548]	; (8004034 <HAL_RCC_OscConfig+0x630>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e26:	4b81      	ldr	r3, [pc, #516]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2a:	4b80      	ldr	r3, [pc, #512]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e32:	4b7e      	ldr	r3, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd fb3d 	bl	80014bc <HAL_GetTick>
 8003e42:	0003      	movs	r3, r0
 8003e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e48:	f7fd fb38 	bl	80014bc <HAL_GetTick>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0e3      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e5a:	4b74      	ldr	r3, [pc, #464]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	2202      	movs	r2, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d0f1      	beq.n	8003e48 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e64:	4b71      	ldr	r3, [pc, #452]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	22f8      	movs	r2, #248	; 0xf8
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	00da      	lsls	r2, r3, #3
 8003e74:	4b6d      	ldr	r3, [pc, #436]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
 8003e7a:	e034      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	3305      	adds	r3, #5
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e84:	4b69      	ldr	r3, [pc, #420]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e88:	4b68      	ldr	r3, [pc, #416]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	438a      	bics	r2, r1
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	22f8      	movs	r2, #248	; 0xf8
 8003e96:	4393      	bics	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	00da      	lsls	r2, r3, #3
 8003ea0:	4b62      	ldr	r3, [pc, #392]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	e01e      	b.n	8003ee6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ea8:	4b60      	ldr	r3, [pc, #384]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eac:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003eae:	2104      	movs	r1, #4
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003eb4:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb8:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	438a      	bics	r2, r1
 8003ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fafc 	bl	80014bc <HAL_GetTick>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003eca:	f7fd faf7 	bl	80014bc <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0a2      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003edc:	4b53      	ldr	r3, [pc, #332]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d1f1      	bne.n	8003eca <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d100      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x4ec>
 8003eee:	e097      	b.n	8004020 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef0:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d100      	bne.n	8003efe <HAL_RCC_OscConfig+0x4fa>
 8003efc:	e06b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d14c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f0c:	494a      	ldr	r1, [pc, #296]	; (8004038 <HAL_RCC_OscConfig+0x634>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd fad3 	bl	80014bc <HAL_GetTick>
 8003f16:	0003      	movs	r3, r0
 8003f18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fd face 	bl	80014bc <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e079      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2e:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	049b      	lsls	r3, r3, #18
 8003f36:	4013      	ands	r3, r2
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3a:	4b3c      	ldr	r3, [pc, #240]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	220f      	movs	r2, #15
 8003f40:	4393      	bics	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b38      	ldr	r3, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_RCC_OscConfig+0x638>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	431a      	orrs	r2, r3
 8003f62:	4b32      	ldr	r3, [pc, #200]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	0449      	lsls	r1, r1, #17
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f76:	f7fd faa1 	bl	80014bc <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fd fa9c 	bl	80014bc <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e047      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	049b      	lsls	r3, r3, #18
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x57c>
 8003f9e:	e03f      	b.n	8004020 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003fa6:	4924      	ldr	r1, [pc, #144]	; (8004038 <HAL_RCC_OscConfig+0x634>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fa86 	bl	80014bc <HAL_GetTick>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fa81 	bl	80014bc <HAL_GetTick>
 8003fba:	0002      	movs	r2, r0
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e02c      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc8:	4b18      	ldr	r3, [pc, #96]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	049b      	lsls	r3, r3, #18
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d1f0      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x5b2>
 8003fd4:	e024      	b.n	8004020 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01f      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003fe8:	4b10      	ldr	r3, [pc, #64]	; (800402c <HAL_RCC_OscConfig+0x628>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	23c0      	movs	r3, #192	; 0xc0
 8003ff2:	025b      	lsls	r3, r3, #9
 8003ff4:	401a      	ands	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d10e      	bne.n	800401c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	220f      	movs	r2, #15
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	23f0      	movs	r3, #240	; 0xf0
 8004010:	039b      	lsls	r3, r3, #14
 8004012:	401a      	ands	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b008      	add	sp, #32
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	40021000 	.word	0x40021000
 8004030:	00001388 	.word	0x00001388
 8004034:	efffffff 	.word	0xefffffff
 8004038:	feffffff 	.word	0xfeffffff
 800403c:	ffc27fff 	.word	0xffc27fff

08004040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0b3      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d911      	bls.n	8004086 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	4393      	bics	r3, r2
 800406a:	0019      	movs	r1, r3
 800406c:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2201      	movs	r2, #1
 800407a:	4013      	ands	r3, r2
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e09a      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2202      	movs	r2, #2
 800408c:	4013      	ands	r3, r2
 800408e:	d015      	beq.n	80040bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2204      	movs	r2, #4
 8004096:	4013      	ands	r3, r2
 8004098:	d006      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800409a:	4b4b      	ldr	r3, [pc, #300]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040a0:	21e0      	movs	r1, #224	; 0xe0
 80040a2:	00c9      	lsls	r1, r1, #3
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a8:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	22f0      	movs	r2, #240	; 0xf0
 80040ae:	4393      	bics	r3, r2
 80040b0:	0019      	movs	r1, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	4b44      	ldr	r3, [pc, #272]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	4013      	ands	r3, r2
 80040c4:	d040      	beq.n	8004148 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b3e      	ldr	r3, [pc, #248]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	2380      	movs	r3, #128	; 0x80
 80040d4:	029b      	lsls	r3, r3, #10
 80040d6:	4013      	ands	r3, r2
 80040d8:	d114      	bne.n	8004104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06e      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	049b      	lsls	r3, r3, #18
 80040ee:	4013      	ands	r3, r2
 80040f0:	d108      	bne.n	8004104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e062      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b34      	ldr	r3, [pc, #208]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2202      	movs	r2, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e05b      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004104:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2203      	movs	r2, #3
 800410a:	4393      	bics	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 8004114:	430a      	orrs	r2, r1
 8004116:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd f9d0 	bl	80014bc <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004120:	e009      	b.n	8004136 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004122:	f7fd f9cb 	bl	80014bc <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	4a27      	ldr	r2, [pc, #156]	; (80041cc <HAL_RCC_ClockConfig+0x18c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e042      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	220c      	movs	r2, #12
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1ec      	bne.n	8004122 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d211      	bcs.n	800417a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2201      	movs	r2, #1
 800415c:	4393      	bics	r3, r2
 800415e:	0019      	movs	r1, r3
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004168:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCC_ClockConfig+0x184>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d001      	beq.n	800417a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e020      	b.n	80041bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2204      	movs	r2, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4a11      	ldr	r2, [pc, #68]	; (80041d0 <HAL_RCC_ClockConfig+0x190>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004198:	f000 f820 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419c:	0001      	movs	r1, r0
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCC_ClockConfig+0x188>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	091b      	lsrs	r3, r3, #4
 80041a4:	220f      	movs	r2, #15
 80041a6:	4013      	ands	r3, r2
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x194>)
 80041aa:	5cd3      	ldrb	r3, [r2, r3]
 80041ac:	000a      	movs	r2, r1
 80041ae:	40da      	lsrs	r2, r3
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x198>)
 80041b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fd f93b 	bl	8001430 <HAL_InitTick>
  
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
 80041cc:	00001388 	.word	0x00001388
 80041d0:	fffff8ff 	.word	0xfffff8ff
 80041d4:	08005d90 	.word	0x08005d90
 80041d8:	20000004 	.word	0x20000004

080041dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b08f      	sub	sp, #60	; 0x3c
 80041e0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80041e2:	2314      	movs	r3, #20
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041ea:	c313      	stmia	r3!, {r0, r1, r4}
 80041ec:	6812      	ldr	r2, [r2, #0]
 80041ee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	4a2a      	ldr	r2, [pc, #168]	; (800429c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041f6:	c313      	stmia	r3!, {r0, r1, r4}
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004200:	2300      	movs	r3, #0
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
 8004204:	2300      	movs	r3, #0
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004210:	4b23      	ldr	r3, [pc, #140]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	220c      	movs	r2, #12
 800421a:	4013      	ands	r3, r2
 800421c:	2b04      	cmp	r3, #4
 800421e:	d002      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x4a>
 8004220:	2b08      	cmp	r3, #8
 8004222:	d003      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x50>
 8004224:	e02f      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004226:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800422a:	e02f      	b.n	800428c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	0c9b      	lsrs	r3, r3, #18
 8004230:	220f      	movs	r2, #15
 8004232:	4013      	ands	r3, r2
 8004234:	2214      	movs	r2, #20
 8004236:	18ba      	adds	r2, r7, r2
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	220f      	movs	r2, #15
 8004242:	4013      	ands	r3, r2
 8004244:	1d3a      	adds	r2, r7, #4
 8004246:	5cd3      	ldrb	r3, [r2, r3]
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800424a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424c:	23c0      	movs	r3, #192	; 0xc0
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	401a      	ands	r2, r3
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	025b      	lsls	r3, r3, #9
 8004256:	429a      	cmp	r2, r3
 8004258:	d109      	bne.n	800426e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800425a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800425c:	4811      	ldr	r0, [pc, #68]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800425e:	f7fb ff53 	bl	8000108 <__udivsi3>
 8004262:	0003      	movs	r3, r0
 8004264:	001a      	movs	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	4353      	muls	r3, r2
 800426a:	637b      	str	r3, [r7, #52]	; 0x34
 800426c:	e008      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800426e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004272:	f7fb ff49 	bl	8000108 <__udivsi3>
 8004276:	0003      	movs	r3, r0
 8004278:	001a      	movs	r2, r3
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	4353      	muls	r3, r2
 800427e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004284:	e002      	b.n	800428c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004286:	4b07      	ldr	r3, [pc, #28]	; (80042a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800428a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b00f      	add	sp, #60	; 0x3c
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	08005cec 	.word	0x08005cec
 800429c:	08005cfc 	.word	0x08005cfc
 80042a0:	40021000 	.word	0x40021000
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80042c0:	f7ff fff2 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042c4:	0001      	movs	r1, r0
 80042c6:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	2207      	movs	r2, #7
 80042ce:	4013      	ands	r3, r2
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d2:	5cd3      	ldrb	r3, [r2, r3]
 80042d4:	40d9      	lsrs	r1, r3
 80042d6:	000b      	movs	r3, r1
}    
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	40021000 	.word	0x40021000
 80042e4:	08005da0 	.word	0x08005da0

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	025b      	lsls	r3, r3, #9
 8004300:	4013      	ands	r3, r2
 8004302:	d100      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004304:	e08e      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2017      	movs	r0, #23
 8004308:	183b      	adds	r3, r7, r0
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b5f      	ldr	r3, [pc, #380]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	055b      	lsls	r3, r3, #21
 8004316:	4013      	ands	r3, r2
 8004318:	d110      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b5c      	ldr	r3, [pc, #368]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800431c:	69da      	ldr	r2, [r3, #28]
 800431e:	4b5b      	ldr	r3, [pc, #364]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	0549      	lsls	r1, r1, #21
 8004324:	430a      	orrs	r2, r1
 8004326:	61da      	str	r2, [r3, #28]
 8004328:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	055b      	lsls	r3, r3, #21
 8004330:	4013      	ands	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	183b      	adds	r3, r7, r0
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	4b54      	ldr	r3, [pc, #336]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4013      	ands	r3, r2
 8004346:	d11a      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004348:	4b51      	ldr	r3, [pc, #324]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	0049      	lsls	r1, r1, #1
 8004352:	430a      	orrs	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fd f8b1 	bl	80014bc <HAL_GetTick>
 800435a:	0003      	movs	r3, r0
 800435c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435e:	e008      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004360:	f7fd f8ac 	bl	80014bc <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	; 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e087      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d0f0      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800437e:	4b43      	ldr	r3, [pc, #268]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	23c0      	movs	r3, #192	; 0xc0
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4013      	ands	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d034      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	23c0      	movs	r3, #192	; 0xc0
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4013      	ands	r3, r2
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	429a      	cmp	r2, r3
 800439e:	d02c      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a0:	4b3a      	ldr	r3, [pc, #232]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a3b      	ldr	r2, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	4b37      	ldr	r3, [pc, #220]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0249      	lsls	r1, r1, #9
 80043b4:	430a      	orrs	r2, r1
 80043b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	4b34      	ldr	r3, [pc, #208]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043ba:	6a1a      	ldr	r2, [r3, #32]
 80043bc:	4b33      	ldr	r3, [pc, #204]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043be:	4936      	ldr	r1, [pc, #216]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043c4:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	4013      	ands	r3, r2
 80043d0:	d013      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d2:	f7fd f873 	bl	80014bc <HAL_GetTick>
 80043d6:	0003      	movs	r3, r0
 80043d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	e009      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fd f86e 	bl	80014bc <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e048      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	2202      	movs	r2, #2
 80043f6:	4013      	ands	r3, r2
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a25      	ldr	r2, [pc, #148]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004400:	4013      	ands	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800440a:	430a      	orrs	r2, r1
 800440c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800440e:	2317      	movs	r3, #23
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d105      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004418:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800441e:	4920      	ldr	r1, [pc, #128]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004420:	400a      	ands	r2, r1
 8004422:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2201      	movs	r2, #1
 800442a:	4013      	ands	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800442e:	4b17      	ldr	r3, [pc, #92]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	2203      	movs	r2, #3
 8004434:	4393      	bics	r3, r2
 8004436:	0019      	movs	r1, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800443e:	430a      	orrs	r2, r1
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2220      	movs	r2, #32
 8004448:	4013      	ands	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800444c:	4b0f      	ldr	r3, [pc, #60]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	2210      	movs	r2, #16
 8004452:	4393      	bics	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800445c:	430a      	orrs	r2, r1
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	029b      	lsls	r3, r3, #10
 8004468:	4013      	ands	r3, r2
 800446a:	d009      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446c:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	4393      	bics	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	4b04      	ldr	r3, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800447c:	430a      	orrs	r2, r1
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b006      	add	sp, #24
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
 8004494:	fffffcff 	.word	0xfffffcff
 8004498:	fffeffff 	.word	0xfffeffff
 800449c:	00001388 	.word	0x00001388
 80044a0:	efffffff 	.word	0xefffffff

080044a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e042      	b.n	800453c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223d      	movs	r2, #61	; 0x3d
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d107      	bne.n	80044d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	223c      	movs	r2, #60	; 0x3c
 80044c6:	2100      	movs	r1, #0
 80044c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fc fe05 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	223d      	movs	r2, #61	; 0x3d
 80044d6:	2102      	movs	r1, #2
 80044d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	0019      	movs	r1, r3
 80044e4:	0010      	movs	r0, r2
 80044e6:	f000 fab1 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2246      	movs	r2, #70	; 0x46
 80044ee:	2101      	movs	r1, #1
 80044f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223e      	movs	r2, #62	; 0x3e
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	223f      	movs	r2, #63	; 0x3f
 80044fe:	2101      	movs	r1, #1
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2240      	movs	r2, #64	; 0x40
 8004506:	2101      	movs	r1, #1
 8004508:	5499      	strb	r1, [r3, r2]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2241      	movs	r2, #65	; 0x41
 800450e:	2101      	movs	r1, #1
 8004510:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2242      	movs	r2, #66	; 0x42
 8004516:	2101      	movs	r1, #1
 8004518:	5499      	strb	r1, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2243      	movs	r2, #67	; 0x43
 800451e:	2101      	movs	r1, #1
 8004520:	5499      	strb	r1, [r3, r2]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2244      	movs	r2, #68	; 0x44
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2245      	movs	r2, #69	; 0x45
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	223d      	movs	r2, #61	; 0x3d
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b002      	add	sp, #8
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	223d      	movs	r2, #61	; 0x3d
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d001      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e035      	b.n	80045c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	223d      	movs	r2, #61	; 0x3d
 8004560:	2102      	movs	r1, #2
 8004562:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	430a      	orrs	r2, r1
 8004572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_TIM_Base_Start_IT+0x8c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x4e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <HAL_TIM_Base_Start_IT+0x90>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x4e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <HAL_TIM_Base_Start_IT+0x94>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d111      	bne.n	80045b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2207      	movs	r2, #7
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b06      	cmp	r3, #6
 80045a2:	d010      	beq.n	80045c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2101      	movs	r1, #1
 80045b0:	430a      	orrs	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	e007      	b.n	80045c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b004      	add	sp, #16
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40014000 	.word	0x40014000

080045dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	438a      	bics	r2, r1
 80045f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_TIM_Base_Stop_IT+0x54>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	d10d      	bne.n	800461c <HAL_TIM_Base_Stop_IT+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <HAL_TIM_Base_Stop_IT+0x58>)
 8004608:	4013      	ands	r3, r2
 800460a:	d107      	bne.n	800461c <HAL_TIM_Base_Stop_IT+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2101      	movs	r1, #1
 8004618:	438a      	bics	r2, r1
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	223d      	movs	r2, #61	; 0x3d
 8004620:	2101      	movs	r1, #1
 8004622:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	00001111 	.word	0x00001111
 8004634:	00000444 	.word	0x00000444

08004638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d124      	bne.n	8004698 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2202      	movs	r2, #2
 8004656:	4013      	ands	r3, r2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d11d      	bne.n	8004698 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2203      	movs	r2, #3
 8004662:	4252      	negs	r2, r2
 8004664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2203      	movs	r2, #3
 8004674:	4013      	ands	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 f9ce 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 8004680:	e007      	b.n	8004692 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f9c1 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f9cd 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d125      	bne.n	80046f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2204      	movs	r2, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d11e      	bne.n	80046f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2205      	movs	r2, #5
 80046ba:	4252      	negs	r2, r2
 80046bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	23c0      	movs	r3, #192	; 0xc0
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 f9a1 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 80046da:	e007      	b.n	80046ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 f994 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 f9a0 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2208      	movs	r2, #8
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d124      	bne.n	800474a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2208      	movs	r2, #8
 8004708:	4013      	ands	r3, r2
 800470a:	2b08      	cmp	r3, #8
 800470c:	d11d      	bne.n	800474a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2209      	movs	r2, #9
 8004714:	4252      	negs	r2, r2
 8004716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2204      	movs	r2, #4
 800471c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2203      	movs	r2, #3
 8004726:	4013      	ands	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 f975 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 8004732:	e007      	b.n	8004744 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 f968 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 f974 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2210      	movs	r2, #16
 8004752:	4013      	ands	r3, r2
 8004754:	2b10      	cmp	r3, #16
 8004756:	d125      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2210      	movs	r2, #16
 8004760:	4013      	ands	r3, r2
 8004762:	2b10      	cmp	r3, #16
 8004764:	d11e      	bne.n	80047a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2211      	movs	r2, #17
 800476c:	4252      	negs	r2, r2
 800476e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2208      	movs	r2, #8
 8004774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	23c0      	movs	r3, #192	; 0xc0
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4013      	ands	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	0018      	movs	r0, r3
 8004788:	f000 f948 	bl	8004a1c <HAL_TIM_IC_CaptureCallback>
 800478c:	e007      	b.n	800479e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f000 f93b 	bl	8004a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f000 f947 	bl	8004a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d10f      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d108      	bne.n	80047d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2202      	movs	r2, #2
 80047c6:	4252      	negs	r2, r2
 80047c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0018      	movs	r0, r3
 80047ce:	f7fc fa49 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	4013      	ands	r3, r2
 80047dc:	2b80      	cmp	r3, #128	; 0x80
 80047de:	d10f      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d108      	bne.n	8004800 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2281      	movs	r2, #129	; 0x81
 80047f4:	4252      	negs	r2, r2
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fa96 	bl	8004d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2240      	movs	r2, #64	; 0x40
 8004808:	4013      	ands	r3, r2
 800480a:	2b40      	cmp	r3, #64	; 0x40
 800480c:	d10f      	bne.n	800482e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2240      	movs	r2, #64	; 0x40
 8004816:	4013      	ands	r3, r2
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d108      	bne.n	800482e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2241      	movs	r2, #65	; 0x41
 8004822:	4252      	negs	r2, r2
 8004824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 f907 	bl	8004a3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2220      	movs	r2, #32
 8004836:	4013      	ands	r3, r2
 8004838:	2b20      	cmp	r3, #32
 800483a:	d10f      	bne.n	800485c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	4013      	ands	r3, r2
 8004846:	2b20      	cmp	r3, #32
 8004848:	d108      	bne.n	800485c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2221      	movs	r2, #33	; 0x21
 8004850:	4252      	negs	r2, r2
 8004852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fa60 	bl	8004d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	230f      	movs	r3, #15
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	223c      	movs	r2, #60	; 0x3c
 800487a:	5c9b      	ldrb	r3, [r3, r2]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIM_ConfigClockSource+0x20>
 8004880:	2302      	movs	r3, #2
 8004882:	e0bc      	b.n	80049fe <HAL_TIM_ConfigClockSource+0x19a>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	223c      	movs	r2, #60	; 0x3c
 8004888:	2101      	movs	r1, #1
 800488a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	223d      	movs	r2, #61	; 0x3d
 8004890:	2102      	movs	r1, #2
 8004892:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2277      	movs	r2, #119	; 0x77
 80048a0:	4393      	bics	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <HAL_TIM_ConfigClockSource+0x1a4>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2280      	movs	r2, #128	; 0x80
 80048ba:	0192      	lsls	r2, r2, #6
 80048bc:	4293      	cmp	r3, r2
 80048be:	d040      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0xde>
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	0192      	lsls	r2, r2, #6
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d900      	bls.n	80048ca <HAL_TIM_ConfigClockSource+0x66>
 80048c8:	e088      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	0152      	lsls	r2, r2, #5
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d100      	bne.n	80048d4 <HAL_TIM_ConfigClockSource+0x70>
 80048d2:	e088      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x182>
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	0152      	lsls	r2, r2, #5
 80048d8:	4293      	cmp	r3, r2
 80048da:	d900      	bls.n	80048de <HAL_TIM_ConfigClockSource+0x7a>
 80048dc:	e07e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048de:	2b70      	cmp	r3, #112	; 0x70
 80048e0:	d018      	beq.n	8004914 <HAL_TIM_ConfigClockSource+0xb0>
 80048e2:	d900      	bls.n	80048e6 <HAL_TIM_ConfigClockSource+0x82>
 80048e4:	e07a      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048e6:	2b60      	cmp	r3, #96	; 0x60
 80048e8:	d04f      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x126>
 80048ea:	d900      	bls.n	80048ee <HAL_TIM_ConfigClockSource+0x8a>
 80048ec:	e076      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048ee:	2b50      	cmp	r3, #80	; 0x50
 80048f0:	d03b      	beq.n	800496a <HAL_TIM_ConfigClockSource+0x106>
 80048f2:	d900      	bls.n	80048f6 <HAL_TIM_ConfigClockSource+0x92>
 80048f4:	e072      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d057      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x146>
 80048fa:	d900      	bls.n	80048fe <HAL_TIM_ConfigClockSource+0x9a>
 80048fc:	e06e      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 80048fe:	2b30      	cmp	r3, #48	; 0x30
 8004900:	d063      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x166>
 8004902:	d86b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d060      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x166>
 8004908:	d868      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d05d      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x166>
 800490e:	2b10      	cmp	r3, #16
 8004910:	d05b      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x166>
 8004912:	e063      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6818      	ldr	r0, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	6899      	ldr	r1, [r3, #8]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f000 f982 	bl	8004c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2277      	movs	r2, #119	; 0x77
 8004934:	4313      	orrs	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]
      break;
 8004940:	e052      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f000 f96b 	bl	8004c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	01c9      	lsls	r1, r1, #7
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e03e      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	001a      	movs	r2, r3
 8004978:	f000 f8de 	bl	8004b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2150      	movs	r1, #80	; 0x50
 8004982:	0018      	movs	r0, r3
 8004984:	f000 f938 	bl	8004bf8 <TIM_ITRx_SetConfig>
      break;
 8004988:	e02e      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	001a      	movs	r2, r3
 8004998:	f000 f8fc 	bl	8004b94 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2160      	movs	r1, #96	; 0x60
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 f928 	bl	8004bf8 <TIM_ITRx_SetConfig>
      break;
 80049a8:	e01e      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	001a      	movs	r2, r3
 80049b8:	f000 f8be 	bl	8004b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2140      	movs	r1, #64	; 0x40
 80049c2:	0018      	movs	r0, r3
 80049c4:	f000 f918 	bl	8004bf8 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e00e      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	0019      	movs	r1, r3
 80049d4:	0010      	movs	r0, r2
 80049d6:	f000 f90f 	bl	8004bf8 <TIM_ITRx_SetConfig>
      break;
 80049da:	e005      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80049dc:	230f      	movs	r3, #15
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2201      	movs	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
      break;
 80049e4:	e000      	b.n	80049e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80049e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	223d      	movs	r2, #61	; 0x3d
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	223c      	movs	r2, #60	; 0x3c
 80049f4:	2100      	movs	r1, #0
 80049f6:	5499      	strb	r1, [r3, r2]

  return status;
 80049f8:	230f      	movs	r3, #15
 80049fa:	18fb      	adds	r3, r7, r3
 80049fc:	781b      	ldrb	r3, [r3, #0]
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b004      	add	sp, #16
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	ffff00ff 	.word	0xffff00ff

08004a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a14:	46c0      	nop			; (mov r8, r8)
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b002      	add	sp, #8
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a44:	46c0      	nop			; (mov r8, r8)
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <TIM_Base_SetConfig+0xd0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x20>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2e      	ldr	r2, [pc, #184]	; (8004b20 <TIM_Base_SetConfig+0xd4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2270      	movs	r2, #112	; 0x70
 8004a70:	4393      	bics	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a26      	ldr	r2, [pc, #152]	; (8004b1c <TIM_Base_SetConfig+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d013      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <TIM_Base_SetConfig+0xd4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00f      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <TIM_Base_SetConfig+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00b      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <TIM_Base_SetConfig+0xdc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d007      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	; (8004b2c <TIM_Base_SetConfig+0xe0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d003      	beq.n	8004aae <TIM_Base_SetConfig+0x62>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a21      	ldr	r2, [pc, #132]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d108      	bne.n	8004ac0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a20      	ldr	r2, [pc, #128]	; (8004b34 <TIM_Base_SetConfig+0xe8>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2280      	movs	r2, #128	; 0x80
 8004ac4:	4393      	bics	r3, r2
 8004ac6:	001a      	movs	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <TIM_Base_SetConfig+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <TIM_Base_SetConfig+0xba>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a0d      	ldr	r2, [pc, #52]	; (8004b28 <TIM_Base_SetConfig+0xdc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d007      	beq.n	8004b06 <TIM_Base_SetConfig+0xba>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <TIM_Base_SetConfig+0xe0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d003      	beq.n	8004b06 <TIM_Base_SetConfig+0xba>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <TIM_Base_SetConfig+0xe4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d103      	bne.n	8004b0e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	615a      	str	r2, [r3, #20]
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b004      	add	sp, #16
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40002000 	.word	0x40002000
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	fffffcff 	.word	0xfffffcff

08004b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4393      	bics	r3, r2
 8004b52:	001a      	movs	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	22f0      	movs	r2, #240	; 0xf0
 8004b62:	4393      	bics	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	220a      	movs	r2, #10
 8004b74:	4393      	bics	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	621a      	str	r2, [r3, #32]
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b006      	add	sp, #24
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4393      	bics	r3, r2
 8004ba8:	001a      	movs	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <TIM_TI2_ConfigInputStage+0x60>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	031b      	lsls	r3, r3, #12
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	22a0      	movs	r2, #160	; 0xa0
 8004bd0:	4393      	bics	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b006      	add	sp, #24
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	ffff0fff 	.word	0xffff0fff

08004bf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2270      	movs	r2, #112	; 0x70
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	2207      	movs	r2, #7
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	609a      	str	r2, [r3, #8]
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	46bd      	mov	sp, r7
 8004c26:	b004      	add	sp, #16
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <TIM_ETR_SetConfig+0x3c>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	609a      	str	r2, [r3, #8]
}
 8004c60:	46c0      	nop			; (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b006      	add	sp, #24
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	ffff00ff 	.word	0xffff00ff

08004c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	223c      	movs	r2, #60	; 0x3c
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e041      	b.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	223c      	movs	r2, #60	; 0x3c
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	223d      	movs	r2, #61	; 0x3d
 8004c90:	2102      	movs	r1, #2
 8004c92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2270      	movs	r2, #112	; 0x70
 8004ca8:	4393      	bics	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d10c      	bne.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	223d      	movs	r2, #61	; 0x3d
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	223c      	movs	r2, #60	; 0x3c
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b004      	add	sp, #16
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40014000 	.word	0x40014000

08004d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e044      	b.n	8004dd8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d107      	bne.n	8004d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2274      	movs	r2, #116	; 0x74
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fc f9e1 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2224      	movs	r2, #36	; 0x24
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2101      	movs	r1, #1
 8004d78:	438a      	bics	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fbb6 	bl	80054f0 <UART_SetConfig>
 8004d84:	0003      	movs	r3, r0
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e024      	b.n	8004dd8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fd01 	bl	80057a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	490d      	ldr	r1, [pc, #52]	; (8004de0 <HAL_UART_Init+0xa4>)
 8004daa:	400a      	ands	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2108      	movs	r1, #8
 8004dba:	438a      	bics	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f000 fd99 	bl	8005908 <UART_CheckIdleState>
 8004dd6:	0003      	movs	r3, r0
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	fffff7ff 	.word	0xfffff7ff

08004de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	1dbb      	adds	r3, r7, #6
 8004df2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d000      	beq.n	8004dfe <HAL_UART_Transmit+0x1a>
 8004dfc:	e096      	b.n	8004f2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_UART_Transmit+0x28>
 8004e04:	1dbb      	adds	r3, r7, #6
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e08e      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d109      	bne.n	8004e30 <HAL_UART_Transmit+0x4c>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2201      	movs	r2, #1
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d001      	beq.n	8004e30 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e07e      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2274      	movs	r2, #116	; 0x74
 8004e34:	5c9b      	ldrb	r3, [r3, r2]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Transmit+0x5a>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e077      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2274      	movs	r2, #116	; 0x74
 8004e42:	2101      	movs	r1, #1
 8004e44:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2221      	movs	r2, #33	; 0x21
 8004e52:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e54:	f7fc fb32 	bl	80014bc <HAL_GetTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1dba      	adds	r2, r7, #6
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	8812      	ldrh	r2, [r2, #0]
 8004e64:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1dba      	adds	r2, r7, #6
 8004e6a:	2152      	movs	r1, #82	; 0x52
 8004e6c:	8812      	ldrh	r2, [r2, #0]
 8004e6e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	015b      	lsls	r3, r3, #5
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d108      	bne.n	8004e8e <HAL_UART_Transmit+0xaa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d104      	bne.n	8004e8e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e003      	b.n	8004e96 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2274      	movs	r2, #116	; 0x74
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004e9e:	e02d      	b.n	8004efc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	0013      	movs	r3, r2
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	f000 fd73 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8004eb2:	1e03      	subs	r3, r0, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e039      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	881a      	ldrh	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	05d2      	lsls	r2, r2, #23
 8004eca:	0dd2      	lsrs	r2, r2, #23
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e008      	b.n	8004eea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2252      	movs	r2, #82	; 0x52
 8004eee:	5a9b      	ldrh	r3, [r3, r2]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2252      	movs	r2, #82	; 0x52
 8004efa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2252      	movs	r2, #82	; 0x52
 8004f00:	5a9b      	ldrh	r3, [r3, r2]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1cb      	bne.n	8004ea0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	0013      	movs	r3, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	f000 fd3f 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8004f1a:	1e03      	subs	r3, r0, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e005      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b008      	add	sp, #32
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b0ab      	sub	sp, #172	; 0xac
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	22a4      	movs	r2, #164	; 0xa4
 8004f48:	18b9      	adds	r1, r7, r2
 8004f4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	20a0      	movs	r0, #160	; 0xa0
 8004f54:	1839      	adds	r1, r7, r0
 8004f56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	219c      	movs	r1, #156	; 0x9c
 8004f60:	1879      	adds	r1, r7, r1
 8004f62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f64:	0011      	movs	r1, r2
 8004f66:	18bb      	adds	r3, r7, r2
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a99      	ldr	r2, [pc, #612]	; (80051d0 <HAL_UART_IRQHandler+0x298>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2298      	movs	r2, #152	; 0x98
 8004f70:	18bc      	adds	r4, r7, r2
 8004f72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004f74:	18bb      	adds	r3, r7, r2
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d114      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f7c:	187b      	adds	r3, r7, r1
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2220      	movs	r2, #32
 8004f82:	4013      	ands	r3, r2
 8004f84:	d00f      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f86:	183b      	adds	r3, r7, r0
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d100      	bne.n	8004f9a <HAL_UART_IRQHandler+0x62>
 8004f98:	e27e      	b.n	8005498 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	0010      	movs	r0, r2
 8004fa2:	4798      	blx	r3
      }
      return;
 8004fa4:	e278      	b.n	8005498 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004fa6:	2398      	movs	r3, #152	; 0x98
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d100      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x7a>
 8004fb0:	e114      	b.n	80051dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004fb2:	239c      	movs	r3, #156	; 0x9c
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d106      	bne.n	8004fcc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004fbe:	23a0      	movs	r3, #160	; 0xa0
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <HAL_UART_IRQHandler+0x29c>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	d100      	bne.n	8004fcc <HAL_UART_IRQHandler+0x94>
 8004fca:	e107      	b.n	80051dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fcc:	23a4      	movs	r3, #164	; 0xa4
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d012      	beq.n	8004ffe <HAL_UART_IRQHandler+0xc6>
 8004fd8:	23a0      	movs	r3, #160	; 0xa0
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	589b      	ldr	r3, [r3, r2]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ffe:	23a4      	movs	r3, #164	; 0xa4
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2202      	movs	r2, #2
 8005006:	4013      	ands	r3, r2
 8005008:	d011      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
 800500a:	239c      	movs	r3, #156	; 0x9c
 800500c:	18fb      	adds	r3, r7, r3
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2201      	movs	r2, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2202      	movs	r2, #2
 800501c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2280      	movs	r2, #128	; 0x80
 8005022:	589b      	ldr	r3, [r3, r2]
 8005024:	2204      	movs	r2, #4
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2180      	movs	r1, #128	; 0x80
 800502c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800502e:	23a4      	movs	r3, #164	; 0xa4
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2204      	movs	r2, #4
 8005036:	4013      	ands	r3, r2
 8005038:	d011      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
 800503a:	239c      	movs	r3, #156	; 0x9c
 800503c:	18fb      	adds	r3, r7, r3
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	4013      	ands	r3, r2
 8005044:	d00b      	beq.n	800505e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2204      	movs	r2, #4
 800504c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	589b      	ldr	r3, [r3, r2]
 8005054:	2202      	movs	r2, #2
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2180      	movs	r1, #128	; 0x80
 800505c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800505e:	23a4      	movs	r3, #164	; 0xa4
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2208      	movs	r2, #8
 8005066:	4013      	ands	r3, r2
 8005068:	d017      	beq.n	800509a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800506a:	23a0      	movs	r3, #160	; 0xa0
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2220      	movs	r2, #32
 8005072:	4013      	ands	r3, r2
 8005074:	d105      	bne.n	8005082 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005076:	239c      	movs	r3, #156	; 0x9c
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2201      	movs	r2, #1
 800507e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2208      	movs	r2, #8
 8005088:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2280      	movs	r2, #128	; 0x80
 800508e:	589b      	ldr	r3, [r3, r2]
 8005090:	2208      	movs	r2, #8
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800509a:	23a4      	movs	r3, #164	; 0xa4
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	4013      	ands	r3, r2
 80050a6:	d013      	beq.n	80050d0 <HAL_UART_IRQHandler+0x198>
 80050a8:	23a0      	movs	r3, #160	; 0xa0
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	04db      	lsls	r3, r3, #19
 80050b2:	4013      	ands	r3, r2
 80050b4:	d00c      	beq.n	80050d0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	0112      	lsls	r2, r2, #4
 80050be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2280      	movs	r2, #128	; 0x80
 80050c4:	589b      	ldr	r3, [r3, r2]
 80050c6:	2220      	movs	r2, #32
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2180      	movs	r1, #128	; 0x80
 80050ce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	589b      	ldr	r3, [r3, r2]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d100      	bne.n	80050dc <HAL_UART_IRQHandler+0x1a4>
 80050da:	e1df      	b.n	800549c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050dc:	23a4      	movs	r3, #164	; 0xa4
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2220      	movs	r2, #32
 80050e4:	4013      	ands	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050e8:	23a0      	movs	r3, #160	; 0xa0
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2220      	movs	r2, #32
 80050f0:	4013      	ands	r3, r2
 80050f2:	d008      	beq.n	8005106 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	0010      	movs	r0, r2
 8005104:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2280      	movs	r2, #128	; 0x80
 800510a:	589b      	ldr	r3, [r3, r2]
 800510c:	2194      	movs	r1, #148	; 0x94
 800510e:	187a      	adds	r2, r7, r1
 8005110:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2240      	movs	r2, #64	; 0x40
 800511a:	4013      	ands	r3, r2
 800511c:	2b40      	cmp	r3, #64	; 0x40
 800511e:	d004      	beq.n	800512a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005120:	187b      	adds	r3, r7, r1
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2228      	movs	r2, #40	; 0x28
 8005126:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005128:	d047      	beq.n	80051ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	0018      	movs	r0, r3
 800512e:	f000 fcf7 	bl	8005b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4013      	ands	r3, r2
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d137      	bne.n	80051b0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005148:	2090      	movs	r0, #144	; 0x90
 800514a:	183a      	adds	r2, r7, r0
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	2301      	movs	r3, #1
 8005150:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2140      	movs	r1, #64	; 0x40
 8005166:	438a      	bics	r2, r1
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	183b      	adds	r3, r7, r0
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <HAL_UART_IRQHandler+0x2a0>)
 8005186:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	0018      	movs	r0, r3
 800518e:	f7fd f991 	bl	80024b4 <HAL_DMA_Abort_IT>
 8005192:	1e03      	subs	r3, r0, #0
 8005194:	d01a      	beq.n	80051cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	0018      	movs	r0, r3
 80051a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e012      	b.n	80051cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f98d 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ae:	e00d      	b.n	80051cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f988 	bl	80054c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b8:	e008      	b.n	80051cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f983 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	2100      	movs	r1, #0
 80051c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80051ca:	e167      	b.n	800549c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051cc:	46c0      	nop			; (mov r8, r8)
    return;
 80051ce:	e165      	b.n	800549c <HAL_UART_IRQHandler+0x564>
 80051d0:	0000080f 	.word	0x0000080f
 80051d4:	04000120 	.word	0x04000120
 80051d8:	08005be5 	.word	0x08005be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d000      	beq.n	80051e6 <HAL_UART_IRQHandler+0x2ae>
 80051e4:	e131      	b.n	800544a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051e6:	23a4      	movs	r3, #164	; 0xa4
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2210      	movs	r2, #16
 80051ee:	4013      	ands	r3, r2
 80051f0:	d100      	bne.n	80051f4 <HAL_UART_IRQHandler+0x2bc>
 80051f2:	e12a      	b.n	800544a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051f4:	23a0      	movs	r3, #160	; 0xa0
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2210      	movs	r2, #16
 80051fc:	4013      	ands	r3, r2
 80051fe:	d100      	bne.n	8005202 <HAL_UART_IRQHandler+0x2ca>
 8005200:	e123      	b.n	800544a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2210      	movs	r2, #16
 8005208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2240      	movs	r2, #64	; 0x40
 8005212:	4013      	ands	r3, r2
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d000      	beq.n	800521a <HAL_UART_IRQHandler+0x2e2>
 8005218:	e09b      	b.n	8005352 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	217e      	movs	r1, #126	; 0x7e
 8005224:	187b      	adds	r3, r7, r1
 8005226:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005228:	187b      	adds	r3, r7, r1
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d100      	bne.n	8005232 <HAL_UART_IRQHandler+0x2fa>
 8005230:	e136      	b.n	80054a0 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2258      	movs	r2, #88	; 0x58
 8005236:	5a9b      	ldrh	r3, [r3, r2]
 8005238:	187a      	adds	r2, r7, r1
 800523a:	8812      	ldrh	r2, [r2, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d300      	bcc.n	8005242 <HAL_UART_IRQHandler+0x30a>
 8005240:	e12e      	b.n	80054a0 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	187a      	adds	r2, r7, r1
 8005246:	215a      	movs	r1, #90	; 0x5a
 8005248:	8812      	ldrh	r2, [r2, #0]
 800524a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d06e      	beq.n	8005334 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005256:	f3ef 8310 	mrs	r3, PRIMASK
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800525e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005260:	2301      	movs	r3, #1
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	498e      	ldr	r1, [pc, #568]	; (80054b0 <HAL_UART_IRQHandler+0x578>)
 8005278:	400a      	ands	r2, r1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	677b      	str	r3, [r7, #116]	; 0x74
 8005292:	2301      	movs	r3, #1
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2101      	movs	r1, #1
 80052aa:	438a      	bics	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
 80052ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b4:	f383 8810 	msr	PRIMASK, r3
}
 80052b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80052c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	673b      	str	r3, [r7, #112]	; 0x70
 80052c4:	2301      	movs	r3, #1
 80052c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2140      	movs	r1, #64	; 0x40
 80052dc:	438a      	bics	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f8:	f3ef 8310 	mrs	r3, PRIMASK
 80052fc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80052fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005302:	2301      	movs	r3, #1
 8005304:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005308:	f383 8810 	msr	PRIMASK, r3
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2110      	movs	r1, #16
 800531a:	438a      	bics	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005320:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	f383 8810 	msr	PRIMASK, r3
}
 8005328:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	0018      	movs	r0, r3
 8005330:	f7fd f888 	bl	8002444 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2258      	movs	r2, #88	; 0x58
 8005338:	5a9a      	ldrh	r2, [r3, r2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	215a      	movs	r1, #90	; 0x5a
 800533e:	5a5b      	ldrh	r3, [r3, r1]
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b29a      	uxth	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0011      	movs	r1, r2
 800534a:	0018      	movs	r0, r3
 800534c:	f000 f8c4 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005350:	e0a6      	b.n	80054a0 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2258      	movs	r2, #88	; 0x58
 8005356:	5a99      	ldrh	r1, [r3, r2]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	225a      	movs	r2, #90	; 0x5a
 800535c:	5a9b      	ldrh	r3, [r3, r2]
 800535e:	b29a      	uxth	r2, r3
 8005360:	208e      	movs	r0, #142	; 0x8e
 8005362:	183b      	adds	r3, r7, r0
 8005364:	1a8a      	subs	r2, r1, r2
 8005366:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	225a      	movs	r2, #90	; 0x5a
 800536c:	5a9b      	ldrh	r3, [r3, r2]
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d100      	bne.n	8005376 <HAL_UART_IRQHandler+0x43e>
 8005374:	e096      	b.n	80054a4 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8005376:	183b      	adds	r3, r7, r0
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d100      	bne.n	8005380 <HAL_UART_IRQHandler+0x448>
 800537e:	e091      	b.n	80054a4 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005380:	f3ef 8310 	mrs	r3, PRIMASK
 8005384:	60fb      	str	r3, [r7, #12]
  return(result);
 8005386:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005388:	2488      	movs	r4, #136	; 0x88
 800538a:	193a      	adds	r2, r7, r4
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	2301      	movs	r3, #1
 8005390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f383 8810 	msr	PRIMASK, r3
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4943      	ldr	r1, [pc, #268]	; (80054b4 <HAL_UART_IRQHandler+0x57c>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b8:	f3ef 8310 	mrs	r3, PRIMASK
 80053bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80053be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	2484      	movs	r4, #132	; 0x84
 80053c2:	193a      	adds	r2, r7, r4
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	2301      	movs	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f383 8810 	msr	PRIMASK, r3
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2101      	movs	r1, #1
 80053de:	438a      	bics	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	f383 8810 	msr	PRIMASK, r3
}
 80053ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005402:	f3ef 8310 	mrs	r3, PRIMASK
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540a:	2480      	movs	r4, #128	; 0x80
 800540c:	193a      	adds	r2, r7, r4
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	2301      	movs	r3, #1
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2110      	movs	r1, #16
 8005428:	438a      	bics	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	193b      	adds	r3, r7, r4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543a:	183b      	adds	r3, r7, r0
 800543c:	881a      	ldrh	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0011      	movs	r1, r2
 8005442:	0018      	movs	r0, r3
 8005444:	f000 f848 	bl	80054d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005448:	e02c      	b.n	80054a4 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800544a:	23a4      	movs	r3, #164	; 0xa4
 800544c:	18fb      	adds	r3, r7, r3
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	4013      	ands	r3, r2
 8005454:	d00f      	beq.n	8005476 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005456:	23a0      	movs	r3, #160	; 0xa0
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2280      	movs	r2, #128	; 0x80
 800545e:	4013      	ands	r3, r2
 8005460:	d009      	beq.n	8005476 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01e      	beq.n	80054a8 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	0010      	movs	r0, r2
 8005472:	4798      	blx	r3
    }
    return;
 8005474:	e018      	b.n	80054a8 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005476:	23a4      	movs	r3, #164	; 0xa4
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	4013      	ands	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_UART_IRQHandler+0x572>
 8005482:	23a0      	movs	r3, #160	; 0xa0
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2240      	movs	r2, #64	; 0x40
 800548a:	4013      	ands	r3, r2
 800548c:	d00d      	beq.n	80054aa <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f000 fbbe 	bl	8005c12 <UART_EndTransmit_IT>
    return;
 8005496:	e008      	b.n	80054aa <HAL_UART_IRQHandler+0x572>
      return;
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	e006      	b.n	80054aa <HAL_UART_IRQHandler+0x572>
    return;
 800549c:	46c0      	nop			; (mov r8, r8)
 800549e:	e004      	b.n	80054aa <HAL_UART_IRQHandler+0x572>
      return;
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	e002      	b.n	80054aa <HAL_UART_IRQHandler+0x572>
      return;
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	e000      	b.n	80054aa <HAL_UART_IRQHandler+0x572>
    return;
 80054a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b02b      	add	sp, #172	; 0xac
 80054ae:	bd90      	pop	{r4, r7, pc}
 80054b0:	fffffeff 	.word	0xfffffeff
 80054b4:	fffffedf 	.word	0xfffffedf

080054b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	000a      	movs	r2, r1
 80054e2:	1cbb      	adds	r3, r7, #2
 80054e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b002      	add	sp, #8
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054f8:	231e      	movs	r3, #30
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a97      	ldr	r2, [pc, #604]	; (800577c <UART_SetConfig+0x28c>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a92      	ldr	r2, [pc, #584]	; (8005780 <UART_SetConfig+0x290>)
 8005536:	4013      	ands	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a89      	ldr	r2, [pc, #548]	; (8005784 <UART_SetConfig+0x294>)
 800555e:	4013      	ands	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a85      	ldr	r2, [pc, #532]	; (8005788 <UART_SetConfig+0x298>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d127      	bne.n	80055c6 <UART_SetConfig+0xd6>
 8005576:	4b85      	ldr	r3, [pc, #532]	; (800578c <UART_SetConfig+0x29c>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	2203      	movs	r2, #3
 800557c:	4013      	ands	r3, r2
 800557e:	2b03      	cmp	r3, #3
 8005580:	d00d      	beq.n	800559e <UART_SetConfig+0xae>
 8005582:	d81b      	bhi.n	80055bc <UART_SetConfig+0xcc>
 8005584:	2b02      	cmp	r3, #2
 8005586:	d014      	beq.n	80055b2 <UART_SetConfig+0xc2>
 8005588:	d818      	bhi.n	80055bc <UART_SetConfig+0xcc>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <UART_SetConfig+0xa4>
 800558e:	2b01      	cmp	r3, #1
 8005590:	d00a      	beq.n	80055a8 <UART_SetConfig+0xb8>
 8005592:	e013      	b.n	80055bc <UART_SetConfig+0xcc>
 8005594:	231f      	movs	r3, #31
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e035      	b.n	800560a <UART_SetConfig+0x11a>
 800559e:	231f      	movs	r3, #31
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	2202      	movs	r2, #2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	e030      	b.n	800560a <UART_SetConfig+0x11a>
 80055a8:	231f      	movs	r3, #31
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	2204      	movs	r2, #4
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e02b      	b.n	800560a <UART_SetConfig+0x11a>
 80055b2:	231f      	movs	r3, #31
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2208      	movs	r2, #8
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e026      	b.n	800560a <UART_SetConfig+0x11a>
 80055bc:	231f      	movs	r3, #31
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2210      	movs	r2, #16
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e021      	b.n	800560a <UART_SetConfig+0x11a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a71      	ldr	r2, [pc, #452]	; (8005790 <UART_SetConfig+0x2a0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d104      	bne.n	80055da <UART_SetConfig+0xea>
 80055d0:	231f      	movs	r3, #31
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e017      	b.n	800560a <UART_SetConfig+0x11a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a6d      	ldr	r2, [pc, #436]	; (8005794 <UART_SetConfig+0x2a4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d104      	bne.n	80055ee <UART_SetConfig+0xfe>
 80055e4:	231f      	movs	r3, #31
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	e00d      	b.n	800560a <UART_SetConfig+0x11a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a69      	ldr	r2, [pc, #420]	; (8005798 <UART_SetConfig+0x2a8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d104      	bne.n	8005602 <UART_SetConfig+0x112>
 80055f8:	231f      	movs	r3, #31
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	e003      	b.n	800560a <UART_SetConfig+0x11a>
 8005602:	231f      	movs	r3, #31
 8005604:	18fb      	adds	r3, r7, r3
 8005606:	2210      	movs	r2, #16
 8005608:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	2380      	movs	r3, #128	; 0x80
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	429a      	cmp	r2, r3
 8005614:	d15d      	bne.n	80056d2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8005616:	231f      	movs	r3, #31
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d015      	beq.n	800564c <UART_SetConfig+0x15c>
 8005620:	dc18      	bgt.n	8005654 <UART_SetConfig+0x164>
 8005622:	2b04      	cmp	r3, #4
 8005624:	d00d      	beq.n	8005642 <UART_SetConfig+0x152>
 8005626:	dc15      	bgt.n	8005654 <UART_SetConfig+0x164>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <UART_SetConfig+0x142>
 800562c:	2b02      	cmp	r3, #2
 800562e:	d005      	beq.n	800563c <UART_SetConfig+0x14c>
 8005630:	e010      	b.n	8005654 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005632:	f7fe fe43 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8005636:	0003      	movs	r3, r0
 8005638:	61bb      	str	r3, [r7, #24]
        break;
 800563a:	e012      	b.n	8005662 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800563c:	4b57      	ldr	r3, [pc, #348]	; (800579c <UART_SetConfig+0x2ac>)
 800563e:	61bb      	str	r3, [r7, #24]
        break;
 8005640:	e00f      	b.n	8005662 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005642:	f7fe fdcb 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005646:	0003      	movs	r3, r0
 8005648:	61bb      	str	r3, [r7, #24]
        break;
 800564a:	e00a      	b.n	8005662 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564c:	2380      	movs	r3, #128	; 0x80
 800564e:	021b      	lsls	r3, r3, #8
 8005650:	61bb      	str	r3, [r7, #24]
        break;
 8005652:	e006      	b.n	8005662 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005658:	231e      	movs	r3, #30
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
        break;
 8005660:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d100      	bne.n	800566a <UART_SetConfig+0x17a>
 8005668:	e07b      	b.n	8005762 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	005a      	lsls	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	18d2      	adds	r2, r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	0019      	movs	r1, r3
 800567c:	0010      	movs	r0, r2
 800567e:	f7fa fd43 	bl	8000108 <__udivsi3>
 8005682:	0003      	movs	r3, r0
 8005684:	b29b      	uxth	r3, r3
 8005686:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	d91c      	bls.n	80056c8 <UART_SetConfig+0x1d8>
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	025b      	lsls	r3, r3, #9
 8005694:	429a      	cmp	r2, r3
 8005696:	d217      	bcs.n	80056c8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	b29a      	uxth	r2, r3
 800569c:	200e      	movs	r0, #14
 800569e:	183b      	adds	r3, r7, r0
 80056a0:	210f      	movs	r1, #15
 80056a2:	438a      	bics	r2, r1
 80056a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	085b      	lsrs	r3, r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2207      	movs	r2, #7
 80056ae:	4013      	ands	r3, r2
 80056b0:	b299      	uxth	r1, r3
 80056b2:	183b      	adds	r3, r7, r0
 80056b4:	183a      	adds	r2, r7, r0
 80056b6:	8812      	ldrh	r2, [r2, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	183a      	adds	r2, r7, r0
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e04c      	b.n	8005762 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80056c8:	231e      	movs	r3, #30
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e047      	b.n	8005762 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056d2:	231f      	movs	r3, #31
 80056d4:	18fb      	adds	r3, r7, r3
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d015      	beq.n	8005708 <UART_SetConfig+0x218>
 80056dc:	dc18      	bgt.n	8005710 <UART_SetConfig+0x220>
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00d      	beq.n	80056fe <UART_SetConfig+0x20e>
 80056e2:	dc15      	bgt.n	8005710 <UART_SetConfig+0x220>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <UART_SetConfig+0x1fe>
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d005      	beq.n	80056f8 <UART_SetConfig+0x208>
 80056ec:	e010      	b.n	8005710 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7fe fde5 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 80056f2:	0003      	movs	r3, r0
 80056f4:	61bb      	str	r3, [r7, #24]
        break;
 80056f6:	e012      	b.n	800571e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b28      	ldr	r3, [pc, #160]	; (800579c <UART_SetConfig+0x2ac>)
 80056fa:	61bb      	str	r3, [r7, #24]
        break;
 80056fc:	e00f      	b.n	800571e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fd6d 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8005702:	0003      	movs	r3, r0
 8005704:	61bb      	str	r3, [r7, #24]
        break;
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005708:	2380      	movs	r3, #128	; 0x80
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	61bb      	str	r3, [r7, #24]
        break;
 800570e:	e006      	b.n	800571e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005714:	231e      	movs	r3, #30
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
        break;
 800571c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01e      	beq.n	8005762 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085a      	lsrs	r2, r3, #1
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	18d2      	adds	r2, r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0019      	movs	r1, r3
 8005734:	0010      	movs	r0, r2
 8005736:	f7fa fce7 	bl	8000108 <__udivsi3>
 800573a:	0003      	movs	r3, r0
 800573c:	b29b      	uxth	r3, r3
 800573e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	d909      	bls.n	800575a <UART_SetConfig+0x26a>
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	025b      	lsls	r3, r3, #9
 800574c:	429a      	cmp	r2, r3
 800574e:	d204      	bcs.n	800575a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	60da      	str	r2, [r3, #12]
 8005758:	e003      	b.n	8005762 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800575a:	231e      	movs	r3, #30
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800576e:	231e      	movs	r3, #30
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781b      	ldrb	r3, [r3, #0]
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	b008      	add	sp, #32
 800577a:	bd80      	pop	{r7, pc}
 800577c:	efff69f3 	.word	0xefff69f3
 8005780:	ffffcfff 	.word	0xffffcfff
 8005784:	fffff4ff 	.word	0xfffff4ff
 8005788:	40013800 	.word	0x40013800
 800578c:	40021000 	.word	0x40021000
 8005790:	40004400 	.word	0x40004400
 8005794:	40004800 	.word	0x40004800
 8005798:	40004c00 	.word	0x40004c00
 800579c:	007a1200 	.word	0x007a1200

080057a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	2201      	movs	r2, #1
 80057ae:	4013      	ands	r3, r2
 80057b0:	d00b      	beq.n	80057ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	4a4a      	ldr	r2, [pc, #296]	; (80058e4 <UART_AdvFeatureConfig+0x144>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2202      	movs	r2, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	d00b      	beq.n	80057ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4a43      	ldr	r2, [pc, #268]	; (80058e8 <UART_AdvFeatureConfig+0x148>)
 80057dc:	4013      	ands	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2204      	movs	r2, #4
 80057f2:	4013      	ands	r3, r2
 80057f4:	d00b      	beq.n	800580e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a3b      	ldr	r2, [pc, #236]	; (80058ec <UART_AdvFeatureConfig+0x14c>)
 80057fe:	4013      	ands	r3, r2
 8005800:	0019      	movs	r1, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2208      	movs	r2, #8
 8005814:	4013      	ands	r3, r2
 8005816:	d00b      	beq.n	8005830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4a34      	ldr	r2, [pc, #208]	; (80058f0 <UART_AdvFeatureConfig+0x150>)
 8005820:	4013      	ands	r3, r2
 8005822:	0019      	movs	r1, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2210      	movs	r2, #16
 8005836:	4013      	ands	r3, r2
 8005838:	d00b      	beq.n	8005852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a2c      	ldr	r2, [pc, #176]	; (80058f4 <UART_AdvFeatureConfig+0x154>)
 8005842:	4013      	ands	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2220      	movs	r2, #32
 8005858:	4013      	ands	r3, r2
 800585a:	d00b      	beq.n	8005874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <UART_AdvFeatureConfig+0x158>)
 8005864:	4013      	ands	r3, r2
 8005866:	0019      	movs	r1, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2240      	movs	r2, #64	; 0x40
 800587a:	4013      	ands	r3, r2
 800587c:	d01d      	beq.n	80058ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <UART_AdvFeatureConfig+0x15c>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	035b      	lsls	r3, r3, #13
 800589e:	429a      	cmp	r2, r3
 80058a0:	d10b      	bne.n	80058ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <UART_AdvFeatureConfig+0x160>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	0019      	movs	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2280      	movs	r2, #128	; 0x80
 80058c0:	4013      	ands	r3, r2
 80058c2:	d00b      	beq.n	80058dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a0e      	ldr	r2, [pc, #56]	; (8005904 <UART_AdvFeatureConfig+0x164>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  }
}
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	46bd      	mov	sp, r7
 80058e0:	b002      	add	sp, #8
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	fffdffff 	.word	0xfffdffff
 80058e8:	fffeffff 	.word	0xfffeffff
 80058ec:	fffbffff 	.word	0xfffbffff
 80058f0:	ffff7fff 	.word	0xffff7fff
 80058f4:	ffffefff 	.word	0xffffefff
 80058f8:	ffffdfff 	.word	0xffffdfff
 80058fc:	ffefffff 	.word	0xffefffff
 8005900:	ff9fffff 	.word	0xff9fffff
 8005904:	fff7ffff 	.word	0xfff7ffff

08005908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	2100      	movs	r1, #0
 8005916:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005918:	f7fb fdd0 	bl	80014bc <HAL_GetTick>
 800591c:	0003      	movs	r3, r0
 800591e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2208      	movs	r2, #8
 8005928:	4013      	ands	r3, r2
 800592a:	2b08      	cmp	r3, #8
 800592c:	d10c      	bne.n	8005948 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	0391      	lsls	r1, r2, #14
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4a17      	ldr	r2, [pc, #92]	; (8005994 <UART_CheckIdleState+0x8c>)
 8005938:	9200      	str	r2, [sp, #0]
 800593a:	2200      	movs	r2, #0
 800593c:	f000 f82c 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8005940:	1e03      	subs	r3, r0, #0
 8005942:	d001      	beq.n	8005948 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e021      	b.n	800598c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2204      	movs	r2, #4
 8005950:	4013      	ands	r3, r2
 8005952:	2b04      	cmp	r3, #4
 8005954:	d10c      	bne.n	8005970 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	03d1      	lsls	r1, r2, #15
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4a0d      	ldr	r2, [pc, #52]	; (8005994 <UART_CheckIdleState+0x8c>)
 8005960:	9200      	str	r2, [sp, #0]
 8005962:	2200      	movs	r2, #0
 8005964:	f000 f818 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8005968:	1e03      	subs	r3, r0, #0
 800596a:	d001      	beq.n	8005970 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e00d      	b.n	800598c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2274      	movs	r2, #116	; 0x74
 8005986:	2100      	movs	r1, #0
 8005988:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b004      	add	sp, #16
 8005992:	bd80      	pop	{r7, pc}
 8005994:	01ffffff 	.word	0x01ffffff

08005998 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b094      	sub	sp, #80	; 0x50
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	1dfb      	adds	r3, r7, #7
 80059a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	e0a3      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ac:	3301      	adds	r3, #1
 80059ae:	d100      	bne.n	80059b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80059b0:	e09f      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fb fd83 	bl	80014bc <HAL_GetTick>
 80059b6:	0002      	movs	r2, r0
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d13d      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c8:	f3ef 8310 	mrs	r3, PRIMASK
 80059cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
 80059d2:	2301      	movs	r3, #1
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	f383 8810 	msr	PRIMASK, r3
}
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	494c      	ldr	r1, [pc, #304]	; (8005b1c <UART_WaitOnFlagUntilTimeout+0x184>)
 80059ea:	400a      	ands	r2, r1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	f383 8810 	msr	PRIMASK, r3
}
 80059f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fa:	f3ef 8310 	mrs	r3, PRIMASK
 80059fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a02:	643b      	str	r3, [r7, #64]	; 0x40
 8005a04:	2301      	movs	r3, #1
 8005a06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	f383 8810 	msr	PRIMASK, r3
}
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	438a      	bics	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a26:	f383 8810 	msr	PRIMASK, r3
}
 8005a2a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2274      	movs	r2, #116	; 0x74
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e067      	b.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d050      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d146      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a72:	613b      	str	r3, [r7, #16]
  return(result);
 8005a74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f383 8810 	msr	PRIMASK, r3
}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4923      	ldr	r1, [pc, #140]	; (8005b1c <UART_WaitOnFlagUntilTimeout+0x184>)
 8005a90:	400a      	ands	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f383 8810 	msr	PRIMASK, r3
}
 8005a9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aa6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aaa:	2301      	movs	r3, #1
 8005aac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			; (mov r8, r8)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	2120      	movs	r1, #32
 8005ae4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2274      	movs	r2, #116	; 0x74
 8005aea:	2100      	movs	r1, #0
 8005aec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e010      	b.n	8005b14 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	425a      	negs	r2, r3
 8005b02:	4153      	adcs	r3, r2
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	001a      	movs	r2, r3
 8005b08:	1dfb      	adds	r3, r7, #7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d100      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005b10:	e74b      	b.n	80059aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b014      	add	sp, #80	; 0x50
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	fffffe5f 	.word	0xfffffe5f

08005b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08e      	sub	sp, #56	; 0x38
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b28:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4925      	ldr	r1, [pc, #148]	; (8005be0 <UART_EndRxTransfer+0xc0>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b5e:	623b      	str	r3, [r7, #32]
  return(result);
 8005b60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	633b      	str	r3, [r7, #48]	; 0x30
 8005b64:	2301      	movs	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689a      	ldr	r2, [r3, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	438a      	bics	r2, r1
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	f383 8810 	msr	PRIMASK, r3
}
 8005b8a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d118      	bne.n	8005bc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b94:	f3ef 8310 	mrs	r3, PRIMASK
 8005b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f383 8810 	msr	PRIMASK, r3
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2110      	movs	r1, #16
 8005bb6:	438a      	bics	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b00e      	add	sp, #56	; 0x38
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	fffffedf 	.word	0xfffffedf

08005be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	225a      	movs	r2, #90	; 0x5a
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2252      	movs	r2, #82	; 0x52
 8005bfe:	2100      	movs	r1, #0
 8005c00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7ff fc5f 	bl	80054c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b004      	add	sp, #16
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	2301      	movs	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f383 8810 	msr	PRIMASK, r3
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2140      	movs	r1, #64	; 0x40
 8005c3c:	438a      	bics	r2, r1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f383 8810 	msr	PRIMASK, r3
}
 8005c4a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f7ff fc2c 	bl	80054b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b006      	add	sp, #24
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	4d0c      	ldr	r5, [pc, #48]	; (8005ca0 <__libc_init_array+0x38>)
 8005c6e:	4c0d      	ldr	r4, [pc, #52]	; (8005ca4 <__libc_init_array+0x3c>)
 8005c70:	1b64      	subs	r4, r4, r5
 8005c72:	10a4      	asrs	r4, r4, #2
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	2600      	movs	r6, #0
 8005c7a:	f000 f82b 	bl	8005cd4 <_init>
 8005c7e:	4d0a      	ldr	r5, [pc, #40]	; (8005ca8 <__libc_init_array+0x40>)
 8005c80:	4c0a      	ldr	r4, [pc, #40]	; (8005cac <__libc_init_array+0x44>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	00b3      	lsls	r3, r6, #2
 8005c8e:	58eb      	ldr	r3, [r5, r3]
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	00b3      	lsls	r3, r6, #2
 8005c98:	58eb      	ldr	r3, [r5, r3]
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	08005da8 	.word	0x08005da8
 8005ca4:	08005da8 	.word	0x08005da8
 8005ca8:	08005da8 	.word	0x08005da8
 8005cac:	08005dac 	.word	0x08005dac

08005cb0 <memcpy>:
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d100      	bne.n	8005cba <memcpy+0xa>
 8005cb8:	bd10      	pop	{r4, pc}
 8005cba:	5ccc      	ldrb	r4, [r1, r3]
 8005cbc:	54c4      	strb	r4, [r0, r3]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	e7f8      	b.n	8005cb4 <memcpy+0x4>

08005cc2 <memset>:
 8005cc2:	0003      	movs	r3, r0
 8005cc4:	1882      	adds	r2, r0, r2
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d100      	bne.n	8005ccc <memset+0xa>
 8005cca:	4770      	bx	lr
 8005ccc:	7019      	strb	r1, [r3, #0]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	e7f9      	b.n	8005cc6 <memset+0x4>
	...

08005cd4 <_init>:
 8005cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cda:	bc08      	pop	{r3}
 8005cdc:	469e      	mov	lr, r3
 8005cde:	4770      	bx	lr

08005ce0 <_fini>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr
