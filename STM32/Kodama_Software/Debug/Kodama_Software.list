
Kodama_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eec  08004eec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004eec  08004eec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eec  08004eec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eec  08004eec  00014eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ef0  08004ef0  00014ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000010  08004f04  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004f04  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ef  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f6  00000000  00000000  00030a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00032f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00033db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011344  00000000  00000000  00034b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d96  00000000  00000000  00045e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068cac  00000000  00000000  00057c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c08de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000c0934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e9c 	.word	0x08004e9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004e9c 	.word	0x08004e9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f001 f8bc 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f81c 	bl	8000438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 fa1a 	bl	8000838 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000404:	f000 f9e8 	bl	80007d8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000408:	f000 f9b4 	bl	8000774 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800040c:	f000 f87c 	bl	8000508 <MX_ADC_Init>
  MX_TIM3_Init();
 8000410:	f000 f95a 	bl	80006c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000414:	23fa      	movs	r3, #250	; 0xfa
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	0018      	movs	r0, r3
 800041a:	f001 f90f 	bl	800163c <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc);
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <main+0x3c>)
 8000420:	0018      	movs	r0, r3
 8000422:	f001 fea7 	bl	8002174 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000426:	4b03      	ldr	r3, [pc, #12]	; (8000434 <main+0x40>)
 8000428:	0018      	movs	r0, r3
 800042a:	f003 f96f 	bl	800370c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800042e:	e7fe      	b.n	800042e <main+0x3a>
 8000430:	200001a8 	.word	0x200001a8
 8000434:	20000058 	.word	0x20000058

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b097      	sub	sp, #92	; 0x5c
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	2428      	movs	r4, #40	; 0x28
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2330      	movs	r3, #48	; 0x30
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 fd1e 	bl	8004e8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044e:	2318      	movs	r3, #24
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0018      	movs	r0, r3
 8000454:	2310      	movs	r3, #16
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f004 fd16 	bl	8004e8a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f004 fd0f 	bl	8004e8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046c:	0021      	movs	r1, r4
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2212      	movs	r2, #18
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2201      	movs	r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2201      	movs	r2, #1
 800047e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2210      	movs	r2, #16
 8000484:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2210      	movs	r2, #16
 800048a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2202      	movs	r2, #2
 8000490:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	0352      	lsls	r2, r2, #13
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fb8e 	bl	8002bcc <HAL_RCC_OscConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004b4:	f000 fdc8 	bl	8001048 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	2118      	movs	r1, #24
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fe96 	bl	8003208 <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004e0:	f000 fdb2 	bl	8001048 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 ffdc 	bl	80034b0 <HAL_RCCEx_PeriphCLKConfig>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80004fc:	f000 fda4 	bl	8001048 <Error_Handler>
  }
}
 8000500:	46c0      	nop			; (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	b017      	add	sp, #92	; 0x5c
 8000506:	bd90      	pop	{r4, r7, pc}

08000508 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050e:	1d3b      	adds	r3, r7, #4
 8000510:	0018      	movs	r0, r3
 8000512:	230c      	movs	r3, #12
 8000514:	001a      	movs	r2, r3
 8000516:	2100      	movs	r1, #0
 8000518:	f004 fcb7 	bl	8004e8a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800051c:	4b68      	ldr	r3, [pc, #416]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800051e:	4a69      	ldr	r2, [pc, #420]	; (80006c4 <MX_ADC_Init+0x1bc>)
 8000520:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000522:	4b67      	ldr	r3, [pc, #412]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000528:	4b65      	ldr	r3, [pc, #404]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052e:	4b64      	ldr	r3, [pc, #400]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000534:	4b62      	ldr	r3, [pc, #392]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000536:	2201      	movs	r2, #1
 8000538:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b61      	ldr	r3, [pc, #388]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b5f      	ldr	r3, [pc, #380]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b5e      	ldr	r3, [pc, #376]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800054c:	4b5c      	ldr	r3, [pc, #368]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800054e:	2201      	movs	r2, #1
 8000550:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000552:	4b5b      	ldr	r3, [pc, #364]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000554:	2200      	movs	r2, #0
 8000556:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000558:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800055a:	22c2      	movs	r2, #194	; 0xc2
 800055c:	32ff      	adds	r2, #255	; 0xff
 800055e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000560:	4b57      	ldr	r3, [pc, #348]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000562:	2200      	movs	r2, #0
 8000564:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000566:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000568:	2224      	movs	r2, #36	; 0x24
 800056a:	2100      	movs	r1, #0
 800056c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800056e:	4b54      	ldr	r3, [pc, #336]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000570:	2201      	movs	r2, #1
 8000572:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000574:	4b52      	ldr	r3, [pc, #328]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f884 	bl	8001684 <HAL_ADC_Init>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000580:	f000 fd62 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0152      	lsls	r2, r2, #5
 8000590:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	0552      	lsls	r2, r2, #21
 8000598:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059a:	1d3a      	adds	r2, r7, #4
 800059c:	4b48      	ldr	r3, [pc, #288]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fbaf 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80005aa:	f000 fd4d 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2204      	movs	r2, #4
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	4b42      	ldr	r3, [pc, #264]	; (80006c0 <MX_ADC_Init+0x1b8>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fba2 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80005c4:	f000 fd40 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	220a      	movs	r2, #10
 80005cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <MX_ADC_Init+0x1b8>)
 80005d2:	0011      	movs	r1, r2
 80005d4:	0018      	movs	r0, r3
 80005d6:	f001 fb95 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80005de:	f000 fd33 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	220b      	movs	r2, #11
 80005e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e8:	1d3a      	adds	r2, r7, #4
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_ADC_Init+0x1b8>)
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f001 fb88 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 80005f8:	f000 fd26 	bl	8001048 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	220d      	movs	r2, #13
 8000600:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fb7b 	bl	8001d04 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000612:	f000 fd19 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_10;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	220a      	movs	r2, #10
 800061a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 1;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2201      	movs	r2, #1
 8000620:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0552      	lsls	r2, r2, #21
 8000628:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800062a:	1d3a      	adds	r2, r7, #4
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fb67 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_ADC_Init+0x136>
    {
      Error_Handler();
 800063a:	f000 fd05 	bl	8001048 <Error_Handler>
  //  {
  //    Error_Handler();
  //  }
    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_11;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	220b      	movs	r2, #11
 8000642:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 2;
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2202      	movs	r2, #2
 8000648:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0552      	lsls	r2, r2, #21
 8000650:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000652:	1d3a      	adds	r2, r7, #4
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_ADC_Init+0x1b8>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fb53 	bl	8001d04 <HAL_ADC_ConfigChannel>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC_Init+0x15e>
    {
      Error_Handler();
 8000662:	f000 fcf1 	bl	8001048 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel to be converted.
    */
    sConfig.Channel = ADC_CHANNEL_4;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2204      	movs	r2, #4
 800066a:	601a      	str	r2, [r3, #0]
    sConfig.Rank = 3;
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2203      	movs	r2, #3
 8000670:	605a      	str	r2, [r3, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0552      	lsls	r2, r2, #21
 8000678:	609a      	str	r2, [r3, #8]
    if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC_Init+0x1b8>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fb3f 	bl	8001d04 <HAL_ADC_ConfigChannel>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_ADC_Init+0x186>
    {
      Error_Handler();
 800068a:	f000 fcdd 	bl	8001048 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel to be converted.
        */
	sConfig.Channel = ADC_CHANNEL_0;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 4;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2204      	movs	r2, #4
 8000698:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	0552      	lsls	r2, r2, #21
 80006a0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_ADC_Init+0x1b8>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fb2b 	bl	8001d04 <HAL_ADC_ConfigChannel>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC_Init+0x1ae>
	{
	  Error_Handler();
 80006b2:	f000 fcc9 	bl	8001048 <Error_Handler>
//      Error_Handler();
//    }

  /* USER CODE END ADC_Init 2 */

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	200001a8 	.word	0x200001a8
 80006c4:	40012400 	.word	0x40012400

080006c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	2308      	movs	r3, #8
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	2310      	movs	r3, #16
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f004 fbd6 	bl	8004e8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2308      	movs	r3, #8
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f004 fbcf 	bl	8004e8a <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006ee:	4a1f      	ldr	r2, [pc, #124]	; (800076c <MX_TIM3_Init+0xa4>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006f4:	22fa      	movs	r2, #250	; 0xfa
 80006f6:	0052      	lsls	r2, r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000702:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_TIM3_Init+0xa8>)
 8000704:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_TIM3_Init+0xa0>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 ffa9 	bl	800366c <HAL_TIM_Base_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800071e:	f000 fc93 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	2108      	movs	r1, #8
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	0152      	lsls	r2, r2, #5
 800072a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072c:	187a      	adds	r2, r7, r1
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f003 f97a 	bl	8003a2c <HAL_TIM_ConfigClockSource>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800073c:	f000 fc84 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	003b      	movs	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	003b      	movs	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074c:	003a      	movs	r2, r7
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000750:	0011      	movs	r1, r2
 8000752:	0018      	movs	r0, r3
 8000754:	f003 fb6e 	bl	8003e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	1e03      	subs	r3, r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 fc74 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b006      	add	sp, #24
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000058 	.word	0x20000058
 800076c:	40000400 	.word	0x40000400
 8000770:	0000ffff 	.word	0x0000ffff

08000774 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART1_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000780:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <MX_USART1_UART_Init+0x60>)
 8000782:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_USART1_UART_Init+0x58>)
 8000798:	220c      	movs	r2, #12
 800079a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x58>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fba4 	bl	8003f04 <HAL_UART_Init>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80007c0:	f000 fc42 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	200000a0 	.word	0x200000a0
 80007d0:	40013800 	.word	0x40013800
 80007d4:	00007a12 	.word	0x00007a12

080007d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART2_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007e4:	2296      	movs	r2, #150	; 0x96
 80007e6:	0192      	lsls	r2, r2, #6
 80007e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART2_UART_Init+0x58>)
 80007fe:	2208      	movs	r2, #8
 8000800:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MX_USART2_UART_Init+0x58>)
 800081c:	0018      	movs	r0, r3
 800081e:	f003 fb71 	bl	8003f04 <HAL_UART_Init>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 fc0f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000124 	.word	0x20000124
 8000834:	40004400 	.word	0x40004400

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b08b      	sub	sp, #44	; 0x2c
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2414      	movs	r4, #20
 8000840:	193b      	adds	r3, r7, r4
 8000842:	0018      	movs	r0, r3
 8000844:	2314      	movs	r3, #20
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f004 fb1e 	bl	8004e8a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b5f      	ldr	r3, [pc, #380]	; (80009cc <MX_GPIO_Init+0x194>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b5e      	ldr	r3, [pc, #376]	; (80009cc <MX_GPIO_Init+0x194>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0309      	lsls	r1, r1, #12
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <MX_GPIO_Init+0x194>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	031b      	lsls	r3, r3, #12
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4b58      	ldr	r3, [pc, #352]	; (80009cc <MX_GPIO_Init+0x194>)
 800086c:	695a      	ldr	r2, [r3, #20]
 800086e:	4b57      	ldr	r3, [pc, #348]	; (80009cc <MX_GPIO_Init+0x194>)
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	03c9      	lsls	r1, r1, #15
 8000874:	430a      	orrs	r2, r1
 8000876:	615a      	str	r2, [r3, #20]
 8000878:	4b54      	ldr	r3, [pc, #336]	; (80009cc <MX_GPIO_Init+0x194>)
 800087a:	695a      	ldr	r2, [r3, #20]
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	03db      	lsls	r3, r3, #15
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b51      	ldr	r3, [pc, #324]	; (80009cc <MX_GPIO_Init+0x194>)
 8000888:	695a      	ldr	r2, [r3, #20]
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <MX_GPIO_Init+0x194>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0289      	lsls	r1, r1, #10
 8000890:	430a      	orrs	r2, r1
 8000892:	615a      	str	r2, [r3, #20]
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <MX_GPIO_Init+0x194>)
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	029b      	lsls	r3, r3, #10
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b4a      	ldr	r3, [pc, #296]	; (80009cc <MX_GPIO_Init+0x194>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b49      	ldr	r3, [pc, #292]	; (80009cc <MX_GPIO_Init+0x194>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	02c9      	lsls	r1, r1, #11
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b46      	ldr	r3, [pc, #280]	; (80009cc <MX_GPIO_Init+0x194>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	02db      	lsls	r3, r3, #11
 80008b8:	4013      	ands	r3, r2
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008be:	2390      	movs	r3, #144	; 0x90
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 f947 	bl	8002b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0192      	lsls	r2, r2, #6
 80008d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2288      	movs	r2, #136	; 0x88
 80008d8:	0352      	lsls	r2, r2, #13
 80008da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	4a3a      	ldr	r2, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x198>)
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f001 ffa9 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : DownPad2_Pin UpPad1_Pin DownPad1_Pin Piezo1_Pin */
  GPIO_InitStruct.Pin = DownPad2_Pin|UpPad1_Pin|DownPad1_Pin|Piezo1_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	22e1      	movs	r2, #225	; 0xe1
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	22c4      	movs	r2, #196	; 0xc4
 80008fa:	0392      	lsls	r2, r2, #14
 80008fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	193a      	adds	r2, r7, r4
 8000906:	2390      	movs	r3, #144	; 0x90
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f001 ff97 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2220      	movs	r2, #32
 8000916:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2201      	movs	r2, #1
 800091c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092a:	193a      	adds	r2, r7, r4
 800092c:	2390      	movs	r3, #144	; 0x90
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	0011      	movs	r1, r2
 8000932:	0018      	movs	r0, r3
 8000934:	f001 ff84 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : UpPad2_Pin DownPad3_Pin Piezo3_Pin DownPad4_Pin */
  GPIO_InitStruct.Pin = UpPad2_Pin|DownPad3_Pin|Piezo3_Pin|DownPad4_Pin;
 8000938:	0021      	movs	r1, r4
 800093a:	187b      	adds	r3, r7, r1
 800093c:	4a25      	ldr	r2, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x19c>)
 800093e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	22c4      	movs	r2, #196	; 0xc4
 8000944:	0392      	lsls	r2, r2, #14
 8000946:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	000c      	movs	r4, r1
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x1a0>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f001 ff72 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : Piezo2_Pin */
  GPIO_InitStruct.Pin = Piezo2_Pin;
 800095c:	0021      	movs	r1, r4
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	22c4      	movs	r2, #196	; 0xc4
 800096a:	0392      	lsls	r2, r2, #14
 800096c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Piezo2_GPIO_Port, &GPIO_InitStruct);
 8000974:	000c      	movs	r4, r1
 8000976:	187b      	adds	r3, r7, r1
 8000978:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x198>)
 800097a:	0019      	movs	r1, r3
 800097c:	0010      	movs	r0, r2
 800097e:	f001 ff5f 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : UpPad4_Pin */
  GPIO_InitStruct.Pin = UpPad4_Pin;
 8000982:	0021      	movs	r1, r4
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2220      	movs	r2, #32
 8000988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2288      	movs	r2, #136	; 0x88
 800098e:	0352      	lsls	r2, r2, #13
 8000990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UpPad4_GPIO_Port, &GPIO_InitStruct);
 8000998:	187b      	adds	r3, r7, r1
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <MX_GPIO_Init+0x1a0>)
 800099c:	0019      	movs	r1, r3
 800099e:	0010      	movs	r0, r2
 80009a0:	f001 ff4e 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2005      	movs	r0, #5
 80009aa:	f001 fd37 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009ae:	2005      	movs	r0, #5
 80009b0:	f001 fd49 	bl	8002446 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2101      	movs	r1, #1
 80009b8:	2007      	movs	r0, #7
 80009ba:	f001 fd2f 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80009be:	2007      	movs	r0, #7
 80009c0:	f001 fd41 	bl	8002446 <HAL_NVIC_EnableIRQ>

}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00b      	add	sp, #44	; 0x2c
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000800 	.word	0x48000800
 80009d4:	00008409 	.word	0x00008409
 80009d8:	48000400 	.word	0x48000400

080009dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b0a2      	sub	sp, #136	; 0x88
 80009e0:	af20      	add	r7, sp, #128	; 0x80
 80009e2:	0002      	movs	r2, r0
 80009e4:	1dbb      	adds	r3, r7, #6
 80009e6:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	2b80      	cmp	r3, #128	; 0x80
 80009ee:	d048      	beq.n	8000a82 <HAL_GPIO_EXTI_Callback+0xa6>
 80009f0:	dd00      	ble.n	80009f4 <HAL_GPIO_EXTI_Callback+0x18>
 80009f2:	e0c0      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x19a>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d100      	bne.n	80009fa <HAL_GPIO_EXTI_Callback+0x1e>
 80009f8:	e082      	b.n	8000b00 <HAL_GPIO_EXTI_Callback+0x124>
 80009fa:	2b40      	cmp	r3, #64	; 0x40
 80009fc:	d000      	beq.n	8000a00 <HAL_GPIO_EXTI_Callback+0x24>
 80009fe:	e0ba      	b.n	8000b76 <HAL_GPIO_EXTI_Callback+0x19a>

		case UpPad1_Pin:
			if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_SET && UpPad1_state != true){
 8000a00:	2390      	movs	r3, #144	; 0x90
 8000a02:	05db      	lsls	r3, r3, #23
 8000a04:	2140      	movs	r1, #64	; 0x40
 8000a06:	0018      	movs	r0, r3
 8000a08:	f002 f88a 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d125      	bne.n	8000a5e <HAL_GPIO_EXTI_Callback+0x82>
 8000a12:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2201      	movs	r2, #1
 8000a18:	4053      	eors	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d01e      	beq.n	8000a5e <HAL_GPIO_EXTI_Callback+0x82>
				if (CC1Value<126){
 8000a20:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b7d      	cmp	r3, #125	; 0x7d
 8000a26:	d805      	bhi.n	8000a34 <HAL_GPIO_EXTI_Callback+0x58>
					CC1Value ++;
 8000a28:	4b59      	ldr	r3, [pc, #356]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b57      	ldr	r3, [pc, #348]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000a32:	701a      	strb	r2, [r3, #0]
				}
				srv_midi_internal_controlChange(4, CC1Value, huart1);
 8000a34:	4b56      	ldr	r3, [pc, #344]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000a36:	781d      	ldrb	r5, [r3, #0]
 8000a38:	4c56      	ldr	r4, [pc, #344]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000a3a:	466b      	mov	r3, sp
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	0023      	movs	r3, r4
 8000a40:	3308      	adds	r3, #8
 8000a42:	227c      	movs	r2, #124	; 0x7c
 8000a44:	0019      	movs	r1, r3
 8000a46:	f004 fa17 	bl	8004e78 <memcpy>
 8000a4a:	6822      	ldr	r2, [r4, #0]
 8000a4c:	6863      	ldr	r3, [r4, #4]
 8000a4e:	0029      	movs	r1, r5
 8000a50:	2004      	movs	r0, #4
 8000a52:	f000 fb49 	bl	80010e8 <srv_midi_internal_controlChange>
				UpPad1_state = true;
 8000a56:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
				}
			else if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_RESET && UpPad1_state != false) {
				UpPad1_state = false;
			}
			break;
 8000a5c:	e08d      	b.n	8000b7a <HAL_GPIO_EXTI_Callback+0x19e>
			else if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_RESET && UpPad1_state != false) {
 8000a5e:	2390      	movs	r3, #144	; 0x90
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 f85b 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d000      	beq.n	8000a70 <HAL_GPIO_EXTI_Callback+0x94>
 8000a6e:	e084      	b.n	8000b7a <HAL_GPIO_EXTI_Callback+0x19e>
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d100      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x9e>
 8000a78:	e07f      	b.n	8000b7a <HAL_GPIO_EXTI_Callback+0x19e>
				UpPad1_state = false;
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
			break;
 8000a80:	e07b      	b.n	8000b7a <HAL_GPIO_EXTI_Callback+0x19e>
//										srv_midi_internal_sendNote(VideoSelector, 3, 0, huart1);
//									}
//									break;

		case DownPad1_Pin:
			if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_SET && DownPad1_state != true){
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2180      	movs	r1, #128	; 0x80
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 f849 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000a8e:	0003      	movs	r3, r0
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d125      	bne.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x104>
 8000a94:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4053      	eors	r3, r2
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01e      	beq.n	8000ae0 <HAL_GPIO_EXTI_Callback+0x104>
				if (CC1Value>0){
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <HAL_GPIO_EXTI_Callback+0xda>
					CC1Value --;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ab4:	701a      	strb	r2, [r3, #0]
				}
				srv_midi_internal_controlChange(4, CC1Value, huart1);
 8000ab6:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000ab8:	781d      	ldrb	r5, [r3, #0]
 8000aba:	4c36      	ldr	r4, [pc, #216]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000abc:	466b      	mov	r3, sp
 8000abe:	0018      	movs	r0, r3
 8000ac0:	0023      	movs	r3, r4
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	227c      	movs	r2, #124	; 0x7c
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	f004 f9d6 	bl	8004e78 <memcpy>
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	6863      	ldr	r3, [r4, #4]
 8000ad0:	0029      	movs	r1, r5
 8000ad2:	2004      	movs	r0, #4
 8000ad4:	f000 fb08 	bl	80010e8 <srv_midi_internal_controlChange>
				DownPad1_state = true;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
				}
			else if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_RESET && DownPad1_state != false) {
				DownPad1_state = false;
			}
			break;
 8000ade:	e04e      	b.n	8000b7e <HAL_GPIO_EXTI_Callback+0x1a2>
			else if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_RESET && DownPad1_state != false) {
 8000ae0:	2390      	movs	r3, #144	; 0x90
 8000ae2:	05db      	lsls	r3, r3, #23
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 f81a 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d146      	bne.n	8000b7e <HAL_GPIO_EXTI_Callback+0x1a2>
 8000af0:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d042      	beq.n	8000b7e <HAL_GPIO_EXTI_Callback+0x1a2>
				DownPad1_state = false;
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]
			break;
 8000afe:	e03e      	b.n	8000b7e <HAL_GPIO_EXTI_Callback+0x1a2>

		case DownPad2_Pin:
					if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_SET && DownPad2_state != true){
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2102      	movs	r1, #2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 f80a 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d121      	bne.n	8000b56 <HAL_GPIO_EXTI_Callback+0x17a>
 8000b12:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2201      	movs	r2, #1
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d01a      	beq.n	8000b56 <HAL_GPIO_EXTI_Callback+0x17a>
						CC2Value --;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b2a:	701a      	strb	r2, [r3, #0]
						srv_midi_internal_controlChange(5, CC2Value, huart1);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b2e:	781d      	ldrb	r5, [r3, #0]
 8000b30:	4c18      	ldr	r4, [pc, #96]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000b32:	466b      	mov	r3, sp
 8000b34:	0018      	movs	r0, r3
 8000b36:	0023      	movs	r3, r4
 8000b38:	3308      	adds	r3, #8
 8000b3a:	227c      	movs	r2, #124	; 0x7c
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f004 f99b 	bl	8004e78 <memcpy>
 8000b42:	6822      	ldr	r2, [r4, #0]
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	0029      	movs	r1, r5
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f000 facd 	bl	80010e8 <srv_midi_internal_controlChange>
						DownPad2_state = true;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
						}
					else if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_RESET && DownPad2_state != false) {
						DownPad2_state = false;
					}
					break;
 8000b54:	e015      	b.n	8000b82 <HAL_GPIO_EXTI_Callback+0x1a6>
					else if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_RESET && DownPad2_state != false) {
 8000b56:	2390      	movs	r3, #144	; 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 ffdf 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d10d      	bne.n	8000b82 <HAL_GPIO_EXTI_Callback+0x1a6>
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d009      	beq.n	8000b82 <HAL_GPIO_EXTI_Callback+0x1a6>
						DownPad2_state = false;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
					break;
 8000b74:	e005      	b.n	8000b82 <HAL_GPIO_EXTI_Callback+0x1a6>

//		case RDY_PIN_Pin: if (HAL_GPIO_ReadPin(RDY_PIN_GPIO_Port, RDY_PIN_Pin)== GPIO_PIN_RESET){
//			srv_iqs5xx_callback();
//		}
		default:
			break;
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	e004      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x1a8>
			break;
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	e002      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x1a8>
			break;
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x1a8>
					break;
 8000b82:	46c0      	nop			; (mov r8, r8)
	}
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8c:	2000002d 	.word	0x2000002d
 8000b90:	20000000 	.word	0x20000000
 8000b94:	200000a0 	.word	0x200000a0
 8000b98:	2000002e 	.word	0x2000002e
 8000b9c:	2000002f 	.word	0x2000002f
 8000ba0:	20000001 	.word	0x20000001

08000ba4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
 //Non blocking delay for getting ADC value every x ms
  //ADC_Select_CH10();
  //GET_ADC_Value();
  if (initPassed == false){
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4053      	eors	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d004      	beq.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x20>
		CallibrationPhoto(&hadc);
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 f831 	bl	8000c24 <CallibrationPhoto>
 8000bc2:	e003      	b.n	8000bcc <HAL_TIM_PeriodElapsedCallback+0x28>
	}
	else {
		PhotoProcess(&hadc);
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f8f4 	bl	8000db4 <PhotoProcess>
	}
  HAL_TIM_Base_Stop_IT(&htim3);
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 fde8 	bl	80037a4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 fd98 	bl	800370c <HAL_TIM_Base_Start_IT>


}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b002      	add	sp, #8
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000034 	.word	0x20000034
 8000be8:	200001a8 	.word	0x200001a8
 8000bec:	20000058 	.word	0x20000058

08000bf0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //Callback when ADC got a value
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

    // Read & Update The ADC Result
	//HAL_Delay(1000);
		if (initPassed == false){
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_ADC_ConvCpltCallback+0x30>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4053      	eors	r3, r2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <HAL_ADC_ConvCpltCallback+0x20>
			CallibrationPhoto(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 f80b 	bl	8000c24 <CallibrationPhoto>
		}
		else {
			PhotoProcess(hadc);
		}

}
 8000c0e:	e003      	b.n	8000c18 <HAL_ADC_ConvCpltCallback+0x28>
			PhotoProcess(hadc);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 f8ce 	bl	8000db4 <PhotoProcess>
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000034 	.word	0x20000034

08000c24 <CallibrationPhoto>:

void CallibrationPhoto(ADC_HandleTypeDef* hadc){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if(nbTest<11){
 8000c2c:	4b57      	ldr	r3, [pc, #348]	; (8000d8c <CallibrationPhoto+0x168>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b0a      	cmp	r3, #10
 8000c32:	d900      	bls.n	8000c36 <CallibrationPhoto+0x12>
 8000c34:	e076      	b.n	8000d24 <CallibrationPhoto+0x100>
		//HAL_Delay(DELAYUPDATEPHOTO);
		HAL_ADC_Start(hadc);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fe63 	bl	8001904 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425a      	negs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fef0 	bl	8001a2c <HAL_ADC_PollForConversion>
		uint16_t LumValue_1 = HAL_ADC_GetValue(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 ff84 	bl	8001b5c <HAL_ADC_GetValue>
 8000c54:	0002      	movs	r2, r0
 8000c56:	210e      	movs	r1, #14
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	801a      	strh	r2, [r3, #0]
		if (nbTest !=0){lum1average = LumValue_1 + lum1average;}
 8000c5c:	4b4b      	ldr	r3, [pc, #300]	; (8000d8c <CallibrationPhoto+0x168>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d006      	beq.n	8000c72 <CallibrationPhoto+0x4e>
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <CallibrationPhoto+0x16c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	18d2      	adds	r2, r2, r3
 8000c6e:	4b48      	ldr	r3, [pc, #288]	; (8000d90 <CallibrationPhoto+0x16c>)
 8000c70:	601a      	str	r2, [r3, #0]
		//ADC_Select_CH11();
		//HAL_Delay(DELAYUPDATEPHOTO);
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000c72:	2301      	movs	r3, #1
 8000c74:	425a      	negs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fed6 	bl	8001a2c <HAL_ADC_PollForConversion>
		uint16_t LumValue_2 = HAL_ADC_GetValue(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 ff6a 	bl	8001b5c <HAL_ADC_GetValue>
 8000c88:	0002      	movs	r2, r0
 8000c8a:	210c      	movs	r1, #12
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	801a      	strh	r2, [r3, #0]
		if (nbTest != 0){lum2average = LumValue_2 + lum2average;}
 8000c90:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <CallibrationPhoto+0x168>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <CallibrationPhoto+0x82>
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	881a      	ldrh	r2, [r3, #0]
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <CallibrationPhoto+0x170>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	18d2      	adds	r2, r2, r3
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <CallibrationPhoto+0x170>)
 8000ca4:	601a      	str	r2, [r3, #0]
		//HAL_ADC_Stop(hadc);

		//ADC_Select_CH12();
		//HAL_Delay(DELAYUPDATEPHOTO);
		//HAL_ADC_Start(hadc);
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	425a      	negs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 febc 	bl	8001a2c <HAL_ADC_PollForConversion>
		uint16_t LumValue_3 = HAL_ADC_GetValue(hadc);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 ff50 	bl	8001b5c <HAL_ADC_GetValue>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	801a      	strh	r2, [r3, #0]
		if (nbTest != 0){lum3average = LumValue_3 + lum3average;}
 8000cc4:	4b31      	ldr	r3, [pc, #196]	; (8000d8c <CallibrationPhoto+0x168>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <CallibrationPhoto+0xb6>
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <CallibrationPhoto+0x174>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	18d2      	adds	r2, r2, r3
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <CallibrationPhoto+0x174>)
 8000cd8:	601a      	str	r2, [r3, #0]

		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000cda:	2301      	movs	r3, #1
 8000cdc:	425a      	negs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fea2 	bl	8001a2c <HAL_ADC_PollForConversion>
		uint16_t LumValue_4 = HAL_ADC_GetValue(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 ff36 	bl	8001b5c <HAL_ADC_GetValue>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	801a      	strh	r2, [r3, #0]
		if (nbTest != 0){lum4average = LumValue_4 + lum4average;}
 8000cf8:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <CallibrationPhoto+0x168>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <CallibrationPhoto+0xea>
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <CallibrationPhoto+0x178>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	18d2      	adds	r2, r2, r3
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <CallibrationPhoto+0x178>)
 8000d0c:	601a      	str	r2, [r3, #0]

//		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
//		uint16_t LumValue_5 = HAL_ADC_GetValue(hadc);
//		if (nbTest != 0){lum5average = LumValue_5 + lum5average;}
		HAL_ADC_Stop(hadc);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 fe4b 	bl	80019ac <HAL_ADC_Stop>

		nbTest++;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <CallibrationPhoto+0x168>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <CallibrationPhoto+0x168>)
 8000d20:	701a      	strb	r2, [r3, #0]
		Lum3threshold = lum3average/10 - 100;
		Lum4threshold = lum4average/10 - 100;
		//Lum5threshold = lum5average/10 - 100;
		initPassed = true;
	}
}
 8000d22:	e02e      	b.n	8000d82 <CallibrationPhoto+0x15e>
		Lum1threshold = lum1average/10 - 100;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <CallibrationPhoto+0x16c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	210a      	movs	r1, #10
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fa76 	bl	800021c <__divsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	3b64      	subs	r3, #100	; 0x64
 8000d34:	001a      	movs	r2, r3
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <CallibrationPhoto+0x17c>)
 8000d38:	601a      	str	r2, [r3, #0]
		Lum2threshold = lum2average/10 - 100;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <CallibrationPhoto+0x170>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	210a      	movs	r1, #10
 8000d40:	0018      	movs	r0, r3
 8000d42:	f7ff fa6b 	bl	800021c <__divsi3>
 8000d46:	0003      	movs	r3, r0
 8000d48:	3b64      	subs	r3, #100	; 0x64
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <CallibrationPhoto+0x180>)
 8000d4e:	601a      	str	r2, [r3, #0]
		Lum3threshold = lum3average/10 - 100;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <CallibrationPhoto+0x174>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	210a      	movs	r1, #10
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fa60 	bl	800021c <__divsi3>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	3b64      	subs	r3, #100	; 0x64
 8000d60:	001a      	movs	r2, r3
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <CallibrationPhoto+0x184>)
 8000d64:	601a      	str	r2, [r3, #0]
		Lum4threshold = lum4average/10 - 100;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <CallibrationPhoto+0x178>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	210a      	movs	r1, #10
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fa55 	bl	800021c <__divsi3>
 8000d72:	0003      	movs	r3, r0
 8000d74:	3b64      	subs	r3, #100	; 0x64
 8000d76:	001a      	movs	r2, r3
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <CallibrationPhoto+0x188>)
 8000d7a:	601a      	str	r2, [r3, #0]
		initPassed = true;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <CallibrationPhoto+0x18c>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	2000002c 	.word	0x2000002c
 8000d90:	20000038 	.word	0x20000038
 8000d94:	2000003c 	.word	0x2000003c
 8000d98:	20000040 	.word	0x20000040
 8000d9c:	20000044 	.word	0x20000044
 8000da0:	20000048 	.word	0x20000048
 8000da4:	2000004c 	.word	0x2000004c
 8000da8:	20000050 	.word	0x20000050
 8000dac:	20000054 	.word	0x20000054
 8000db0:	20000034 	.word	0x20000034

08000db4 <PhotoProcess>:

void PhotoProcess(ADC_HandleTypeDef* hadc){
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b0a5      	sub	sp, #148	; 0x94
 8000db8:	af20      	add	r7, sp, #128	; 0x80
 8000dba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 fda0 	bl	8001904 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425a      	negs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 fe2d 	bl	8001a2c <HAL_ADC_PollForConversion>
	uint16_t LumValue_1 = HAL_ADC_GetValue(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fec1 	bl	8001b5c <HAL_ADC_GetValue>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	210e      	movs	r1, #14
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	801a      	strh	r2, [r3, #0]
	if (LumValue_1 < Lum1threshold && Play1 !=true){
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	881a      	ldrh	r2, [r3, #0]
 8000de6:	4b8f      	ldr	r3, [pc, #572]	; (8001024 <PhotoProcess+0x270>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da18      	bge.n	8000e20 <PhotoProcess+0x6c>
 8000dee:	4b8e      	ldr	r3, [pc, #568]	; (8001028 <PhotoProcess+0x274>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d011      	beq.n	8000e20 <PhotoProcess+0x6c>
		srv_midi_internal_sendNote(PLAY1_NOTE, 7, 50, huart1);
 8000dfc:	4c8b      	ldr	r4, [pc, #556]	; (800102c <PhotoProcess+0x278>)
 8000dfe:	466b      	mov	r3, sp
 8000e00:	0018      	movs	r0, r3
 8000e02:	1d23      	adds	r3, r4, #4
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	0019      	movs	r1, r3
 8000e08:	f004 f836 	bl	8004e78 <memcpy>
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	2107      	movs	r1, #7
 8000e12:	2018      	movs	r0, #24
 8000e14:	f000 f91e 	bl	8001054 <srv_midi_internal_sendNote>
		Play1 = true;
 8000e18:	4b83      	ldr	r3, [pc, #524]	; (8001028 <PhotoProcess+0x274>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e01b      	b.n	8000e58 <PhotoProcess+0xa4>
	}
	else if (LumValue_1 >= Lum1threshold && Play1 == true) {
 8000e20:	230e      	movs	r3, #14
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	4b7f      	ldr	r3, [pc, #508]	; (8001024 <PhotoProcess+0x270>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	db14      	blt.n	8000e58 <PhotoProcess+0xa4>
 8000e2e:	4b7e      	ldr	r3, [pc, #504]	; (8001028 <PhotoProcess+0x274>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d010      	beq.n	8000e58 <PhotoProcess+0xa4>
		Play1 = false;
 8000e36:	4b7c      	ldr	r3, [pc, #496]	; (8001028 <PhotoProcess+0x274>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		srv_midi_internal_sendNote(PLAY1_NOTE, 7, 0, huart1);
 8000e3c:	4c7b      	ldr	r4, [pc, #492]	; (800102c <PhotoProcess+0x278>)
 8000e3e:	466b      	mov	r3, sp
 8000e40:	0018      	movs	r0, r3
 8000e42:	1d23      	adds	r3, r4, #4
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	0019      	movs	r1, r3
 8000e48:	f004 f816 	bl	8004e78 <memcpy>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2107      	movs	r1, #7
 8000e52:	2018      	movs	r0, #24
 8000e54:	f000 f8fe 	bl	8001054 <srv_midi_internal_sendNote>
	}
	//ADC_Select_CH11();
	//HAL_Delay(DELAYUPDATEPHOTO);
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000e58:	2301      	movs	r3, #1
 8000e5a:	425a      	negs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fde3 	bl	8001a2c <HAL_ADC_PollForConversion>
	uint16_t LumValue_2 = HAL_ADC_GetValue(hadc);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fe77 	bl	8001b5c <HAL_ADC_GetValue>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	210c      	movs	r1, #12
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	801a      	strh	r2, [r3, #0]
	if (LumValue_2 < Lum2threshold && Play2 !=true){
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	4b6d      	ldr	r3, [pc, #436]	; (8001030 <PhotoProcess+0x27c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	da18      	bge.n	8000eb4 <PhotoProcess+0x100>
 8000e82:	4b6c      	ldr	r3, [pc, #432]	; (8001034 <PhotoProcess+0x280>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4053      	eors	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d011      	beq.n	8000eb4 <PhotoProcess+0x100>
		srv_midi_internal_sendNote(PLAY2_NOTE, 7, 50, huart1);
 8000e90:	4c66      	ldr	r4, [pc, #408]	; (800102c <PhotoProcess+0x278>)
 8000e92:	466b      	mov	r3, sp
 8000e94:	0018      	movs	r0, r3
 8000e96:	1d23      	adds	r3, r4, #4
 8000e98:	2280      	movs	r2, #128	; 0x80
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	f003 ffec 	bl	8004e78 <memcpy>
 8000ea0:	6823      	ldr	r3, [r4, #0]
 8000ea2:	2232      	movs	r2, #50	; 0x32
 8000ea4:	2107      	movs	r1, #7
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f000 f8d4 	bl	8001054 <srv_midi_internal_sendNote>
		Play2 = true;
 8000eac:	4b61      	ldr	r3, [pc, #388]	; (8001034 <PhotoProcess+0x280>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e01b      	b.n	8000eec <PhotoProcess+0x138>
	}
	else if (LumValue_2 >= Lum2threshold && Play2 == true) {
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	881a      	ldrh	r2, [r3, #0]
 8000eba:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <PhotoProcess+0x27c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	db14      	blt.n	8000eec <PhotoProcess+0x138>
 8000ec2:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <PhotoProcess+0x280>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d010      	beq.n	8000eec <PhotoProcess+0x138>
		Play2 = false;
 8000eca:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <PhotoProcess+0x280>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
		srv_midi_internal_sendNote(PLAY2_NOTE, 7, 0, huart1);
 8000ed0:	4c56      	ldr	r4, [pc, #344]	; (800102c <PhotoProcess+0x278>)
 8000ed2:	466b      	mov	r3, sp
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	1d23      	adds	r3, r4, #4
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	0019      	movs	r1, r3
 8000edc:	f003 ffcc 	bl	8004e78 <memcpy>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f000 f8b4 	bl	8001054 <srv_midi_internal_sendNote>
	//HAL_ADC_Stop(hadc);

	//ADC_Select_CH12();
	//HAL_Delay(DELAYUPDATEPHOTO);
	//HAL_ADC_Start(hadc);
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000eec:	2301      	movs	r3, #1
 8000eee:	425a      	negs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fd99 	bl	8001a2c <HAL_ADC_PollForConversion>
	uint16_t LumValue_3 = HAL_ADC_GetValue(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 fe2d 	bl	8001b5c <HAL_ADC_GetValue>
 8000f02:	0002      	movs	r2, r0
 8000f04:	210a      	movs	r1, #10
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	801a      	strh	r2, [r3, #0]
	if (LumValue_3 < Lum3threshold && Play3 !=true){
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <PhotoProcess+0x284>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	da18      	bge.n	8000f48 <PhotoProcess+0x194>
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <PhotoProcess+0x288>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4053      	eors	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d011      	beq.n	8000f48 <PhotoProcess+0x194>
		srv_midi_internal_sendNote(PLAY3_NOTE, 7, 50, huart1);
 8000f24:	4c41      	ldr	r4, [pc, #260]	; (800102c <PhotoProcess+0x278>)
 8000f26:	466b      	mov	r3, sp
 8000f28:	0018      	movs	r0, r3
 8000f2a:	1d23      	adds	r3, r4, #4
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	0019      	movs	r1, r3
 8000f30:	f003 ffa2 	bl	8004e78 <memcpy>
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	2232      	movs	r2, #50	; 0x32
 8000f38:	2107      	movs	r1, #7
 8000f3a:	201a      	movs	r0, #26
 8000f3c:	f000 f88a 	bl	8001054 <srv_midi_internal_sendNote>
		Play3 = true;
 8000f40:	4b3e      	ldr	r3, [pc, #248]	; (800103c <PhotoProcess+0x288>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e01b      	b.n	8000f80 <PhotoProcess+0x1cc>
	}
	else if (LumValue_3 >= Lum3threshold && Play3 == true) {
 8000f48:	230a      	movs	r3, #10
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	4b3a      	ldr	r3, [pc, #232]	; (8001038 <PhotoProcess+0x284>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	db14      	blt.n	8000f80 <PhotoProcess+0x1cc>
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <PhotoProcess+0x288>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <PhotoProcess+0x1cc>
		Play3 = false;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <PhotoProcess+0x288>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
		srv_midi_internal_sendNote(PLAY3_NOTE, 7, 0, huart1);
 8000f64:	4c31      	ldr	r4, [pc, #196]	; (800102c <PhotoProcess+0x278>)
 8000f66:	466b      	mov	r3, sp
 8000f68:	0018      	movs	r0, r3
 8000f6a:	1d23      	adds	r3, r4, #4
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0019      	movs	r1, r3
 8000f70:	f003 ff82 	bl	8004e78 <memcpy>
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	2107      	movs	r1, #7
 8000f7a:	201a      	movs	r0, #26
 8000f7c:	f000 f86a 	bl	8001054 <srv_midi_internal_sendNote>
	}

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000f80:	2301      	movs	r3, #1
 8000f82:	425a      	negs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	0011      	movs	r1, r2
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fd4f 	bl	8001a2c <HAL_ADC_PollForConversion>
	uint16_t LumValue_4 = HAL_ADC_GetValue(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f000 fde3 	bl	8001b5c <HAL_ADC_GetValue>
 8000f96:	0002      	movs	r2, r0
 8000f98:	2108      	movs	r1, #8
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	801a      	strh	r2, [r3, #0]
	if (LumValue_4 < Lum4threshold && Play4 !=true){
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <PhotoProcess+0x28c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	da18      	bge.n	8000fdc <PhotoProcess+0x228>
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <PhotoProcess+0x290>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4053      	eors	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d011      	beq.n	8000fdc <PhotoProcess+0x228>
		srv_midi_internal_sendNote(PLAY4_NOTE, 7, 50, huart1);
 8000fb8:	4c1c      	ldr	r4, [pc, #112]	; (800102c <PhotoProcess+0x278>)
 8000fba:	466b      	mov	r3, sp
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	1d23      	adds	r3, r4, #4
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	f003 ff58 	bl	8004e78 <memcpy>
 8000fc8:	6823      	ldr	r3, [r4, #0]
 8000fca:	2232      	movs	r2, #50	; 0x32
 8000fcc:	2107      	movs	r1, #7
 8000fce:	201b      	movs	r0, #27
 8000fd0:	f000 f840 	bl	8001054 <srv_midi_internal_sendNote>
		Play4 = true;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <PhotoProcess+0x290>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e01b      	b.n	8001014 <PhotoProcess+0x260>
	}
	else if (LumValue_4 >= Lum4threshold && Play4 == true) {
 8000fdc:	2308      	movs	r3, #8
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <PhotoProcess+0x28c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	db14      	blt.n	8001014 <PhotoProcess+0x260>
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <PhotoProcess+0x290>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d010      	beq.n	8001014 <PhotoProcess+0x260>
		Play4 = false;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <PhotoProcess+0x290>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
		srv_midi_internal_sendNote(PLAY4_NOTE, 7, 0, huart1);
 8000ff8:	4c0c      	ldr	r4, [pc, #48]	; (800102c <PhotoProcess+0x278>)
 8000ffa:	466b      	mov	r3, sp
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	1d23      	adds	r3, r4, #4
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	0019      	movs	r1, r3
 8001004:	f003 ff38 	bl	8004e78 <memcpy>
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	2200      	movs	r2, #0
 800100c:	2107      	movs	r1, #7
 800100e:	201b      	movs	r0, #27
 8001010:	f000 f820 	bl	8001054 <srv_midi_internal_sendNote>
//	}
//	else if (LumValue_5 >= Lum5threshold && Play5 == true) {
//		Play5 = false;
//		srv_midi_internal_sendNote(PLAY5_NOTE, 7, 0, huart1);
//	}
	HAL_ADC_Stop(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	0018      	movs	r0, r3
 8001018:	f000 fcc8 	bl	80019ac <HAL_ADC_Stop>
//				Play5 = false;
//				srv_midi_internal_sendNote(PLAY5_NOTE, 7, 0, huart1);
//			}
//			HAL_ADC_Stop(hadc);

}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b005      	add	sp, #20
 8001022:	bd90      	pop	{r4, r7, pc}
 8001024:	20000048 	.word	0x20000048
 8001028:	20000030 	.word	0x20000030
 800102c:	200000a0 	.word	0x200000a0
 8001030:	2000004c 	.word	0x2000004c
 8001034:	20000031 	.word	0x20000031
 8001038:	20000050 	.word	0x20000050
 800103c:	20000032 	.word	0x20000032
 8001040:	20000054 	.word	0x20000054
 8001044:	20000033 	.word	0x20000033

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <srv_midi_internal_sendNote>:

/* Private variables ---------------------------------------------------------*/
uint8_t aTxBuffer[3];

/* Public functions -----------------------------------------------*/
void srv_midi_internal_sendNote(uint8_t note,uint8_t channel, uint8_t velocity,UART_HandleTypeDef uart){
 8001054:	b082      	sub	sp, #8
 8001056:	b5b0      	push	{r4, r5, r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	0004      	movs	r4, r0
 800105e:	0008      	movs	r0, r1
 8001060:	0011      	movs	r1, r2
 8001062:	2204      	movs	r2, #4
 8001064:	2520      	movs	r5, #32
 8001066:	46ac      	mov	ip, r5
 8001068:	44bc      	add	ip, r7
 800106a:	4462      	add	r2, ip
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	1c22      	adds	r2, r4, #0
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	1c02      	adds	r2, r0, #0
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	1d7b      	adds	r3, r7, #5
 800107c:	1c0a      	adds	r2, r1, #0
 800107e:	701a      	strb	r2, [r3, #0]
	uint8_t channelBuffer, noteBuffer, velocityBuffer;
	channelBuffer = 0x0F & channel; //To be sure that channel is 4 bits value
 8001080:	200f      	movs	r0, #15
 8001082:	183b      	adds	r3, r7, r0
 8001084:	1dba      	adds	r2, r7, #6
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	210f      	movs	r1, #15
 800108a:	400a      	ands	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
	noteBuffer = 0x7F & note; //To be sure that note is 7 bits value
 800108e:	240e      	movs	r4, #14
 8001090:	193b      	adds	r3, r7, r4
 8001092:	1dfa      	adds	r2, r7, #7
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	217f      	movs	r1, #127	; 0x7f
 8001098:	400a      	ands	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
	velocityBuffer = 0x7F & velocity; //To be sure that velocity is 7 bits value
 800109c:	250d      	movs	r5, #13
 800109e:	197b      	adds	r3, r7, r5
 80010a0:	1d7a      	adds	r2, r7, #5
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	217f      	movs	r1, #127	; 0x7f
 80010a6:	400a      	ands	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = channelBuffer+NOTE_ON;
 80010aa:	183b      	adds	r3, r7, r0
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	3b70      	subs	r3, #112	; 0x70
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <srv_midi_internal_sendNote+0x90>)
 80010b4:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <srv_midi_internal_sendNote+0x90>)
 80010b8:	193a      	adds	r2, r7, r4
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <srv_midi_internal_sendNote+0x90>)
 80010c0:	197a      	adds	r2, r7, r5
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 80010c6:	23fa      	movs	r3, #250	; 0xfa
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4906      	ldr	r1, [pc, #24]	; (80010e4 <srv_midi_internal_sendNote+0x90>)
 80010cc:	2224      	movs	r2, #36	; 0x24
 80010ce:	18b8      	adds	r0, r7, r2
 80010d0:	2203      	movs	r2, #3
 80010d2:	f002 ff6b 	bl	8003fac <HAL_UART_Transmit>
}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b004      	add	sp, #16
 80010dc:	bcb0      	pop	{r4, r5, r7}
 80010de:	bc08      	pop	{r3}
 80010e0:	b002      	add	sp, #8
 80010e2:	4718      	bx	r3
 80010e4:	200001e8 	.word	0x200001e8

080010e8 <srv_midi_internal_controlChange>:

void srv_midi_internal_controlChange(uint8_t controlNumber, uint8_t controlValue, UART_HandleTypeDef uart){
 80010e8:	b082      	sub	sp, #8
 80010ea:	b5b0      	push	{r4, r5, r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	0004      	movs	r4, r0
 80010f2:	0008      	movs	r0, r1
 80010f4:	2518      	movs	r5, #24
 80010f6:	1979      	adds	r1, r7, r5
 80010f8:	600a      	str	r2, [r1, #0]
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	1c22      	adds	r2, r4, #0
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	1c02      	adds	r2, r0, #0
 8001106:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = CONTROL_CHANGE;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <srv_midi_internal_controlChange+0x54>)
 800110a:	22b0      	movs	r2, #176	; 0xb0
 800110c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = controlNumber;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <srv_midi_internal_controlChange+0x54>)
 8001110:	1dfa      	adds	r2, r7, #7
 8001112:	7812      	ldrb	r2, [r2, #0]
 8001114:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = controlValue;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <srv_midi_internal_controlChange+0x54>)
 8001118:	1dba      	adds	r2, r7, #6
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 800111e:	23fa      	movs	r3, #250	; 0xfa
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4906      	ldr	r1, [pc, #24]	; (800113c <srv_midi_internal_controlChange+0x54>)
 8001124:	1978      	adds	r0, r7, r5
 8001126:	2203      	movs	r2, #3
 8001128:	f002 ff40 	bl	8003fac <HAL_UART_Transmit>

}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bcb0      	pop	{r4, r5, r7}
 8001134:	bc08      	pop	{r3}
 8001136:	b002      	add	sp, #8
 8001138:	4718      	bx	r3
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200001e8 	.word	0x200001e8

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_MspInit+0x64>)
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_MspInit+0x64>)
 800114c:	2101      	movs	r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_MspInit+0x64>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_MspInit+0x64>)
 8001160:	69da      	ldr	r2, [r3, #28]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x64>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0549      	lsls	r1, r1, #21
 8001168:	430a      	orrs	r2, r1
 800116a:	61da      	str	r2, [r3, #28]
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x64>)
 800116e:	69da      	ldr	r2, [r3, #28]
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	055b      	lsls	r3, r3, #21
 8001174:	4013      	ands	r3, r2
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2003      	movs	r0, #3
 8001180:	f001 f94c 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001184:	2003      	movs	r0, #3
 8001186:	f001 f95e 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2004      	movs	r0, #4
 8001190:	f001 f944 	bl	800241c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001194:	2004      	movs	r0, #4
 8001196:	f001 f956 	bl	8002446 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	2414      	movs	r4, #20
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	0018      	movs	r0, r3
 80011b6:	2314      	movs	r3, #20
 80011b8:	001a      	movs	r2, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	f003 fe65 	bl	8004e8a <memset>
  if(hadc->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <HAL_ADC_MspInit+0xd0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d151      	bne.n	800126e <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011cc:	699a      	ldr	r2, [r3, #24]
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0089      	lsls	r1, r1, #2
 80011d4:	430a      	orrs	r2, r1
 80011d6:	619a      	str	r2, [r3, #24]
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011da:	699a      	ldr	r2, [r3, #24]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011e8:	695a      	ldr	r2, [r3, #20]
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011ec:	2180      	movs	r1, #128	; 0x80
 80011ee:	0309      	lsls	r1, r1, #12
 80011f0:	430a      	orrs	r2, r1
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_ADC_MspInit+0xd4>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	031b      	lsls	r3, r3, #12
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_ADC_MspInit+0xd4>)
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_ADC_MspInit+0xd4>)
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	0289      	lsls	r1, r1, #10
 800120c:	430a      	orrs	r2, r1
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_ADC_MspInit+0xd4>)
 8001212:	695a      	ldr	r2, [r3, #20]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	029b      	lsls	r3, r3, #10
 8001218:	4013      	ands	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = Photo_resistor1_Pin|Photo_resistor2_Pin|Photo_resistor4_Pin;
 800121e:	193b      	adds	r3, r7, r4
 8001220:	220b      	movs	r2, #11
 8001222:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001224:	193b      	adds	r3, r7, r4
 8001226:	2203      	movs	r2, #3
 8001228:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	193b      	adds	r3, r7, r4
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	193b      	adds	r3, r7, r4
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_ADC_MspInit+0xd8>)
 8001234:	0019      	movs	r1, r3
 8001236:	0010      	movs	r0, r2
 8001238:	f001 fb02 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Photo_resistor5_Pin|Photo_resistor3_Pin;
 800123c:	0021      	movs	r1, r4
 800123e:	187b      	adds	r3, r7, r1
 8001240:	2211      	movs	r2, #17
 8001242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	187b      	adds	r3, r7, r1
 8001246:	2203      	movs	r2, #3
 8001248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	187b      	adds	r3, r7, r1
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	187a      	adds	r2, r7, r1
 8001252:	2390      	movs	r3, #144	; 0x90
 8001254:	05db      	lsls	r3, r3, #23
 8001256:	0011      	movs	r1, r2
 8001258:	0018      	movs	r0, r3
 800125a:	f001 faf1 	bl	8002840 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	200c      	movs	r0, #12
 8001264:	f001 f8da 	bl	800241c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001268:	200c      	movs	r0, #12
 800126a:	f001 f8ec 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b00b      	add	sp, #44	; 0x2c
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	40012400 	.word	0x40012400
 800127c:	40021000 	.word	0x40021000
 8001280:	48000800 	.word	0x48000800

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <HAL_TIM_Base_MspInit+0x44>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d113      	bne.n	80012be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_Base_MspInit+0x48>)
 8001298:	69da      	ldr	r2, [r3, #28]
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_TIM_Base_MspInit+0x48>)
 800129c:	2102      	movs	r1, #2
 800129e:	430a      	orrs	r2, r1
 80012a0:	61da      	str	r2, [r3, #28]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_Base_MspInit+0x48>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2010      	movs	r0, #16
 80012b4:	f001 f8b2 	bl	800241c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012b8:	2010      	movs	r0, #16
 80012ba:	f001 f8c4 	bl	8002446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08d      	sub	sp, #52	; 0x34
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	241c      	movs	r4, #28
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	0018      	movs	r0, r3
 80012de:	2314      	movs	r3, #20
 80012e0:	001a      	movs	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	f003 fdd1 	bl	8004e8a <memset>
  if(huart->Instance==USART1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a49      	ldr	r2, [pc, #292]	; (8001414 <HAL_UART_MspInit+0x144>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d134      	bne.n	800135c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_UART_MspInit+0x148>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <HAL_UART_MspInit+0x148>)
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	01c9      	lsls	r1, r1, #7
 80012fc:	430a      	orrs	r2, r1
 80012fe:	619a      	str	r2, [r3, #24]
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	01db      	lsls	r3, r3, #7
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0289      	lsls	r1, r1, #10
 8001318:	430a      	orrs	r2, r1
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <HAL_UART_MspInit+0x148>)
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	029b      	lsls	r3, r3, #10
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800132a:	193b      	adds	r3, r7, r4
 800132c:	22c0      	movs	r2, #192	; 0xc0
 800132e:	00d2      	lsls	r2, r2, #3
 8001330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	0021      	movs	r1, r4
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2202      	movs	r2, #2
 8001338:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001340:	187b      	adds	r3, r7, r1
 8001342:	2203      	movs	r2, #3
 8001344:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2201      	movs	r2, #1
 800134a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134c:	187a      	adds	r2, r7, r1
 800134e:	2390      	movs	r3, #144	; 0x90
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f001 fa73 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135a:	e056      	b.n	800140a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a2e      	ldr	r2, [pc, #184]	; (800141c <HAL_UART_MspInit+0x14c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d151      	bne.n	800140a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_UART_MspInit+0x148>)
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0289      	lsls	r1, r1, #10
 8001370:	430a      	orrs	r2, r1
 8001372:	61da      	str	r2, [r3, #28]
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	029b      	lsls	r3, r3, #10
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001388:	2180      	movs	r1, #128	; 0x80
 800138a:	0289      	lsls	r1, r1, #10
 800138c:	430a      	orrs	r2, r1
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_UART_MspInit+0x148>)
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	029b      	lsls	r3, r3, #10
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800139e:	241c      	movs	r4, #28
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2204      	movs	r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2202      	movs	r2, #2
 80013aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2203      	movs	r2, #3
 80013b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2201      	movs	r2, #1
 80013bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80013be:	193a      	adds	r2, r7, r4
 80013c0:	2390      	movs	r3, #144	; 0x90
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	0011      	movs	r1, r2
 80013c6:	0018      	movs	r0, r3
 80013c8:	f001 fa3a 	bl	8002840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 80013cc:	0021      	movs	r1, r4
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2208      	movs	r2, #8
 80013d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2202      	movs	r2, #2
 80013d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2202      	movs	r2, #2
 80013de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2203      	movs	r2, #3
 80013e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2201      	movs	r2, #1
 80013ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80013ec:	187a      	adds	r2, r7, r1
 80013ee:	2390      	movs	r3, #144	; 0x90
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	0011      	movs	r1, r2
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fa23 	bl	8002840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	201c      	movs	r0, #28
 8001400:	f001 f80c 	bl	800241c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f001 f81e 	bl	8002446 <HAL_NVIC_EnableIRQ>
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b00d      	add	sp, #52	; 0x34
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40013800 	.word	0x40013800
 8001418:	40021000 	.word	0x40021000
 800141c:	40004400 	.word	0x40004400

08001420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <NMI_Handler+0x4>

08001426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <HardFault_Handler+0x4>

0800142c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f8de 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001452:	f001 f893 	bl	800257c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800146a:	2001      	movs	r0, #1
 800146c:	f001 fb92 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001470:	2002      	movs	r0, #2
 8001472:	f001 fb8f 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001480:	2020      	movs	r0, #32
 8001482:	f001 fb87 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001486:	2040      	movs	r0, #64	; 0x40
 8001488:	f001 fb84 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800148c:	2080      	movs	r0, #128	; 0x80
 800148e:	f001 fb81 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	0018      	movs	r0, r3
 8001498:	f001 fb7c 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fb77 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	0018      	movs	r0, r3
 80014ac:	f001 fb72 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	0018      	movs	r0, r3
 80014b6:	f001 fb6d 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	0018      	movs	r0, r3
 80014c0:	f001 fb68 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <ADC1_IRQHandler+0x14>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fb4e 	bl	8001b74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	200001a8 	.word	0x200001a8

080014e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <TIM3_IRQHandler+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f002 f988 	bl	8003800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	20000058 	.word	0x20000058

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <USART2_IRQHandler+0x14>)
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fdfc 	bl	8004100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	20000124 	.word	0x20000124

08001514 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001522:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490e      	ldr	r1, [pc, #56]	; (8001560 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0b      	ldr	r4, [pc, #44]	; (800156c <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800154a:	f7ff ffe3 	bl	8001514 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800154e:	f003 fc6f 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001552:	f7fe ff4f 	bl	80003f4 <main>

08001556 <LoopForever>:

LoopForever:
    b LoopForever
 8001556:	e7fe      	b.n	8001556 <LoopForever>
  ldr   r0, =_estack
 8001558:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001564:	08004ef4 	.word	0x08004ef4
  ldr r2, =_sbss
 8001568:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800156c:	20000210 	.word	0x20000210

08001570 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <DMA1_Channel1_IRQHandler>
	...

08001574 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_Init+0x24>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_Init+0x24>)
 800157e:	2110      	movs	r1, #16
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001584:	2000      	movs	r0, #0
 8001586:	f000 f809 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158a:	f7ff fdd9 	bl	8001140 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <HAL_InitTick+0x5c>)
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_InitTick+0x60>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	0019      	movs	r1, r3
 80015ae:	23fa      	movs	r3, #250	; 0xfa
 80015b0:	0098      	lsls	r0, r3, #2
 80015b2:	f7fe fda9 	bl	8000108 <__udivsi3>
 80015b6:	0003      	movs	r3, r0
 80015b8:	0019      	movs	r1, r3
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7fe fda4 	bl	8000108 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 ff4f 	bl	8002466 <HAL_SYSTICK_Config>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00f      	b.n	80015f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d80b      	bhi.n	80015ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	2301      	movs	r3, #1
 80015da:	425b      	negs	r3, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 ff1c 	bl	800241c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_InitTick+0x64>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b003      	add	sp, #12
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	20000004 	.word	0x20000004
 80015fc:	2000000c 	.word	0x2000000c
 8001600:	20000008 	.word	0x20000008

08001604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	18d2      	adds	r2, r2, r3
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_IncTick+0x20>)
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	46c0      	nop			; (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	2000000c 	.word	0x2000000c
 8001624:	200001ec 	.word	0x200001ec

08001628 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	200001ec 	.word	0x200001ec

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff fff0 	bl	8001628 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_Delay+0x44>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	001a      	movs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	189b      	adds	r3, r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	f7ff ffe0 	bl	8001628 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	429a      	cmp	r2, r3
 8001672:	d8f7      	bhi.n	8001664 <HAL_Delay+0x28>
  {
  }
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	2000000c 	.word	0x2000000c

08001684 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168c:	230f      	movs	r3, #15
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e125      	b.n	80018ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10a      	bne.n	80016c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2234      	movs	r2, #52	; 0x34
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7ff fd74 	bl	80011a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	2210      	movs	r2, #16
 80016c6:	4013      	ands	r3, r2
 80016c8:	d000      	beq.n	80016cc <HAL_ADC_Init+0x48>
 80016ca:	e103      	b.n	80018d4 <HAL_ADC_Init+0x250>
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d000      	beq.n	80016d8 <HAL_ADC_Init+0x54>
 80016d6:	e0fd      	b.n	80018d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2204      	movs	r2, #4
 80016e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80016e2:	d000      	beq.n	80016e6 <HAL_ADC_Init+0x62>
 80016e4:	e0f6      	b.n	80018d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	4a83      	ldr	r2, [pc, #524]	; (80018f8 <HAL_ADC_Init+0x274>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	2202      	movs	r2, #2
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	2b01      	cmp	r3, #1
 8001702:	d112      	bne.n	800172a <HAL_ADC_Init+0xa6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	4013      	ands	r3, r2
 800170e:	2b01      	cmp	r3, #1
 8001710:	d009      	beq.n	8001726 <HAL_ADC_Init+0xa2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	401a      	ands	r2, r3
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	429a      	cmp	r2, r3
 8001724:	d101      	bne.n	800172a <HAL_ADC_Init+0xa6>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_ADC_Init+0xa8>
 800172a:	2300      	movs	r3, #0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d116      	bne.n	800175e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2218      	movs	r2, #24
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	0899      	lsrs	r1, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4964      	ldr	r1, [pc, #400]	; (80018fc <HAL_ADC_Init+0x278>)
 800176a:	400a      	ands	r2, r1
 800176c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7e1b      	ldrb	r3, [r3, #24]
 8001772:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e5b      	ldrb	r3, [r3, #25]
 8001778:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800177a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e9b      	ldrb	r3, [r3, #26]
 8001780:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001782:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	2b01      	cmp	r3, #1
 800178a:	d002      	beq.n	8001792 <HAL_ADC_Init+0x10e>
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	e000      	b.n	8001794 <HAL_ADC_Init+0x110>
 8001792:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001794:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800179a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Init+0x124>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e000      	b.n	80017aa <HAL_ADC_Init+0x126>
 80017a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80017aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2124      	movs	r1, #36	; 0x24
 80017b0:	5c5b      	ldrb	r3, [r3, r1]
 80017b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80017b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7edb      	ldrb	r3, [r3, #27]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d115      	bne.n	80017f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7e9b      	ldrb	r3, [r3, #26]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	0252      	lsls	r2, r2, #9
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	e00b      	b.n	80017f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017dc:	2220      	movs	r2, #32
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e8:	2201      	movs	r2, #1
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69da      	ldr	r2, [r3, #28]
 80017f4:	23c2      	movs	r3, #194	; 0xc2
 80017f6:	33ff      	adds	r3, #255	; 0xff
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d007      	beq.n	800180c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001804:	4313      	orrs	r3, r2
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4313      	orrs	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	055b      	lsls	r3, r3, #21
 8001824:	429a      	cmp	r2, r3
 8001826:	d01b      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d017      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	2b02      	cmp	r3, #2
 8001836:	d013      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	2b03      	cmp	r3, #3
 800183e:	d00f      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00b      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	2b05      	cmp	r3, #5
 800184e:	d007      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	2b06      	cmp	r3, #6
 8001856:	d003      	beq.n	8001860 <HAL_ADC_Init+0x1dc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2b07      	cmp	r3, #7
 800185e:	d112      	bne.n	8001886 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2107      	movs	r1, #7
 800186c:	438a      	bics	r2, r1
 800186e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6959      	ldr	r1, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	2207      	movs	r2, #7
 800187c:	401a      	ands	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_ADC_Init+0x27c>)
 800188e:	4013      	ands	r3, r2
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	429a      	cmp	r2, r3
 8001894:	d10b      	bne.n	80018ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2203      	movs	r2, #3
 80018a2:	4393      	bics	r3, r2
 80018a4:	2201      	movs	r2, #1
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018ac:	e01c      	b.n	80018e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	2212      	movs	r2, #18
 80018b4:	4393      	bics	r3, r2
 80018b6:	2210      	movs	r2, #16
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c2:	2201      	movs	r2, #1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80018ca:	230f      	movs	r3, #15
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018d2:	e009      	b.n	80018e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	2210      	movs	r2, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80018e0:	230f      	movs	r3, #15
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018e8:	230f      	movs	r3, #15
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b004      	add	sp, #16
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	fffffefd 	.word	0xfffffefd
 80018fc:	fffe0219 	.word	0xfffe0219
 8001900:	833fffe7 	.word	0x833fffe7

08001904 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190c:	230f      	movs	r3, #15
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2204      	movs	r2, #4
 800191c:	4013      	ands	r3, r2
 800191e:	d138      	bne.n	8001992 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2234      	movs	r2, #52	; 0x34
 8001924:	5c9b      	ldrb	r3, [r3, r2]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_Start+0x2a>
 800192a:	2302      	movs	r3, #2
 800192c:	e038      	b.n	80019a0 <HAL_ADC_Start+0x9c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2234      	movs	r2, #52	; 0x34
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7e5b      	ldrb	r3, [r3, #25]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800193e:	230f      	movs	r3, #15
 8001940:	18fc      	adds	r4, r7, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0018      	movs	r0, r3
 8001946:	f000 fad3 	bl	8001ef0 <ADC_Enable>
 800194a:	0003      	movs	r3, r0
 800194c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d120      	bne.n	800199a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_ADC_Start+0xa4>)
 800195e:	4013      	ands	r3, r2
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0052      	lsls	r2, r2, #1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2100      	movs	r1, #0
 8001976:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	221c      	movs	r2, #28
 800197e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2104      	movs	r1, #4
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	e003      	b.n	800199a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001992:	230f      	movs	r3, #15
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	2202      	movs	r2, #2
 8001998:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800199a:	230f      	movs	r3, #15
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	781b      	ldrb	r3, [r3, #0]
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b005      	add	sp, #20
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	fffff0fe 	.word	0xfffff0fe

080019ac <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	230f      	movs	r3, #15
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2234      	movs	r2, #52	; 0x34
 80019c0:	5c9b      	ldrb	r3, [r3, r2]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Stop+0x1e>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e029      	b.n	8001a1e <HAL_ADC_Stop+0x72>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2234      	movs	r2, #52	; 0x34
 80019ce:	2101      	movs	r1, #1
 80019d0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80019d2:	250f      	movs	r5, #15
 80019d4:	197c      	adds	r4, r7, r5
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 fb7e 	bl	80020da <ADC_ConversionStop>
 80019de:	0003      	movs	r3, r0
 80019e0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019e2:	197b      	adds	r3, r7, r5
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d112      	bne.n	8001a10 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019ea:	197c      	adds	r4, r7, r5
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 fb02 	bl	8001ff8 <ADC_Disable>
 80019f4:	0003      	movs	r3, r0
 80019f6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80019f8:	197b      	adds	r3, r7, r5
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_ADC_Stop+0x7c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	2201      	movs	r2, #1
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2234      	movs	r2, #52	; 0x34
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	fffffefe 	.word	0xfffffefe

08001a2c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a3e:	2308      	movs	r3, #8
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e014      	b.n	8001a6e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10b      	bne.n	8001a6a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a56:	2220      	movs	r2, #32
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2234      	movs	r2, #52	; 0x34
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e071      	b.n	8001b4e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a6e:	f7ff fddb 	bl	8001628 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a76:	e01f      	b.n	8001ab8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	d01c      	beq.n	8001ab8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x68>
 8001a84:	f7ff fdd0 	bl	8001628 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d211      	bcs.n	8001ab8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2234      	movs	r2, #52	; 0x34
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e04a      	b.n	8001b4e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0d9      	beq.n	8001a78 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	23c0      	movs	r3, #192	; 0xc0
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d12d      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d129      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2208      	movs	r2, #8
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d122      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2204      	movs	r2, #4
 8001afe:	4013      	ands	r3, r2
 8001b00:	d110      	bne.n	8001b24 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	210c      	movs	r1, #12
 8001b0e:	438a      	bics	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_ADC_PollForConversion+0x12c>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
 8001b22:	e00b      	b.n	8001b3c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	2220      	movs	r2, #32
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	2201      	movs	r2, #1
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	220c      	movs	r2, #12
 8001b4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	fffffefe 	.word	0xfffffefe

08001b5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_IRQHandler+0x24>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2204      	movs	r2, #4
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00d      	beq.n	8001bb4 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d14f      	bne.n	8001c46 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2208      	movs	r2, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d148      	bne.n	8001c46 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	2210      	movs	r2, #16
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d106      	bne.n	8001bcc <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d12d      	bne.n	8001c36 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d129      	bne.n	8001c36 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d122      	bne.n	8001c36 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d110      	bne.n	8001c1e <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	210c      	movs	r1, #12
 8001c08:	438a      	bics	r2, r1
 8001c0a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c10:	4a33      	ldr	r2, [pc, #204]	; (8001ce0 <HAL_ADC_IRQHandler+0x16c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	2201      	movs	r2, #1
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1c:	e00b      	b.n	8001c36 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	2220      	movs	r2, #32
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	2201      	movs	r2, #1
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7fe ffd9 	bl	8000bf0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b80      	cmp	r3, #128	; 0x80
 8001c52:	d115      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x10c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b80      	cmp	r3, #128	; 0x80
 8001c60:	d10e      	bne.n	8001c80 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	0252      	lsls	r2, r2, #9
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f836 	bl	8001ce4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2280      	movs	r2, #128	; 0x80
 8001c7e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d123      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x162>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b10      	cmp	r3, #16
 8001c9a:	d11c      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d006      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d10d      	bne.n	8001cce <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f813 	bl	8001cf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	601a      	str	r2, [r3, #0]
  }

}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b002      	add	sp, #8
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	fffffefe 	.word	0xfffffefe

08001ce4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b002      	add	sp, #8
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	055b      	lsls	r3, r3, #21
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d011      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x46>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00d      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x46>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d009      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x46>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d005      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x46>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d001      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x46>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2234      	movs	r2, #52	; 0x34
 8001d4e:	5c9b      	ldrb	r3, [r3, r2]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x54>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0bb      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1cc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2234      	movs	r2, #52	; 0x34
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d000      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x6a>
 8001d6c:	e09f      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a59      	ldr	r2, [pc, #356]	; (8001ed8 <HAL_ADC_ConfigChannel+0x1d4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d100      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x76>
 8001d78:	e077      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d037      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d033      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d02f      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d02b      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d027      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d023      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d01f      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	2b07      	cmp	r3, #7
 8001dd2:	d01b      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2107      	movs	r1, #7
 8001de0:	400b      	ands	r3, r1
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d012      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2107      	movs	r1, #7
 8001df2:	438a      	bics	r2, r1
 8001df4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6959      	ldr	r1, [r3, #20]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2207      	movs	r2, #7
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d003      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x118>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b11      	cmp	r3, #17
 8001e1a:	d152      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <HAL_ADC_ConfigChannel+0x1d8>)
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d102      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x12a>
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	e001      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x12e>
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	03db      	lsls	r3, r3, #15
 8001e32:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_ADC_ConfigChannel+0x1d8>)
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d140      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_ADC_ConfigChannel+0x1dc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <HAL_ADC_ConfigChannel+0x1e0>)
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7fe f95e 	bl	8000108 <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	001a      	movs	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	189b      	adds	r3, r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e5a:	e002      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x158>
 8001e68:	e02b      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4099      	lsls	r1, r3
 8001e78:	000b      	movs	r3, r1
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	400a      	ands	r2, r1
 8001e82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d003      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x190>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d116      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_ADC_ConfigChannel+0x1d8>)
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1a0>
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x1a2>
 8001ea4:	4a11      	ldr	r2, [pc, #68]	; (8001eec <HAL_ADC_ConfigChannel+0x1e8>)
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <HAL_ADC_ConfigChannel+0x1d8>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e009      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001eba:	230f      	movs	r3, #15
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2234      	movs	r2, #52	; 0x34
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001eca:	230f      	movs	r3, #15
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b004      	add	sp, #16
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00001001 	.word	0x00001001
 8001edc:	40012708 	.word	0x40012708
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	000f4240 	.word	0x000f4240
 8001ee8:	ff7fffff 	.word	0xff7fffff
 8001eec:	ffbfffff 	.word	0xffbfffff

08001ef0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d112      	bne.n	8001f34 <ADC_Enable+0x44>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d009      	beq.n	8001f30 <ADC_Enable+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	401a      	ands	r2, r3
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d101      	bne.n	8001f34 <ADC_Enable+0x44>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <ADC_Enable+0x46>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d152      	bne.n	8001fe0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <ADC_Enable+0xfc>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	2201      	movs	r2, #1
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e03f      	b.n	8001fe2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <ADC_Enable+0x100>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	491f      	ldr	r1, [pc, #124]	; (8001ff4 <ADC_Enable+0x104>)
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f7fe f8c5 	bl	8000108 <__udivsi3>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f82:	e002      	b.n	8001f8a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fb4a 	bl	8001628 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f98:	e01b      	b.n	8001fd2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7ff fb45 	bl	8001628 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d914      	bls.n	8001fd2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d00d      	beq.n	8001fd2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	2210      	movs	r2, #16
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e007      	b.n	8001fe2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d1dc      	bne.n	8001f9a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	80000017 	.word	0x80000017
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	000f4240 	.word	0x000f4240

08001ff8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	2b01      	cmp	r3, #1
 8002010:	d112      	bne.n	8002038 <ADC_Disable+0x40>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	2b01      	cmp	r3, #1
 800201e:	d009      	beq.n	8002034 <ADC_Disable+0x3c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	401a      	ands	r2, r3
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	429a      	cmp	r2, r3
 8002032:	d101      	bne.n	8002038 <ADC_Disable+0x40>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <ADC_Disable+0x42>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d048      	beq.n	80020d0 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2205      	movs	r2, #5
 8002046:	4013      	ands	r3, r2
 8002048:	2b01      	cmp	r3, #1
 800204a:	d110      	bne.n	800206e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2102      	movs	r1, #2
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2203      	movs	r2, #3
 8002062:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002064:	f7ff fae0 	bl	8001628 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800206c:	e029      	b.n	80020c2 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	2210      	movs	r2, #16
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	2201      	movs	r2, #1
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e023      	b.n	80020d2 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208a:	f7ff facd 	bl	8001628 <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d914      	bls.n	80020c2 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2201      	movs	r2, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10d      	bne.n	80020c2 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	2210      	movs	r2, #16
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b6:	2201      	movs	r2, #1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d0dc      	beq.n	800208a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b004      	add	sp, #16
 80020d8:	bd80      	pop	{r7, pc}

080020da <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d03a      	beq.n	8002168 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2204      	movs	r2, #4
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d10d      	bne.n	800211c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800210a:	d107      	bne.n	800211c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2110      	movs	r1, #16
 8002118:	430a      	orrs	r2, r1
 800211a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800211c:	f7ff fa84 	bl	8001628 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002124:	e01a      	b.n	800215c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002126:	f7ff fa7f 	bl	8001628 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d913      	bls.n	800215c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2204      	movs	r2, #4
 800213c:	4013      	ands	r3, r2
 800213e:	d00d      	beq.n	800215c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	2210      	movs	r2, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2201      	movs	r2, #1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e006      	b.n	800216a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2204      	movs	r2, #4
 8002164:	4013      	ands	r3, r2
 8002166:	d1de      	bne.n	8002126 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2317      	movs	r3, #23
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2234      	movs	r2, #52	; 0x34
 8002190:	5c9b      	ldrb	r3, [r3, r2]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_ADCEx_Calibration_Start+0x26>
 8002196:	2302      	movs	r3, #2
 8002198:	e08d      	b.n	80022b6 <HAL_ADCEx_Calibration_Start+0x142>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2234      	movs	r2, #52	; 0x34
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2203      	movs	r2, #3
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d112      	bne.n	80021d6 <HAL_ADCEx_Calibration_Start+0x62>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d009      	beq.n	80021d2 <HAL_ADCEx_Calibration_Start+0x5e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	401a      	ands	r2, r3
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d101      	bne.n	80021d6 <HAL_ADCEx_Calibration_Start+0x62>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_ADCEx_Calibration_Start+0x64>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d15b      	bne.n	8002294 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e0:	4a37      	ldr	r2, [pc, #220]	; (80022c0 <HAL_ADCEx_Calibration_Start+0x14c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	2202      	movs	r2, #2
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	2203      	movs	r2, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2103      	movs	r1, #3
 8002204:	438a      	bics	r2, r1
 8002206:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0609      	lsls	r1, r1, #24
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800221a:	f7ff fa05 	bl	8001628 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002222:	e01d      	b.n	8002260 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002224:	f7ff fa00 	bl	8001628 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d916      	bls.n	8002260 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	0fdb      	lsrs	r3, r3, #31
 800223a:	07da      	lsls	r2, r3, #31
 800223c:	2380      	movs	r3, #128	; 0x80
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	429a      	cmp	r2, r3
 8002242:	d10d      	bne.n	8002260 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2212      	movs	r2, #18
 800224a:	4393      	bics	r3, r2
 800224c:	2210      	movs	r2, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2234      	movs	r2, #52	; 0x34
 8002258:	2100      	movs	r1, #0
 800225a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e02a      	b.n	80022b6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0fdb      	lsrs	r3, r3, #31
 8002268:	07da      	lsls	r2, r3, #31
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	429a      	cmp	r2, r3
 8002270:	d0d8      	beq.n	8002224 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68d9      	ldr	r1, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	430a      	orrs	r2, r1
 8002280:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	2203      	movs	r2, #3
 8002288:	4393      	bics	r3, r2
 800228a:	2201      	movs	r2, #1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	639a      	str	r2, [r3, #56]	; 0x38
 8002292:	e009      	b.n	80022a8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	2220      	movs	r2, #32
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80022a0:	2317      	movs	r3, #23
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2234      	movs	r2, #52	; 0x34
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80022b0:	2317      	movs	r3, #23
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b006      	add	sp, #24
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	fffffefd 	.word	0xfffffefd

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	0002      	movs	r2, r0
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	1dfb      	adds	r3, r7, #7
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b7f      	cmp	r3, #127	; 0x7f
 80022d6:	d809      	bhi.n	80022ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d8:	1dfb      	adds	r3, r7, #7
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	001a      	movs	r2, r3
 80022de:	231f      	movs	r3, #31
 80022e0:	401a      	ands	r2, r3
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <__NVIC_EnableIRQ+0x30>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	4091      	lsls	r1, r2
 80022e8:	000a      	movs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
  }
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b002      	add	sp, #8
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	e000e100 	.word	0xe000e100

080022f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	0002      	movs	r2, r0
 8002300:	6039      	str	r1, [r7, #0]
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b7f      	cmp	r3, #127	; 0x7f
 800230c:	d828      	bhi.n	8002360 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800230e:	4a2f      	ldr	r2, [pc, #188]	; (80023cc <__NVIC_SetPriority+0xd4>)
 8002310:	1dfb      	adds	r3, r7, #7
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	33c0      	adds	r3, #192	; 0xc0
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	589b      	ldr	r3, [r3, r2]
 800231e:	1dfa      	adds	r2, r7, #7
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	0011      	movs	r1, r2
 8002324:	2203      	movs	r2, #3
 8002326:	400a      	ands	r2, r1
 8002328:	00d2      	lsls	r2, r2, #3
 800232a:	21ff      	movs	r1, #255	; 0xff
 800232c:	4091      	lsls	r1, r2
 800232e:	000a      	movs	r2, r1
 8002330:	43d2      	mvns	r2, r2
 8002332:	401a      	ands	r2, r3
 8002334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	22ff      	movs	r2, #255	; 0xff
 800233c:	401a      	ands	r2, r3
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	0018      	movs	r0, r3
 8002344:	2303      	movs	r3, #3
 8002346:	4003      	ands	r3, r0
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800234c:	481f      	ldr	r0, [pc, #124]	; (80023cc <__NVIC_SetPriority+0xd4>)
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	b25b      	sxtb	r3, r3
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	430a      	orrs	r2, r1
 8002358:	33c0      	adds	r3, #192	; 0xc0
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800235e:	e031      	b.n	80023c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <__NVIC_SetPriority+0xd8>)
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	0019      	movs	r1, r3
 8002368:	230f      	movs	r3, #15
 800236a:	400b      	ands	r3, r1
 800236c:	3b08      	subs	r3, #8
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3306      	adds	r3, #6
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	18d3      	adds	r3, r2, r3
 8002376:	3304      	adds	r3, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	1dfa      	adds	r2, r7, #7
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	0011      	movs	r1, r2
 8002380:	2203      	movs	r2, #3
 8002382:	400a      	ands	r2, r1
 8002384:	00d2      	lsls	r2, r2, #3
 8002386:	21ff      	movs	r1, #255	; 0xff
 8002388:	4091      	lsls	r1, r2
 800238a:	000a      	movs	r2, r1
 800238c:	43d2      	mvns	r2, r2
 800238e:	401a      	ands	r2, r3
 8002390:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	019b      	lsls	r3, r3, #6
 8002396:	22ff      	movs	r2, #255	; 0xff
 8002398:	401a      	ands	r2, r3
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	0018      	movs	r0, r3
 80023a0:	2303      	movs	r3, #3
 80023a2:	4003      	ands	r3, r0
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a8:	4809      	ldr	r0, [pc, #36]	; (80023d0 <__NVIC_SetPriority+0xd8>)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	001c      	movs	r4, r3
 80023b0:	230f      	movs	r3, #15
 80023b2:	4023      	ands	r3, r4
 80023b4:	3b08      	subs	r3, #8
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	430a      	orrs	r2, r1
 80023ba:	3306      	adds	r3, #6
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	18c3      	adds	r3, r0, r3
 80023c0:	3304      	adds	r3, #4
 80023c2:	601a      	str	r2, [r3, #0]
}
 80023c4:	46c0      	nop			; (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b003      	add	sp, #12
 80023ca:	bd90      	pop	{r4, r7, pc}
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	045b      	lsls	r3, r3, #17
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d301      	bcc.n	80023ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e8:	2301      	movs	r3, #1
 80023ea:	e010      	b.n	800240e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <SysTick_Config+0x44>)
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	3a01      	subs	r2, #1
 80023f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f4:	2301      	movs	r3, #1
 80023f6:	425b      	negs	r3, r3
 80023f8:	2103      	movs	r1, #3
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7ff ff7c 	bl	80022f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x44>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x44>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	210f      	movs	r1, #15
 8002428:	187b      	adds	r3, r7, r1
 800242a:	1c02      	adds	r2, r0, #0
 800242c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	187b      	adds	r3, r7, r1
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b25b      	sxtb	r3, r3
 8002436:	0011      	movs	r1, r2
 8002438:	0018      	movs	r0, r3
 800243a:	f7ff ff5d 	bl	80022f8 <__NVIC_SetPriority>
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b004      	add	sp, #16
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	0002      	movs	r2, r0
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff ff33 	bl	80022c4 <__NVIC_EnableIRQ>
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f7ff ffaf 	bl	80023d4 <SysTick_Config>
 8002476:	0003      	movs	r3, r0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2221      	movs	r2, #33	; 0x21
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2204      	movs	r2, #4
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	2100      	movs	r1, #0
 80024a0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e020      	b.n	80024e8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	210e      	movs	r1, #14
 80024b2:	438a      	bics	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2101      	movs	r1, #1
 80024c2:	438a      	bics	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ce:	2101      	movs	r1, #1
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2221      	movs	r2, #33	; 0x21
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b002      	add	sp, #8
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	210f      	movs	r1, #15
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2221      	movs	r2, #33	; 0x21
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d006      	beq.n	800251a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e028      	b.n	800256c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	210e      	movs	r1, #14
 8002526:	438a      	bics	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	2101      	movs	r1, #1
 8002544:	4091      	lsls	r1, r2
 8002546:	000a      	movs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2221      	movs	r2, #33	; 0x21
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	0010      	movs	r0, r2
 800256a:	4798      	blx	r3
    } 
  }
  return status;
 800256c:	230f      	movs	r3, #15
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	781b      	ldrb	r3, [r3, #0]
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002586:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2210      	movs	r2, #16
 800258c:	4013      	ands	r3, r2
 800258e:	2b10      	cmp	r3, #16
 8002590:	d005      	beq.n	800259e <HAL_FLASH_IRQHandler+0x22>
 8002592:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	2b04      	cmp	r3, #4
 800259c:	d10f      	bne.n	80025be <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800259e:	4b69      	ldr	r3, [pc, #420]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 80025a4:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	4252      	negs	r2, r2
 80025aa:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 80025ac:	f000 f8fa 	bl	80027a4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 f8d2 	bl	800275c <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80025b8:	4b62      	ldr	r3, [pc, #392]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80025be:	4b60      	ldr	r3, [pc, #384]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	d000      	beq.n	80025cc <HAL_FLASH_IRQHandler+0x50>
 80025ca:	e0a1      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025cc:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 80025ce:	2220      	movs	r2, #32
 80025d0:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <HAL_FLASH_IRQHandler+0x62>
 80025dc:	e098      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80025de:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d132      	bne.n	800264e <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80025e8:	4b56      	ldr	r3, [pc, #344]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	4b55      	ldr	r3, [pc, #340]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025f0:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01b      	beq.n	8002632 <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 80025fa:	4b52      	ldr	r3, [pc, #328]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f8a2 	bl	800274c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	4694      	mov	ip, r2
 8002612:	4463      	add	r3, ip
 8002614:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002616:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800261c:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 8002622:	2102      	movs	r1, #2
 8002624:	438a      	bics	r2, r1
 8002626:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f8ea 	bl	8002804 <FLASH_PageErase>
 8002630:	e06e      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002632:	2301      	movs	r3, #1
 8002634:	425b      	negs	r3, r3
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f000 f880 	bl	800274c <HAL_FLASH_EndOfOperationCallback>
 800264c:	e060      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d10c      	bne.n	8002672 <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 800265e:	2104      	movs	r1, #4
 8002660:	438a      	bics	r2, r1
 8002662:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f871 	bl	800274c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800266a:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e04e      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	4b32      	ldr	r3, [pc, #200]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800267a:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 800267c:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8002684:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	1c9a      	adds	r2, r3, #2
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800268c:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	0419      	lsls	r1, r3, #16
 800269c:	0c14      	lsrs	r4, r2, #16
 800269e:	430c      	orrs	r4, r1
 80026a0:	0c1d      	lsrs	r5, r3, #16
 80026a2:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026a4:	611c      	str	r4, [r3, #16]
 80026a6:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80026a8:	4b25      	ldr	r3, [pc, #148]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	438a      	bics	r2, r1
 80026b2:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 80026b4:	4b23      	ldr	r3, [pc, #140]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	b292      	uxth	r2, r2
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	0011      	movs	r1, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f853 	bl	800276c <FLASH_Program_HalfWord>
 80026c6:	e023      	b.n	8002710 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d105      	bne.n	80026de <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80026d2:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f838 	bl	800274c <HAL_FLASH_EndOfOperationCallback>
 80026dc:	e011      	b.n	8002702 <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d106      	bne.n	80026f6 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	3b02      	subs	r3, #2
 80026ee:	0018      	movs	r0, r3
 80026f0:	f000 f82c 	bl	800274c <HAL_FLASH_EndOfOperationCallback>
 80026f4:	e005      	b.n	8002702 <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	3b06      	subs	r3, #6
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f825 	bl	800274c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002704:	2201      	movs	r2, #1
 8002706:	4252      	negs	r2, r2
 8002708:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10e      	bne.n	8002738 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 800271a:	4b09      	ldr	r3, [pc, #36]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 8002720:	2107      	movs	r1, #7
 8002722:	438a      	bics	r2, r1
 8002724:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_FLASH_IRQHandler+0x1c4>)
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <HAL_FLASH_IRQHandler+0x1cc>)
 800272e:	400a      	ands	r2, r1
 8002730:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <HAL_FLASH_IRQHandler+0x1c8>)
 8002734:	2200      	movs	r2, #0
 8002736:	761a      	strb	r2, [r3, #24]
  }
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bdb0      	pop	{r4, r5, r7, pc}
 8002740:	40022000 	.word	0x40022000
 8002744:	200001f0 	.word	0x200001f0
 8002748:	ffffebff 	.word	0xffffebff

0800274c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}

0800276c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	000a      	movs	r2, r1
 8002776:	1cbb      	adds	r3, r7, #2
 8002778:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <FLASH_Program_HalfWord+0x30>)
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <FLASH_Program_HalfWord+0x34>)
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <FLASH_Program_HalfWord+0x34>)
 8002786:	2101      	movs	r1, #1
 8002788:	430a      	orrs	r2, r1
 800278a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1cba      	adds	r2, r7, #2
 8002790:	8812      	ldrh	r2, [r2, #0]
 8002792:	801a      	strh	r2, [r3, #0]
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200001f0 	.word	0x200001f0
 80027a0:	40022000 	.word	0x40022000

080027a4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <FLASH_SetErrorCode+0x58>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2210      	movs	r2, #16
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d109      	bne.n	80027ce <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <FLASH_SetErrorCode+0x5c>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	2202      	movs	r2, #2
 80027c0:	431a      	orrs	r2, r3
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <FLASH_SetErrorCode+0x5c>)
 80027c4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2210      	movs	r2, #16
 80027ca:	4313      	orrs	r3, r2
 80027cc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <FLASH_SetErrorCode+0x58>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2204      	movs	r2, #4
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d109      	bne.n	80027ee <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <FLASH_SetErrorCode+0x5c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2201      	movs	r2, #1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <FLASH_SetErrorCode+0x5c>)
 80027e4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2204      	movs	r2, #4
 80027ea:	4313      	orrs	r3, r2
 80027ec:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80027ee:	4b03      	ldr	r3, [pc, #12]	; (80027fc <FLASH_SetErrorCode+0x58>)
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	60da      	str	r2, [r3, #12]
}  
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b002      	add	sp, #8
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40022000 	.word	0x40022000
 8002800:	200001f0 	.word	0x200001f0

08002804 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <FLASH_PageErase+0x34>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002812:	4b0a      	ldr	r3, [pc, #40]	; (800283c <FLASH_PageErase+0x38>)
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <FLASH_PageErase+0x38>)
 8002818:	2102      	movs	r1, #2
 800281a:	430a      	orrs	r2, r1
 800281c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800281e:	4b07      	ldr	r3, [pc, #28]	; (800283c <FLASH_PageErase+0x38>)
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <FLASH_PageErase+0x38>)
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <FLASH_PageErase+0x38>)
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	430a      	orrs	r2, r1
 800282e:	611a      	str	r2, [r3, #16]
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200001f0 	.word	0x200001f0
 800283c:	40022000 	.word	0x40022000

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284e:	e14f      	b.n	8002af0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4091      	lsls	r1, r2
 800285a:	000a      	movs	r2, r1
 800285c:	4013      	ands	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d100      	bne.n	8002868 <HAL_GPIO_Init+0x28>
 8002866:	e140      	b.n	8002aea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2203      	movs	r2, #3
 800286e:	4013      	ands	r3, r2
 8002870:	2b01      	cmp	r3, #1
 8002872:	d005      	beq.n	8002880 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800287c:	2b02      	cmp	r3, #2
 800287e:	d130      	bne.n	80028e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	409a      	lsls	r2, r3
 800288e:	0013      	movs	r3, r2
 8002890:	43da      	mvns	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	409a      	lsls	r2, r3
 80028a2:	0013      	movs	r3, r2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b6:	2201      	movs	r2, #1
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	43da      	mvns	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	2201      	movs	r2, #1
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2203      	movs	r2, #3
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d017      	beq.n	800291e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	43da      	mvns	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	4013      	ands	r3, r2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d123      	bne.n	8002972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	58d3      	ldr	r3, [r2, r3]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2207      	movs	r2, #7
 800293c:	4013      	ands	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	409a      	lsls	r2, r3
 8002944:	0013      	movs	r3, r2
 8002946:	43da      	mvns	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2107      	movs	r1, #7
 8002956:	400b      	ands	r3, r1
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	0092      	lsls	r2, r2, #2
 800296e:	6939      	ldr	r1, [r7, #16]
 8002970:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	2203      	movs	r2, #3
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	43da      	mvns	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4013      	ands	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	401a      	ands	r2, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	23c0      	movs	r3, #192	; 0xc0
 80029ac:	029b      	lsls	r3, r3, #10
 80029ae:	4013      	ands	r3, r2
 80029b0:	d100      	bne.n	80029b4 <HAL_GPIO_Init+0x174>
 80029b2:	e09a      	b.n	8002aea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b4:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	619a      	str	r2, [r3, #24]
 80029c0:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029cc:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	589b      	ldr	r3, [r3, r2]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2203      	movs	r2, #3
 80029de:	4013      	ands	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	409a      	lsls	r2, r3
 80029e6:	0013      	movs	r3, r2
 80029e8:	43da      	mvns	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x1e2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a44      	ldr	r2, [pc, #272]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x1de>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a43      	ldr	r2, [pc, #268]	; (8002b14 <HAL_GPIO_Init+0x2d4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x1da>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a42      	ldr	r2, [pc, #264]	; (8002b18 <HAL_GPIO_Init+0x2d8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x1d6>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e004      	b.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e002      	b.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a22:	2300      	movs	r3, #0
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	2103      	movs	r1, #3
 8002a28:	400a      	ands	r2, r1
 8002a2a:	0092      	lsls	r2, r2, #2
 8002a2c:	4093      	lsls	r3, r2
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a34:	4935      	ldr	r1, [pc, #212]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43da      	mvns	r2, r3
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	025b      	lsls	r3, r3, #9
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a6c:	4b2b      	ldr	r3, [pc, #172]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43da      	mvns	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	4013      	ands	r3, r2
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a90:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	2380      	movs	r3, #128	; 0x80
 8002aac:	035b      	lsls	r3, r3, #13
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	039b      	lsls	r3, r3, #14
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_GPIO_Init+0x2dc>)
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	3301      	adds	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	40da      	lsrs	r2, r3
 8002af8:	1e13      	subs	r3, r2, #0
 8002afa:	d000      	beq.n	8002afe <HAL_GPIO_Init+0x2be>
 8002afc:	e6a8      	b.n	8002850 <HAL_GPIO_Init+0x10>
  } 
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	48000400 	.word	0x48000400
 8002b14:	48000800 	.word	0x48000800
 8002b18:	48000c00 	.word	0x48000c00
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	000a      	movs	r2, r1
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	1cba      	adds	r2, r7, #2
 8002b34:	8812      	ldrh	r2, [r2, #0]
 8002b36:	4013      	ands	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e003      	b.n	8002b4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
  }
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	0008      	movs	r0, r1
 8002b64:	0011      	movs	r1, r2
 8002b66:	1cbb      	adds	r3, r7, #2
 8002b68:	1c02      	adds	r2, r0, #0
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	1c7b      	adds	r3, r7, #1
 8002b6e:	1c0a      	adds	r2, r1, #0
 8002b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b72:	1c7b      	adds	r3, r7, #1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7a:	1cbb      	adds	r3, r7, #2
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b82:	e003      	b.n	8002b8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b84:	1cbb      	adds	r3, r7, #2
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	1dbb      	adds	r3, r7, #6
 8002b9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	1dba      	adds	r2, r7, #6
 8002ba6:	8812      	ldrh	r2, [r2, #0]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d008      	beq.n	8002bbe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002bae:	1dba      	adds	r2, r7, #6
 8002bb0:	8812      	ldrh	r2, [r2, #0]
 8002bb2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb4:	1dbb      	adds	r3, r7, #6
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7fd ff0f 	bl	80009dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	b002      	add	sp, #8
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	40010400 	.word	0x40010400

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e305      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	d100      	bne.n	8002bea <HAL_RCC_OscConfig+0x1e>
 8002be8:	e08d      	b.n	8002d06 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bea:	4bc5      	ldr	r3, [pc, #788]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	220c      	movs	r2, #12
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d00e      	beq.n	8002c14 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf6:	4bc2      	ldr	r3, [pc, #776]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d116      	bne.n	8002c30 <HAL_RCC_OscConfig+0x64>
 8002c02:	4bbf      	ldr	r3, [pc, #764]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	23c0      	movs	r3, #192	; 0xc0
 8002c08:	025b      	lsls	r3, r3, #9
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d10d      	bne.n	8002c30 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4bba      	ldr	r3, [pc, #744]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	029b      	lsls	r3, r3, #10
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <HAL_RCC_OscConfig+0x56>
 8002c20:	e070      	b.n	8002d04 <HAL_RCC_OscConfig+0x138>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d000      	beq.n	8002c2c <HAL_RCC_OscConfig+0x60>
 8002c2a:	e06b      	b.n	8002d04 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e2dc      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_OscConfig+0x7c>
 8002c38:	4bb1      	ldr	r3, [pc, #708]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4bb0      	ldr	r3, [pc, #704]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	0249      	lsls	r1, r1, #9
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e02f      	b.n	8002ca8 <HAL_RCC_OscConfig+0xdc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x9e>
 8002c50:	4bab      	ldr	r3, [pc, #684]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4baa      	ldr	r3, [pc, #680]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c56:	49ab      	ldr	r1, [pc, #684]	; (8002f04 <HAL_RCC_OscConfig+0x338>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	4ba8      	ldr	r3, [pc, #672]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4ba7      	ldr	r3, [pc, #668]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c62:	49a9      	ldr	r1, [pc, #676]	; (8002f08 <HAL_RCC_OscConfig+0x33c>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e01e      	b.n	8002ca8 <HAL_RCC_OscConfig+0xdc>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10e      	bne.n	8002c90 <HAL_RCC_OscConfig+0xc4>
 8002c72:	4ba3      	ldr	r3, [pc, #652]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4ba2      	ldr	r3, [pc, #648]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	02c9      	lsls	r1, r1, #11
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	4b9f      	ldr	r3, [pc, #636]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b9e      	ldr	r3, [pc, #632]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	0249      	lsls	r1, r1, #9
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xdc>
 8002c90:	4b9b      	ldr	r3, [pc, #620]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b9a      	ldr	r3, [pc, #616]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c96:	499b      	ldr	r1, [pc, #620]	; (8002f04 <HAL_RCC_OscConfig+0x338>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4b98      	ldr	r3, [pc, #608]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4b97      	ldr	r3, [pc, #604]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002ca2:	4999      	ldr	r1, [pc, #612]	; (8002f08 <HAL_RCC_OscConfig+0x33c>)
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d014      	beq.n	8002cda <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fcba 	bl	8001628 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cba:	f7fe fcb5 	bl	8001628 <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e28e      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ccc:	4b8c      	ldr	r3, [pc, #560]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	029b      	lsls	r3, r3, #10
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0xee>
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7fe fca5 	bl	8001628 <HAL_GetTick>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fca0 	bl	8001628 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e279      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	029b      	lsls	r3, r3, #10
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x118>
 8002d02:	e000      	b.n	8002d06 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <HAL_RCC_OscConfig+0x146>
 8002d10:	e06c      	b.n	8002dec <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d12:	4b7b      	ldr	r3, [pc, #492]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	220c      	movs	r2, #12
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d00e      	beq.n	8002d3a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d1c:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	220c      	movs	r2, #12
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d11f      	bne.n	8002d68 <HAL_RCC_OscConfig+0x19c>
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	401a      	ands	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	4013      	ands	r3, r2
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_OscConfig+0x184>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e24c      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	22f8      	movs	r2, #248	; 0xf8
 8002d56:	4393      	bics	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00da      	lsls	r2, r3, #3
 8002d60:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e041      	b.n	8002dec <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d024      	beq.n	8002dba <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fc54 	bl	8001628 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d86:	f7fe fc4f 	bl	8001628 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e228      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d0f1      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	22f8      	movs	r2, #248	; 0xf8
 8002da8:	4393      	bics	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	00da      	lsls	r2, r3, #3
 8002db2:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dba:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	438a      	bics	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe fc2f 	bl	8001628 <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fc2a 	bl	8001628 <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e203      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	d1f1      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2208      	movs	r2, #8
 8002df2:	4013      	ands	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e02:	4b3f      	ldr	r3, [pc, #252]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e04:	2101      	movs	r1, #1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe fc0d 	bl	8001628 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fc08 	bl	8001628 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1e1      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d0f1      	beq.n	8002e14 <HAL_RCC_OscConfig+0x248>
 8002e30:	e018      	b.n	8002e64 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e36:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	438a      	bics	r2, r1
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fbf3 	bl	8001628 <HAL_GetTick>
 8002e42:	0003      	movs	r3, r0
 8002e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe fbee 	bl	8001628 <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5a:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2202      	movs	r2, #2
 8002e60:	4013      	ands	r3, r2
 8002e62:	d1f1      	bne.n	8002e48 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <HAL_RCC_OscConfig+0x2a4>
 8002e6e:	e0b5      	b.n	8002fdc <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e70:	201f      	movs	r0, #31
 8002e72:	183b      	adds	r3, r7, r0
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e7a:	69da      	ldr	r2, [r3, #28]
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	055b      	lsls	r3, r3, #21
 8002e80:	4013      	ands	r3, r2
 8002e82:	d110      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	0549      	lsls	r1, r1, #21
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	61da      	str	r2, [r3, #28]
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	055b      	lsls	r3, r3, #21
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ea0:	183b      	adds	r3, r7, r0
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCC_OscConfig+0x340>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_RCC_OscConfig+0x340>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCC_OscConfig+0x340>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fbb2 	bl	8001628 <HAL_GetTick>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fbad 	bl	8001628 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b64      	cmp	r3, #100	; 0x64
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e186      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x340>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10f      	bne.n	8002f10 <HAL_RCC_OscConfig+0x344>
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <HAL_RCC_OscConfig+0x334>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	621a      	str	r2, [r3, #32]
 8002efc:	e036      	b.n	8002f6c <HAL_RCC_OscConfig+0x3a0>
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40021000 	.word	0x40021000
 8002f04:	fffeffff 	.word	0xfffeffff
 8002f08:	fffbffff 	.word	0xfffbffff
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCC_OscConfig+0x366>
 8002f18:	4bb6      	ldr	r3, [pc, #728]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	4bb5      	ldr	r3, [pc, #724]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	438a      	bics	r2, r1
 8002f22:	621a      	str	r2, [r3, #32]
 8002f24:	4bb3      	ldr	r3, [pc, #716]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	4bb2      	ldr	r3, [pc, #712]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f2a:	2104      	movs	r1, #4
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	621a      	str	r2, [r3, #32]
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x3a0>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x388>
 8002f3a:	4bae      	ldr	r3, [pc, #696]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	4bad      	ldr	r3, [pc, #692]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f40:	2104      	movs	r1, #4
 8002f42:	430a      	orrs	r2, r1
 8002f44:	621a      	str	r2, [r3, #32]
 8002f46:	4bab      	ldr	r3, [pc, #684]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	4baa      	ldr	r3, [pc, #680]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	621a      	str	r2, [r3, #32]
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x3a0>
 8002f54:	4ba7      	ldr	r3, [pc, #668]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	4ba6      	ldr	r3, [pc, #664]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	621a      	str	r2, [r3, #32]
 8002f60:	4ba4      	ldr	r3, [pc, #656]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	4ba3      	ldr	r3, [pc, #652]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f66:	2104      	movs	r1, #4
 8002f68:	438a      	bics	r2, r1
 8002f6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d014      	beq.n	8002f9e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f74:	f7fe fb58 	bl	8001628 <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	e009      	b.n	8002f92 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe fb53 	bl	8001628 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	4a9b      	ldr	r2, [pc, #620]	; (80031f8 <HAL_RCC_OscConfig+0x62c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e12b      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	2202      	movs	r2, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x3b2>
 8002f9c:	e013      	b.n	8002fc6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fb43 	bl	8001628 <HAL_GetTick>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	e009      	b.n	8002fbc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fb3e 	bl	8001628 <HAL_GetTick>
 8002fac:	0002      	movs	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	4a91      	ldr	r2, [pc, #580]	; (80031f8 <HAL_RCC_OscConfig+0x62c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e116      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbc:	4b8d      	ldr	r3, [pc, #564]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc6:	231f      	movs	r3, #31
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002fd6:	4989      	ldr	r1, [pc, #548]	; (80031fc <HAL_RCC_OscConfig+0x630>)
 8002fd8:	400a      	ands	r2, r1
 8002fda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d12a      	bne.n	8003044 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fee:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff2:	4b80      	ldr	r3, [pc, #512]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ffa:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8002ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ffe:	4b7d      	ldr	r3, [pc, #500]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003000:	2101      	movs	r1, #1
 8003002:	430a      	orrs	r2, r1
 8003004:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe fb0f 	bl	8001628 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003010:	f7fe fb0a 	bl	8001628 <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0e3      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003022:	4b74      	ldr	r3, [pc, #464]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800302c:	4b71      	ldr	r3, [pc, #452]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	22f8      	movs	r2, #248	; 0xf8
 8003032:	4393      	bics	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800303e:	430a      	orrs	r2, r1
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
 8003042:	e034      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	3305      	adds	r3, #5
 800304a:	d111      	bne.n	8003070 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800304c:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003052:	2104      	movs	r1, #4
 8003054:	438a      	bics	r2, r1
 8003056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003058:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	22f8      	movs	r2, #248	; 0xf8
 800305e:	4393      	bics	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	00da      	lsls	r2, r3, #3
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800306a:	430a      	orrs	r2, r1
 800306c:	635a      	str	r2, [r3, #52]	; 0x34
 800306e:	e01e      	b.n	80030ae <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003070:	4b60      	ldr	r3, [pc, #384]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003074:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003076:	2104      	movs	r1, #4
 8003078:	430a      	orrs	r2, r1
 800307a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800307c:	4b5d      	ldr	r3, [pc, #372]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe face 	bl	8001628 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003092:	f7fe fac9 	bl	8001628 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0a2      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030a4:	4b53      	ldr	r3, [pc, #332]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	2202      	movs	r2, #2
 80030aa:	4013      	ands	r3, r2
 80030ac:	d1f1      	bne.n	8003092 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d100      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4ec>
 80030b6:	e097      	b.n	80031e8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b8:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	220c      	movs	r2, #12
 80030be:	4013      	ands	r3, r2
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d100      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4fa>
 80030c4:	e06b      	b.n	800319e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d14c      	bne.n	8003168 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b49      	ldr	r3, [pc, #292]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80030d4:	494a      	ldr	r1, [pc, #296]	; (8003200 <HAL_RCC_OscConfig+0x634>)
 80030d6:	400a      	ands	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fe faa5 	bl	8001628 <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe faa0 	bl	8001628 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e079      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	049b      	lsls	r3, r3, #18
 80030fe:	4013      	ands	r3, r2
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	220f      	movs	r2, #15
 8003108:	4393      	bics	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003112:	430a      	orrs	r2, r1
 8003114:	62da      	str	r2, [r3, #44]	; 0x2c
 8003116:	4b37      	ldr	r3, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <HAL_RCC_OscConfig+0x638>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	431a      	orrs	r2, r3
 800312a:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800312c:	430a      	orrs	r2, r1
 800312e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b2f      	ldr	r3, [pc, #188]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0449      	lsls	r1, r1, #17
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fa73 	bl	8001628 <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fa6e 	bl	8001628 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e047      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	049b      	lsls	r3, r3, #18
 8003162:	4013      	ands	r3, r2
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x57c>
 8003166:	e03f      	b.n	80031e8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 800316e:	4924      	ldr	r1, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x634>)
 8003170:	400a      	ands	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fa58 	bl	8001628 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fa53 	bl	8001628 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e02c      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	049b      	lsls	r3, r3, #18
 8003198:	4013      	ands	r3, r2
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x5b2>
 800319c:	e024      	b.n	80031e8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01f      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80031aa:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCC_OscConfig+0x628>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	23c0      	movs	r3, #192	; 0xc0
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	401a      	ands	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d10e      	bne.n	80031e4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	220f      	movs	r2, #15
 80031ca:	401a      	ands	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	23f0      	movs	r3, #240	; 0xf0
 80031d8:	039b      	lsls	r3, r3, #14
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b008      	add	sp, #32
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	40021000 	.word	0x40021000
 80031f8:	00001388 	.word	0x00001388
 80031fc:	efffffff 	.word	0xefffffff
 8003200:	feffffff 	.word	0xfeffffff
 8003204:	ffc27fff 	.word	0xffc27fff

08003208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b3      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b5b      	ldr	r3, [pc, #364]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	4013      	ands	r3, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d911      	bls.n	800324e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b58      	ldr	r3, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	4393      	bics	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	4b55      	ldr	r3, [pc, #340]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2201      	movs	r2, #1
 8003242:	4013      	ands	r3, r2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d001      	beq.n	800324e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e09a      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2202      	movs	r2, #2
 8003254:	4013      	ands	r3, r2
 8003256:	d015      	beq.n	8003284 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2204      	movs	r2, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d006      	beq.n	8003270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003262:	4b4b      	ldr	r3, [pc, #300]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003268:	21e0      	movs	r1, #224	; 0xe0
 800326a:	00c9      	lsls	r1, r1, #3
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	22f0      	movs	r2, #240	; 0xf0
 8003276:	4393      	bics	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b44      	ldr	r3, [pc, #272]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	029b      	lsls	r3, r3, #10
 800329e:	4013      	ands	r3, r2
 80032a0:	d114      	bne.n	80032cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06e      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ae:	4b38      	ldr	r3, [pc, #224]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	049b      	lsls	r3, r3, #18
 80032b6:	4013      	ands	r3, r2
 80032b8:	d108      	bne.n	80032cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e062      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032be:	4b34      	ldr	r3, [pc, #208]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2202      	movs	r2, #2
 80032c4:	4013      	ands	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e05b      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2203      	movs	r2, #3
 80032d2:	4393      	bics	r3, r2
 80032d4:	0019      	movs	r1, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fe f9a2 	bl	8001628 <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e8:	e009      	b.n	80032fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ea:	f7fe f99d 	bl	8001628 <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <HAL_RCC_ClockConfig+0x18c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e042      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	220c      	movs	r2, #12
 8003304:	401a      	ands	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	429a      	cmp	r2, r3
 800330e:	d1ec      	bne.n	80032ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2201      	movs	r2, #1
 8003316:	4013      	ands	r3, r2
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d211      	bcs.n	8003342 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b1b      	ldr	r3, [pc, #108]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2201      	movs	r2, #1
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003330:	4b16      	ldr	r3, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x184>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	4013      	ands	r3, r2
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e020      	b.n	8003384 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2204      	movs	r2, #4
 8003348:	4013      	ands	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_RCC_ClockConfig+0x190>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003360:	f000 f820 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003364:	0001      	movs	r1, r0
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x188>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	220f      	movs	r2, #15
 800336e:	4013      	ands	r3, r2
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x194>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	000a      	movs	r2, r1
 8003376:	40da      	lsrs	r2, r3
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x198>)
 800337a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe f90d 	bl	800159c <HAL_InitTick>
  
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b004      	add	sp, #16
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40022000 	.word	0x40022000
 8003390:	40021000 	.word	0x40021000
 8003394:	00001388 	.word	0x00001388
 8003398:	fffff8ff 	.word	0xfffff8ff
 800339c:	08004ed4 	.word	0x08004ed4
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b08f      	sub	sp, #60	; 0x3c
 80033a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80033aa:	2314      	movs	r3, #20
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033b2:	c313      	stmia	r3!, {r0, r1, r4}
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80033b8:	1d3b      	adds	r3, r7, #4
 80033ba:	4a2a      	ldr	r2, [pc, #168]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033be:	c313      	stmia	r3!, {r0, r1, r4}
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c8:	2300      	movs	r3, #0
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80033cc:	2300      	movs	r3, #0
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	220c      	movs	r2, #12
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d002      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x4a>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d003      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x50>
 80033ec:	e02f      	b.n	800344e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033f2:	e02f      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	0c9b      	lsrs	r3, r3, #18
 80033f8:	220f      	movs	r2, #15
 80033fa:	4013      	ands	r3, r2
 80033fc:	2214      	movs	r2, #20
 80033fe:	18ba      	adds	r2, r7, r2
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	220f      	movs	r2, #15
 800340a:	4013      	ands	r3, r2
 800340c:	1d3a      	adds	r2, r7, #4
 800340e:	5cd3      	ldrb	r3, [r2, r3]
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003414:	23c0      	movs	r3, #192	; 0xc0
 8003416:	025b      	lsls	r3, r3, #9
 8003418:	401a      	ands	r2, r3
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	025b      	lsls	r3, r3, #9
 800341e:	429a      	cmp	r2, r3
 8003420:	d109      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003424:	4811      	ldr	r0, [pc, #68]	; (800346c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003426:	f7fc fe6f 	bl	8000108 <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	001a      	movs	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	4353      	muls	r3, r2
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
 8003434:	e008      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003438:	480c      	ldr	r0, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xc8>)
 800343a:	f7fc fe65 	bl	8000108 <__udivsi3>
 800343e:	0003      	movs	r3, r0
 8003440:	001a      	movs	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	4353      	muls	r3, r2
 8003446:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800344c:	e002      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003452:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003456:	0018      	movs	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	b00f      	add	sp, #60	; 0x3c
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	08004eb4 	.word	0x08004eb4
 8003464:	08004ec4 	.word	0x08004ec4
 8003468:	40021000 	.word	0x40021000
 800346c:	007a1200 	.word	0x007a1200

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b02      	ldr	r3, [pc, #8]	; (8003480 <HAL_RCC_GetHCLKFreq+0x10>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003488:	f7ff fff2 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 800348c:	0001      	movs	r1, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	2207      	movs	r2, #7
 8003496:	4013      	ands	r3, r2
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	40d9      	lsrs	r1, r3
 800349e:	000b      	movs	r3, r1
}    
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08004ee4 	.word	0x08004ee4

080034b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	025b      	lsls	r3, r3, #9
 80034c8:	4013      	ands	r3, r2
 80034ca:	d100      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80034cc:	e08e      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80034ce:	2017      	movs	r0, #23
 80034d0:	183b      	adds	r3, r7, r0
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	055b      	lsls	r3, r3, #21
 80034de:	4013      	ands	r3, r2
 80034e0:	d110      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	0549      	lsls	r1, r1, #21
 80034ec:	430a      	orrs	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	055b      	lsls	r3, r3, #21
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003504:	4b54      	ldr	r3, [pc, #336]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4013      	ands	r3, r2
 800350e:	d11a      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003516:	2180      	movs	r1, #128	; 0x80
 8003518:	0049      	lsls	r1, r1, #1
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351e:	f7fe f883 	bl	8001628 <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	e008      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003528:	f7fe f87e 	bl	8001628 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b64      	cmp	r3, #100	; 0x64
 8003534:	d901      	bls.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e087      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4013      	ands	r3, r2
 8003544:	d0f0      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003546:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	23c0      	movs	r3, #192	; 0xc0
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d034      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	23c0      	movs	r3, #192	; 0xc0
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4013      	ands	r3, r2
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d02c      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003568:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800356e:	4013      	ands	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003574:	6a1a      	ldr	r2, [r3, #32]
 8003576:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0249      	lsls	r1, r1, #9
 800357c:	430a      	orrs	r2, r1
 800357e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003580:	4b34      	ldr	r3, [pc, #208]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003586:	4936      	ldr	r1, [pc, #216]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003588:	400a      	ands	r2, r1
 800358a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe f845 	bl	8001628 <HAL_GetTick>
 800359e:	0003      	movs	r3, r0
 80035a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe f840 	bl	8001628 <HAL_GetTick>
 80035a8:	0002      	movs	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e048      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	2202      	movs	r2, #2
 80035be:	4013      	ands	r3, r2
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035d2:	430a      	orrs	r2, r1
 80035d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d6:	2317      	movs	r3, #23
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035e6:	4920      	ldr	r1, [pc, #128]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e8:	400a      	ands	r2, r1
 80035ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f6:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	2203      	movs	r2, #3
 80035fc:	4393      	bics	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003606:	430a      	orrs	r2, r1
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2220      	movs	r2, #32
 8003610:	4013      	ands	r3, r2
 8003612:	d009      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2210      	movs	r2, #16
 800361a:	4393      	bics	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003624:	430a      	orrs	r2, r1
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	4013      	ands	r3, r2
 8003632:	d009      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	4393      	bics	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003644:	430a      	orrs	r2, r1
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b006      	add	sp, #24
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	40021000 	.word	0x40021000
 8003658:	40007000 	.word	0x40007000
 800365c:	fffffcff 	.word	0xfffffcff
 8003660:	fffeffff 	.word	0xfffeffff
 8003664:	00001388 	.word	0x00001388
 8003668:	efffffff 	.word	0xefffffff

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e042      	b.n	8003704 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223d      	movs	r2, #61	; 0x3d
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f7fd fdf5 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223d      	movs	r2, #61	; 0x3d
 800369e:	2102      	movs	r1, #2
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f000 fab1 	bl	8003c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2246      	movs	r2, #70	; 0x46
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	223e      	movs	r2, #62	; 0x3e
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2241      	movs	r2, #65	; 0x41
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2242      	movs	r2, #66	; 0x42
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2243      	movs	r2, #67	; 0x43
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2244      	movs	r2, #68	; 0x44
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2245      	movs	r2, #69	; 0x45
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223d      	movs	r2, #61	; 0x3d
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	; 0x3d
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e035      	b.n	8003790 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	223d      	movs	r2, #61	; 0x3d
 8003728:	2102      	movs	r1, #2
 800372a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_TIM_Base_Start_IT+0x8c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x4e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_TIM_Base_Start_IT+0x90>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x4e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_TIM_Base_Start_IT+0x94>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d111      	bne.n	800377e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2207      	movs	r2, #7
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b06      	cmp	r3, #6
 800376a:	d010      	beq.n	800378e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	e007      	b.n	800378e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40014000 	.word	0x40014000

080037a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	438a      	bics	r2, r1
 80037ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4a0d      	ldr	r2, [pc, #52]	; (80037f8 <HAL_TIM_Base_Stop_IT+0x54>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	d10d      	bne.n	80037e4 <HAL_TIM_Base_Stop_IT+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a0b      	ldr	r2, [pc, #44]	; (80037fc <HAL_TIM_Base_Stop_IT+0x58>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_Base_Stop_IT+0x40>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2101      	movs	r1, #1
 80037e0:	438a      	bics	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223d      	movs	r2, #61	; 0x3d
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	00001111 	.word	0x00001111
 80037fc:	00000444 	.word	0x00000444

08003800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2202      	movs	r2, #2
 8003810:	4013      	ands	r3, r2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d124      	bne.n	8003860 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2202      	movs	r2, #2
 800381e:	4013      	ands	r3, r2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11d      	bne.n	8003860 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2203      	movs	r2, #3
 800382a:	4252      	negs	r2, r2
 800382c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2203      	movs	r2, #3
 800383c:	4013      	ands	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f9ce 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003848:	e007      	b.n	800385a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 f9c1 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	0018      	movs	r0, r3
 8003856:	f000 f9cd 	bl	8003bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2204      	movs	r2, #4
 8003868:	4013      	ands	r3, r2
 800386a:	2b04      	cmp	r3, #4
 800386c:	d125      	bne.n	80038ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	2b04      	cmp	r3, #4
 800387a:	d11e      	bne.n	80038ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2205      	movs	r2, #5
 8003882:	4252      	negs	r2, r2
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	23c0      	movs	r3, #192	; 0xc0
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4013      	ands	r3, r2
 8003898:	d004      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0018      	movs	r0, r3
 800389e:	f000 f9a1 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80038a2:	e007      	b.n	80038b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 f994 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 f9a0 	bl	8003bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2208      	movs	r2, #8
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d124      	bne.n	8003912 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2208      	movs	r2, #8
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11d      	bne.n	8003912 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2209      	movs	r2, #9
 80038dc:	4252      	negs	r2, r2
 80038de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4013      	ands	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 f975 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 80038fa:	e007      	b.n	800390c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 f968 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f974 	bl	8003bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2210      	movs	r2, #16
 800391a:	4013      	ands	r3, r2
 800391c:	2b10      	cmp	r3, #16
 800391e:	d125      	bne.n	800396c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2210      	movs	r2, #16
 8003928:	4013      	ands	r3, r2
 800392a:	2b10      	cmp	r3, #16
 800392c:	d11e      	bne.n	800396c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2211      	movs	r2, #17
 8003934:	4252      	negs	r2, r2
 8003936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2208      	movs	r2, #8
 800393c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	23c0      	movs	r3, #192	; 0xc0
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4013      	ands	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f948 	bl	8003be4 <HAL_TIM_IC_CaptureCallback>
 8003954:	e007      	b.n	8003966 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f93b 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f000 f947 	bl	8003bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10f      	bne.n	800399a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	2b01      	cmp	r3, #1
 8003986:	d108      	bne.n	800399a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2202      	movs	r2, #2
 800398e:	4252      	negs	r2, r2
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f7fd f905 	bl	8000ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2280      	movs	r2, #128	; 0x80
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b80      	cmp	r3, #128	; 0x80
 80039a6:	d10f      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d108      	bne.n	80039c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2281      	movs	r2, #129	; 0x81
 80039bc:	4252      	negs	r2, r2
 80039be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 fa96 	bl	8003ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2240      	movs	r2, #64	; 0x40
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d10f      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	4013      	ands	r3, r2
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d108      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2241      	movs	r2, #65	; 0x41
 80039ea:	4252      	negs	r2, r2
 80039ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 f907 	bl	8003c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2220      	movs	r2, #32
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d10f      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d108      	bne.n	8003a24 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2221      	movs	r2, #33	; 0x21
 8003a18:	4252      	negs	r2, r2
 8003a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fa60 	bl	8003ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	230f      	movs	r3, #15
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223c      	movs	r2, #60	; 0x3c
 8003a42:	5c9b      	ldrb	r3, [r3, r2]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIM_ConfigClockSource+0x20>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e0bc      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x19a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	223c      	movs	r2, #60	; 0x3c
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	223d      	movs	r2, #61	; 0x3d
 8003a58:	2102      	movs	r1, #2
 8003a5a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2277      	movs	r2, #119	; 0x77
 8003a68:	4393      	bics	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	0192      	lsls	r2, r2, #6
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xde>
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	0192      	lsls	r2, r2, #6
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d900      	bls.n	8003a92 <HAL_TIM_ConfigClockSource+0x66>
 8003a90:	e088      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	0152      	lsls	r2, r2, #5
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_TIM_ConfigClockSource+0x70>
 8003a9a:	e088      	b.n	8003bae <HAL_TIM_ConfigClockSource+0x182>
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	0152      	lsls	r2, r2, #5
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d900      	bls.n	8003aa6 <HAL_TIM_ConfigClockSource+0x7a>
 8003aa4:	e07e      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003aa6:	2b70      	cmp	r3, #112	; 0x70
 8003aa8:	d018      	beq.n	8003adc <HAL_TIM_ConfigClockSource+0xb0>
 8003aaa:	d900      	bls.n	8003aae <HAL_TIM_ConfigClockSource+0x82>
 8003aac:	e07a      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003aae:	2b60      	cmp	r3, #96	; 0x60
 8003ab0:	d04f      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x126>
 8003ab2:	d900      	bls.n	8003ab6 <HAL_TIM_ConfigClockSource+0x8a>
 8003ab4:	e076      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003ab6:	2b50      	cmp	r3, #80	; 0x50
 8003ab8:	d03b      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x106>
 8003aba:	d900      	bls.n	8003abe <HAL_TIM_ConfigClockSource+0x92>
 8003abc:	e072      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d057      	beq.n	8003b72 <HAL_TIM_ConfigClockSource+0x146>
 8003ac2:	d900      	bls.n	8003ac6 <HAL_TIM_ConfigClockSource+0x9a>
 8003ac4:	e06e      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003ac6:	2b30      	cmp	r3, #48	; 0x30
 8003ac8:	d063      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x166>
 8003aca:	d86b      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d060      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x166>
 8003ad0:	d868      	bhi.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d05d      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x166>
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d05b      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0x166>
 8003ada:	e063      	b.n	8003ba4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f000 f982 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2277      	movs	r2, #119	; 0x77
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
      break;
 8003b08:	e052      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 f96b 	bl	8003df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	01c9      	lsls	r1, r1, #7
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
      break;
 8003b30:	e03e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	001a      	movs	r2, r3
 8003b40:	f000 f8de 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2150      	movs	r1, #80	; 0x50
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 f938 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e02e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	f000 f8fc 	bl	8003d5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2160      	movs	r1, #96	; 0x60
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 f928 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b70:	e01e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6859      	ldr	r1, [r3, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	001a      	movs	r2, r3
 8003b80:	f000 f8be 	bl	8003d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 f918 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003b90:	e00e      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	0010      	movs	r0, r2
 8003b9e:	f000 f90f 	bl	8003dc0 <TIM_ITRx_SetConfig>
      break;
 8003ba2:	e005      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
      break;
 8003bac:	e000      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003bae:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	223d      	movs	r2, #61	; 0x3d
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223c      	movs	r2, #60	; 0x3c
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

  return status;
 8003bc0:	230f      	movs	r3, #15
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b004      	add	sp, #16
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	ffff00ff 	.word	0xffff00ff

08003bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2f      	ldr	r2, [pc, #188]	; (8003ce4 <TIM_Base_SetConfig+0xd0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_Base_SetConfig+0x20>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ce8 <TIM_Base_SetConfig+0xd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2270      	movs	r2, #112	; 0x70
 8003c38:	4393      	bics	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <TIM_Base_SetConfig+0xd0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <TIM_Base_SetConfig+0xd4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a24      	ldr	r2, [pc, #144]	; (8003cec <TIM_Base_SetConfig+0xd8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <TIM_Base_SetConfig+0xdc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <TIM_Base_SetConfig+0xe0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <TIM_Base_SetConfig+0x62>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a21      	ldr	r2, [pc, #132]	; (8003cf8 <TIM_Base_SetConfig+0xe4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <TIM_Base_SetConfig+0xe8>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	4393      	bics	r3, r2
 8003c8e:	001a      	movs	r2, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a0c      	ldr	r2, [pc, #48]	; (8003ce4 <TIM_Base_SetConfig+0xd0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <TIM_Base_SetConfig+0xba>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <TIM_Base_SetConfig+0xdc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d007      	beq.n	8003cce <TIM_Base_SetConfig+0xba>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <TIM_Base_SetConfig+0xe0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d003      	beq.n	8003cce <TIM_Base_SetConfig+0xba>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <TIM_Base_SetConfig+0xe4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d103      	bne.n	8003cd6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	615a      	str	r2, [r3, #20]
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40002000 	.word	0x40002000
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	fffffcff 	.word	0xfffffcff

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4393      	bics	r3, r2
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	22f0      	movs	r2, #240	; 0xf0
 8003d2a:	4393      	bics	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b006      	add	sp, #24
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	4393      	bics	r3, r2
 8003d70:	001a      	movs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <TIM_TI2_ConfigInputStage+0x60>)
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	031b      	lsls	r3, r3, #12
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	22a0      	movs	r2, #160	; 0xa0
 8003d98:	4393      	bics	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	ffff0fff 	.word	0xffff0fff

08003dc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2270      	movs	r2, #112	; 0x70
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	2207      	movs	r2, #7
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <TIM_ETR_SetConfig+0x3c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	46c0      	nop			; (mov r8, r8)
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	b006      	add	sp, #24
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	ffff00ff 	.word	0xffff00ff

08003e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	223c      	movs	r2, #60	; 0x3c
 8003e42:	5c9b      	ldrb	r3, [r3, r2]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e041      	b.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223c      	movs	r2, #60	; 0x3c
 8003e50:	2101      	movs	r1, #1
 8003e52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	223d      	movs	r2, #61	; 0x3d
 8003e58:	2102      	movs	r1, #2
 8003e5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2270      	movs	r2, #112	; 0x70
 8003e70:	4393      	bics	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a11      	ldr	r2, [pc, #68]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a10      	ldr	r2, [pc, #64]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10c      	bne.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	223d      	movs	r2, #61	; 0x3d
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	223c      	movs	r2, #60	; 0x3c
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40014000 	.word	0x40014000

08003ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003efc:	46c0      	nop			; (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b002      	add	sp, #8
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e044      	b.n	8003fa0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2274      	movs	r2, #116	; 0x74
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fd f9d1 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	; 0x24
 8003f32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	438a      	bics	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 fbb6 	bl	80046b8 <UART_SetConfig>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e024      	b.n	8003fa0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 fd01 	bl	8004968 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	490d      	ldr	r1, [pc, #52]	; (8003fa8 <HAL_UART_Init+0xa4>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2108      	movs	r1, #8
 8003f82:	438a      	bics	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2101      	movs	r1, #1
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fd99 	bl	8004ad0 <UART_CheckIdleState>
 8003f9e:	0003      	movs	r3, r0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fffff7ff 	.word	0xfffff7ff

08003fac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	1dbb      	adds	r3, r7, #6
 8003fba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d000      	beq.n	8003fc6 <HAL_UART_Transmit+0x1a>
 8003fc4:	e096      	b.n	80040f4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_UART_Transmit+0x28>
 8003fcc:	1dbb      	adds	r3, r7, #6
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e08e      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	015b      	lsls	r3, r3, #5
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d109      	bne.n	8003ff8 <HAL_UART_Transmit+0x4c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e07e      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2274      	movs	r2, #116	; 0x74
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_UART_Transmit+0x5a>
 8004002:	2302      	movs	r3, #2
 8004004:	e077      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2274      	movs	r2, #116	; 0x74
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	2100      	movs	r1, #0
 8004014:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2221      	movs	r2, #33	; 0x21
 800401a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800401c:	f7fd fb04 	bl	8001628 <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1dba      	adds	r2, r7, #6
 8004028:	2150      	movs	r1, #80	; 0x50
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1dba      	adds	r2, r7, #6
 8004032:	2152      	movs	r1, #82	; 0x52
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	015b      	lsls	r3, r3, #5
 8004040:	429a      	cmp	r2, r3
 8004042:	d108      	bne.n	8004056 <HAL_UART_Transmit+0xaa>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e003      	b.n	800405e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2274      	movs	r2, #116	; 0x74
 8004062:	2100      	movs	r1, #0
 8004064:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004066:	e02d      	b.n	80040c4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	0013      	movs	r3, r2
 8004072:	2200      	movs	r2, #0
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	f000 fd73 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 800407a:	1e03      	subs	r3, r0, #0
 800407c:	d001      	beq.n	8004082 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e039      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	05d2      	lsls	r2, r2, #23
 8004092:	0dd2      	lsrs	r2, r2, #23
 8004094:	b292      	uxth	r2, r2
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	3302      	adds	r3, #2
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	e008      	b.n	80040b2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	b292      	uxth	r2, r2
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2252      	movs	r2, #82	; 0x52
 80040b6:	5a9b      	ldrh	r3, [r3, r2]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b299      	uxth	r1, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2252      	movs	r2, #82	; 0x52
 80040c2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2252      	movs	r2, #82	; 0x52
 80040c8:	5a9b      	ldrh	r3, [r3, r2]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1cb      	bne.n	8004068 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	0013      	movs	r3, r2
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	f000 fd3f 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e005      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b008      	add	sp, #32
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b0ab      	sub	sp, #172	; 0xac
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	22a4      	movs	r2, #164	; 0xa4
 8004110:	18b9      	adds	r1, r7, r2
 8004112:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	20a0      	movs	r0, #160	; 0xa0
 800411c:	1839      	adds	r1, r7, r0
 800411e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	219c      	movs	r1, #156	; 0x9c
 8004128:	1879      	adds	r1, r7, r1
 800412a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800412c:	0011      	movs	r1, r2
 800412e:	18bb      	adds	r3, r7, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a99      	ldr	r2, [pc, #612]	; (8004398 <HAL_UART_IRQHandler+0x298>)
 8004134:	4013      	ands	r3, r2
 8004136:	2298      	movs	r2, #152	; 0x98
 8004138:	18bc      	adds	r4, r7, r2
 800413a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800413c:	18bb      	adds	r3, r7, r2
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d114      	bne.n	800416e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004144:	187b      	adds	r3, r7, r1
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2220      	movs	r2, #32
 800414a:	4013      	ands	r3, r2
 800414c:	d00f      	beq.n	800416e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800414e:	183b      	adds	r3, r7, r0
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2220      	movs	r2, #32
 8004154:	4013      	ands	r3, r2
 8004156:	d00a      	beq.n	800416e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	2b00      	cmp	r3, #0
 800415e:	d100      	bne.n	8004162 <HAL_UART_IRQHandler+0x62>
 8004160:	e27e      	b.n	8004660 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	0010      	movs	r0, r2
 800416a:	4798      	blx	r3
      }
      return;
 800416c:	e278      	b.n	8004660 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800416e:	2398      	movs	r3, #152	; 0x98
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d100      	bne.n	800417a <HAL_UART_IRQHandler+0x7a>
 8004178:	e114      	b.n	80043a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800417a:	239c      	movs	r3, #156	; 0x9c
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2201      	movs	r2, #1
 8004182:	4013      	ands	r3, r2
 8004184:	d106      	bne.n	8004194 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004186:	23a0      	movs	r3, #160	; 0xa0
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a83      	ldr	r2, [pc, #524]	; (800439c <HAL_UART_IRQHandler+0x29c>)
 800418e:	4013      	ands	r3, r2
 8004190:	d100      	bne.n	8004194 <HAL_UART_IRQHandler+0x94>
 8004192:	e107      	b.n	80043a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004194:	23a4      	movs	r3, #164	; 0xa4
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2201      	movs	r2, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d012      	beq.n	80041c6 <HAL_UART_IRQHandler+0xc6>
 80041a0:	23a0      	movs	r3, #160	; 0xa0
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2201      	movs	r2, #1
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2180      	movs	r1, #128	; 0x80
 80041c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041c6:	23a4      	movs	r3, #164	; 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2202      	movs	r2, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	d011      	beq.n	80041f6 <HAL_UART_IRQHandler+0xf6>
 80041d2:	239c      	movs	r3, #156	; 0x9c
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2202      	movs	r2, #2
 80041e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2280      	movs	r2, #128	; 0x80
 80041ea:	589b      	ldr	r3, [r3, r2]
 80041ec:	2204      	movs	r2, #4
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041f6:	23a4      	movs	r3, #164	; 0xa4
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2204      	movs	r2, #4
 80041fe:	4013      	ands	r3, r2
 8004200:	d011      	beq.n	8004226 <HAL_UART_IRQHandler+0x126>
 8004202:	239c      	movs	r3, #156	; 0x9c
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	4013      	ands	r3, r2
 800420c:	d00b      	beq.n	8004226 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2204      	movs	r2, #4
 8004214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	589b      	ldr	r3, [r3, r2]
 800421c:	2202      	movs	r2, #2
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2180      	movs	r1, #128	; 0x80
 8004224:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004226:	23a4      	movs	r3, #164	; 0xa4
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2208      	movs	r2, #8
 800422e:	4013      	ands	r3, r2
 8004230:	d017      	beq.n	8004262 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004232:	23a0      	movs	r3, #160	; 0xa0
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2220      	movs	r2, #32
 800423a:	4013      	ands	r3, r2
 800423c:	d105      	bne.n	800424a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800423e:	239c      	movs	r3, #156	; 0x9c
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004248:	d00b      	beq.n	8004262 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2208      	movs	r2, #8
 8004250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2280      	movs	r2, #128	; 0x80
 8004256:	589b      	ldr	r3, [r3, r2]
 8004258:	2208      	movs	r2, #8
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004262:	23a4      	movs	r3, #164	; 0xa4
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	4013      	ands	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_UART_IRQHandler+0x198>
 8004270:	23a0      	movs	r3, #160	; 0xa0
 8004272:	18fb      	adds	r3, r7, r3
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	04db      	lsls	r3, r3, #19
 800427a:	4013      	ands	r3, r2
 800427c:	d00c      	beq.n	8004298 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2280      	movs	r2, #128	; 0x80
 800428c:	589b      	ldr	r3, [r3, r2]
 800428e:	2220      	movs	r2, #32
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	589b      	ldr	r3, [r3, r2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d100      	bne.n	80042a4 <HAL_UART_IRQHandler+0x1a4>
 80042a2:	e1df      	b.n	8004664 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042a4:	23a4      	movs	r3, #164	; 0xa4
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2220      	movs	r2, #32
 80042ac:	4013      	ands	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042b0:	23a0      	movs	r3, #160	; 0xa0
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2220      	movs	r2, #32
 80042b8:	4013      	ands	r3, r2
 80042ba:	d008      	beq.n	80042ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d004      	beq.n	80042ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	0010      	movs	r0, r2
 80042cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	589b      	ldr	r3, [r3, r2]
 80042d4:	2194      	movs	r1, #148	; 0x94
 80042d6:	187a      	adds	r2, r7, r1
 80042d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	d004      	beq.n	80042f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2228      	movs	r2, #40	; 0x28
 80042ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f0:	d047      	beq.n	8004382 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	0018      	movs	r0, r3
 80042f6:	f000 fcf7 	bl	8004ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	4013      	ands	r3, r2
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d137      	bne.n	8004378 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800430e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004310:	2090      	movs	r0, #144	; 0x90
 8004312:	183a      	adds	r2, r7, r0
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	2301      	movs	r3, #1
 8004318:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	438a      	bics	r2, r1
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	183b      	adds	r3, r7, r0
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433a:	f383 8810 	msr	PRIMASK, r3
}
 800433e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a14      	ldr	r2, [pc, #80]	; (80043a0 <HAL_UART_IRQHandler+0x2a0>)
 800434e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	0018      	movs	r0, r3
 8004356:	f7fe f8cb 	bl	80024f0 <HAL_DMA_Abort_IT>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d01a      	beq.n	8004394 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	0018      	movs	r0, r3
 800436a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e012      	b.n	8004394 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f000 f98d 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004376:	e00d      	b.n	8004394 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f988 	bl	8004690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e008      	b.n	8004394 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 f983 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	2100      	movs	r1, #0
 8004390:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004392:	e167      	b.n	8004664 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	46c0      	nop			; (mov r8, r8)
    return;
 8004396:	e165      	b.n	8004664 <HAL_UART_IRQHandler+0x564>
 8004398:	0000080f 	.word	0x0000080f
 800439c:	04000120 	.word	0x04000120
 80043a0:	08004dad 	.word	0x08004dad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d000      	beq.n	80043ae <HAL_UART_IRQHandler+0x2ae>
 80043ac:	e131      	b.n	8004612 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043ae:	23a4      	movs	r3, #164	; 0xa4
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2210      	movs	r2, #16
 80043b6:	4013      	ands	r3, r2
 80043b8:	d100      	bne.n	80043bc <HAL_UART_IRQHandler+0x2bc>
 80043ba:	e12a      	b.n	8004612 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043bc:	23a0      	movs	r3, #160	; 0xa0
 80043be:	18fb      	adds	r3, r7, r3
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2210      	movs	r2, #16
 80043c4:	4013      	ands	r3, r2
 80043c6:	d100      	bne.n	80043ca <HAL_UART_IRQHandler+0x2ca>
 80043c8:	e123      	b.n	8004612 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2210      	movs	r2, #16
 80043d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4013      	ands	r3, r2
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d000      	beq.n	80043e2 <HAL_UART_IRQHandler+0x2e2>
 80043e0:	e09b      	b.n	800451a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	217e      	movs	r1, #126	; 0x7e
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80043f0:	187b      	adds	r3, r7, r1
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d100      	bne.n	80043fa <HAL_UART_IRQHandler+0x2fa>
 80043f8:	e136      	b.n	8004668 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2258      	movs	r2, #88	; 0x58
 80043fe:	5a9b      	ldrh	r3, [r3, r2]
 8004400:	187a      	adds	r2, r7, r1
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d300      	bcc.n	800440a <HAL_UART_IRQHandler+0x30a>
 8004408:	e12e      	b.n	8004668 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	187a      	adds	r2, r7, r1
 800440e:	215a      	movs	r1, #90	; 0x5a
 8004410:	8812      	ldrh	r2, [r2, #0]
 8004412:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b20      	cmp	r3, #32
 800441c:	d06e      	beq.n	80044fc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800441e:	f3ef 8310 	mrs	r3, PRIMASK
 8004422:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004426:	67bb      	str	r3, [r7, #120]	; 0x78
 8004428:	2301      	movs	r3, #1
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800442e:	f383 8810 	msr	PRIMASK, r3
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	498e      	ldr	r1, [pc, #568]	; (8004678 <HAL_UART_IRQHandler+0x578>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004450:	f3ef 8310 	mrs	r3, PRIMASK
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004458:	677b      	str	r3, [r7, #116]	; 0x74
 800445a:	2301      	movs	r3, #1
 800445c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	f383 8810 	msr	PRIMASK, r3
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2101      	movs	r1, #1
 8004472:	438a      	bics	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	f383 8810 	msr	PRIMASK, r3
}
 8004480:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004482:	f3ef 8310 	mrs	r3, PRIMASK
 8004486:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004488:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448a:	673b      	str	r3, [r7, #112]	; 0x70
 800448c:	2301      	movs	r3, #1
 800448e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2140      	movs	r1, #64	; 0x40
 80044a4:	438a      	bics	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c0:	f3ef 8310 	mrs	r3, PRIMASK
 80044c4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80044c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ca:	2301      	movs	r3, #1
 80044cc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d0:	f383 8810 	msr	PRIMASK, r3
}
 80044d4:	46c0      	nop			; (mov r8, r8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2110      	movs	r1, #16
 80044e2:	438a      	bics	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ec:	f383 8810 	msr	PRIMASK, r3
}
 80044f0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7fd ffc2 	bl	8002480 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2258      	movs	r2, #88	; 0x58
 8004500:	5a9a      	ldrh	r2, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	215a      	movs	r1, #90	; 0x5a
 8004506:	5a5b      	ldrh	r3, [r3, r1]
 8004508:	b29b      	uxth	r3, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0011      	movs	r1, r2
 8004512:	0018      	movs	r0, r3
 8004514:	f000 f8c4 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004518:	e0a6      	b.n	8004668 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2258      	movs	r2, #88	; 0x58
 800451e:	5a99      	ldrh	r1, [r3, r2]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	225a      	movs	r2, #90	; 0x5a
 8004524:	5a9b      	ldrh	r3, [r3, r2]
 8004526:	b29a      	uxth	r2, r3
 8004528:	208e      	movs	r0, #142	; 0x8e
 800452a:	183b      	adds	r3, r7, r0
 800452c:	1a8a      	subs	r2, r1, r2
 800452e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	225a      	movs	r2, #90	; 0x5a
 8004534:	5a9b      	ldrh	r3, [r3, r2]
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d100      	bne.n	800453e <HAL_UART_IRQHandler+0x43e>
 800453c:	e096      	b.n	800466c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800453e:	183b      	adds	r3, r7, r0
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d100      	bne.n	8004548 <HAL_UART_IRQHandler+0x448>
 8004546:	e091      	b.n	800466c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004548:	f3ef 8310 	mrs	r3, PRIMASK
 800454c:	60fb      	str	r3, [r7, #12]
  return(result);
 800454e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004550:	2488      	movs	r4, #136	; 0x88
 8004552:	193a      	adds	r2, r7, r4
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	2301      	movs	r3, #1
 8004558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4943      	ldr	r1, [pc, #268]	; (800467c <HAL_UART_IRQHandler+0x57c>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	193b      	adds	r3, r7, r4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f383 8810 	msr	PRIMASK, r3
}
 800457e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004580:	f3ef 8310 	mrs	r3, PRIMASK
 8004584:	61bb      	str	r3, [r7, #24]
  return(result);
 8004586:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004588:	2484      	movs	r4, #132	; 0x84
 800458a:	193a      	adds	r2, r7, r4
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	2301      	movs	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	46c0      	nop			; (mov r8, r8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2101      	movs	r1, #1
 80045a6:	438a      	bics	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f383 8810 	msr	PRIMASK, r3
}
 80045b6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ca:	f3ef 8310 	mrs	r3, PRIMASK
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d2:	2480      	movs	r4, #128	; 0x80
 80045d4:	193a      	adds	r2, r7, r4
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	2301      	movs	r3, #1
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2110      	movs	r1, #16
 80045f0:	438a      	bics	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	f383 8810 	msr	PRIMASK, r3
}
 8004600:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004602:	183b      	adds	r3, r7, r0
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0011      	movs	r1, r2
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f848 	bl	80046a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004610:	e02c      	b.n	800466c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004612:	23a4      	movs	r3, #164	; 0xa4
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	4013      	ands	r3, r2
 800461c:	d00f      	beq.n	800463e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800461e:	23a0      	movs	r3, #160	; 0xa0
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2280      	movs	r2, #128	; 0x80
 8004626:	4013      	ands	r3, r2
 8004628:	d009      	beq.n	800463e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01e      	beq.n	8004670 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	0010      	movs	r0, r2
 800463a:	4798      	blx	r3
    }
    return;
 800463c:	e018      	b.n	8004670 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800463e:	23a4      	movs	r3, #164	; 0xa4
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2240      	movs	r2, #64	; 0x40
 8004646:	4013      	ands	r3, r2
 8004648:	d013      	beq.n	8004672 <HAL_UART_IRQHandler+0x572>
 800464a:	23a0      	movs	r3, #160	; 0xa0
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	4013      	ands	r3, r2
 8004654:	d00d      	beq.n	8004672 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f000 fbbe 	bl	8004dda <UART_EndTransmit_IT>
    return;
 800465e:	e008      	b.n	8004672 <HAL_UART_IRQHandler+0x572>
      return;
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	e006      	b.n	8004672 <HAL_UART_IRQHandler+0x572>
    return;
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	e004      	b.n	8004672 <HAL_UART_IRQHandler+0x572>
      return;
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	e002      	b.n	8004672 <HAL_UART_IRQHandler+0x572>
      return;
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	e000      	b.n	8004672 <HAL_UART_IRQHandler+0x572>
    return;
 8004670:	46c0      	nop			; (mov r8, r8)
  }

}
 8004672:	46bd      	mov	sp, r7
 8004674:	b02b      	add	sp, #172	; 0xac
 8004676:	bd90      	pop	{r4, r7, pc}
 8004678:	fffffeff 	.word	0xfffffeff
 800467c:	fffffedf 	.word	0xfffffedf

08004680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	000a      	movs	r2, r1
 80046aa:	1cbb      	adds	r3, r7, #2
 80046ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c0:	231e      	movs	r3, #30
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a97      	ldr	r2, [pc, #604]	; (8004944 <UART_SetConfig+0x28c>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	0019      	movs	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a92      	ldr	r2, [pc, #584]	; (8004948 <UART_SetConfig+0x290>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a89      	ldr	r2, [pc, #548]	; (800494c <UART_SetConfig+0x294>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a85      	ldr	r2, [pc, #532]	; (8004950 <UART_SetConfig+0x298>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d127      	bne.n	800478e <UART_SetConfig+0xd6>
 800473e:	4b85      	ldr	r3, [pc, #532]	; (8004954 <UART_SetConfig+0x29c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	2203      	movs	r2, #3
 8004744:	4013      	ands	r3, r2
 8004746:	2b03      	cmp	r3, #3
 8004748:	d00d      	beq.n	8004766 <UART_SetConfig+0xae>
 800474a:	d81b      	bhi.n	8004784 <UART_SetConfig+0xcc>
 800474c:	2b02      	cmp	r3, #2
 800474e:	d014      	beq.n	800477a <UART_SetConfig+0xc2>
 8004750:	d818      	bhi.n	8004784 <UART_SetConfig+0xcc>
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <UART_SetConfig+0xa4>
 8004756:	2b01      	cmp	r3, #1
 8004758:	d00a      	beq.n	8004770 <UART_SetConfig+0xb8>
 800475a:	e013      	b.n	8004784 <UART_SetConfig+0xcc>
 800475c:	231f      	movs	r3, #31
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e035      	b.n	80047d2 <UART_SetConfig+0x11a>
 8004766:	231f      	movs	r3, #31
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2202      	movs	r2, #2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e030      	b.n	80047d2 <UART_SetConfig+0x11a>
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2204      	movs	r2, #4
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e02b      	b.n	80047d2 <UART_SetConfig+0x11a>
 800477a:	231f      	movs	r3, #31
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	2208      	movs	r2, #8
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e026      	b.n	80047d2 <UART_SetConfig+0x11a>
 8004784:	231f      	movs	r3, #31
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2210      	movs	r2, #16
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	e021      	b.n	80047d2 <UART_SetConfig+0x11a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a71      	ldr	r2, [pc, #452]	; (8004958 <UART_SetConfig+0x2a0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d104      	bne.n	80047a2 <UART_SetConfig+0xea>
 8004798:	231f      	movs	r3, #31
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e017      	b.n	80047d2 <UART_SetConfig+0x11a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6d      	ldr	r2, [pc, #436]	; (800495c <UART_SetConfig+0x2a4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d104      	bne.n	80047b6 <UART_SetConfig+0xfe>
 80047ac:	231f      	movs	r3, #31
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e00d      	b.n	80047d2 <UART_SetConfig+0x11a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a69      	ldr	r2, [pc, #420]	; (8004960 <UART_SetConfig+0x2a8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d104      	bne.n	80047ca <UART_SetConfig+0x112>
 80047c0:	231f      	movs	r3, #31
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e003      	b.n	80047d2 <UART_SetConfig+0x11a>
 80047ca:	231f      	movs	r3, #31
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	2210      	movs	r2, #16
 80047d0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	021b      	lsls	r3, r3, #8
 80047da:	429a      	cmp	r2, r3
 80047dc:	d15d      	bne.n	800489a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 80047de:	231f      	movs	r3, #31
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d015      	beq.n	8004814 <UART_SetConfig+0x15c>
 80047e8:	dc18      	bgt.n	800481c <UART_SetConfig+0x164>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d00d      	beq.n	800480a <UART_SetConfig+0x152>
 80047ee:	dc15      	bgt.n	800481c <UART_SetConfig+0x164>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <UART_SetConfig+0x142>
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0x14c>
 80047f8:	e010      	b.n	800481c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047fa:	f7fe fe43 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 80047fe:	0003      	movs	r3, r0
 8004800:	61bb      	str	r3, [r7, #24]
        break;
 8004802:	e012      	b.n	800482a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b57      	ldr	r3, [pc, #348]	; (8004964 <UART_SetConfig+0x2ac>)
 8004806:	61bb      	str	r3, [r7, #24]
        break;
 8004808:	e00f      	b.n	800482a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fdcb 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800480e:	0003      	movs	r3, r0
 8004810:	61bb      	str	r3, [r7, #24]
        break;
 8004812:	e00a      	b.n	800482a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004814:	2380      	movs	r3, #128	; 0x80
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	61bb      	str	r3, [r7, #24]
        break;
 800481a:	e006      	b.n	800482a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004820:	231e      	movs	r3, #30
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
        break;
 8004828:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d100      	bne.n	8004832 <UART_SetConfig+0x17a>
 8004830:	e07b      	b.n	800492a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	005a      	lsls	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	085b      	lsrs	r3, r3, #1
 800483c:	18d2      	adds	r2, r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	0019      	movs	r1, r3
 8004844:	0010      	movs	r0, r2
 8004846:	f7fb fc5f 	bl	8000108 <__udivsi3>
 800484a:	0003      	movs	r3, r0
 800484c:	b29b      	uxth	r3, r3
 800484e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d91c      	bls.n	8004890 <UART_SetConfig+0x1d8>
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	2380      	movs	r3, #128	; 0x80
 800485a:	025b      	lsls	r3, r3, #9
 800485c:	429a      	cmp	r2, r3
 800485e:	d217      	bcs.n	8004890 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	b29a      	uxth	r2, r3
 8004864:	200e      	movs	r0, #14
 8004866:	183b      	adds	r3, r7, r0
 8004868:	210f      	movs	r1, #15
 800486a:	438a      	bics	r2, r1
 800486c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	b29b      	uxth	r3, r3
 8004874:	2207      	movs	r2, #7
 8004876:	4013      	ands	r3, r2
 8004878:	b299      	uxth	r1, r3
 800487a:	183b      	adds	r3, r7, r0
 800487c:	183a      	adds	r2, r7, r0
 800487e:	8812      	ldrh	r2, [r2, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	183a      	adds	r2, r7, r0
 800488a:	8812      	ldrh	r2, [r2, #0]
 800488c:	60da      	str	r2, [r3, #12]
 800488e:	e04c      	b.n	800492a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004890:	231e      	movs	r3, #30
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	e047      	b.n	800492a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489a:	231f      	movs	r3, #31
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d015      	beq.n	80048d0 <UART_SetConfig+0x218>
 80048a4:	dc18      	bgt.n	80048d8 <UART_SetConfig+0x220>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00d      	beq.n	80048c6 <UART_SetConfig+0x20e>
 80048aa:	dc15      	bgt.n	80048d8 <UART_SetConfig+0x220>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <UART_SetConfig+0x1fe>
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d005      	beq.n	80048c0 <UART_SetConfig+0x208>
 80048b4:	e010      	b.n	80048d8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b6:	f7fe fde5 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 80048ba:	0003      	movs	r3, r0
 80048bc:	61bb      	str	r3, [r7, #24]
        break;
 80048be:	e012      	b.n	80048e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <UART_SetConfig+0x2ac>)
 80048c2:	61bb      	str	r3, [r7, #24]
        break;
 80048c4:	e00f      	b.n	80048e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fe fd6d 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80048ca:	0003      	movs	r3, r0
 80048cc:	61bb      	str	r3, [r7, #24]
        break;
 80048ce:	e00a      	b.n	80048e6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	61bb      	str	r3, [r7, #24]
        break;
 80048d6:	e006      	b.n	80048e6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048dc:	231e      	movs	r3, #30
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
        break;
 80048e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01e      	beq.n	800492a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085a      	lsrs	r2, r3, #1
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	18d2      	adds	r2, r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	0019      	movs	r1, r3
 80048fc:	0010      	movs	r0, r2
 80048fe:	f7fb fc03 	bl	8000108 <__udivsi3>
 8004902:	0003      	movs	r3, r0
 8004904:	b29b      	uxth	r3, r3
 8004906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d909      	bls.n	8004922 <UART_SetConfig+0x26a>
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	025b      	lsls	r3, r3, #9
 8004914:	429a      	cmp	r2, r3
 8004916:	d204      	bcs.n	8004922 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	e003      	b.n	800492a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8004922:	231e      	movs	r3, #30
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004936:	231e      	movs	r3, #30
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	781b      	ldrb	r3, [r3, #0]
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	b008      	add	sp, #32
 8004942:	bd80      	pop	{r7, pc}
 8004944:	efff69f3 	.word	0xefff69f3
 8004948:	ffffcfff 	.word	0xffffcfff
 800494c:	fffff4ff 	.word	0xfffff4ff
 8004950:	40013800 	.word	0x40013800
 8004954:	40021000 	.word	0x40021000
 8004958:	40004400 	.word	0x40004400
 800495c:	40004800 	.word	0x40004800
 8004960:	40004c00 	.word	0x40004c00
 8004964:	007a1200 	.word	0x007a1200

08004968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2201      	movs	r2, #1
 8004976:	4013      	ands	r3, r2
 8004978:	d00b      	beq.n	8004992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <UART_AdvFeatureConfig+0x144>)
 8004982:	4013      	ands	r3, r2
 8004984:	0019      	movs	r1, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2202      	movs	r2, #2
 8004998:	4013      	ands	r3, r2
 800499a:	d00b      	beq.n	80049b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4a43      	ldr	r2, [pc, #268]	; (8004ab0 <UART_AdvFeatureConfig+0x148>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	2204      	movs	r2, #4
 80049ba:	4013      	ands	r3, r2
 80049bc:	d00b      	beq.n	80049d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a3b      	ldr	r2, [pc, #236]	; (8004ab4 <UART_AdvFeatureConfig+0x14c>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2208      	movs	r2, #8
 80049dc:	4013      	ands	r3, r2
 80049de:	d00b      	beq.n	80049f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <UART_AdvFeatureConfig+0x150>)
 80049e8:	4013      	ands	r3, r2
 80049ea:	0019      	movs	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2210      	movs	r2, #16
 80049fe:	4013      	ands	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <UART_AdvFeatureConfig+0x154>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2220      	movs	r2, #32
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a25      	ldr	r2, [pc, #148]	; (8004ac0 <UART_AdvFeatureConfig+0x158>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2240      	movs	r2, #64	; 0x40
 8004a42:	4013      	ands	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <UART_AdvFeatureConfig+0x15c>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	0019      	movs	r1, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	035b      	lsls	r3, r3, #13
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10b      	bne.n	8004a82 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	4a15      	ldr	r2, [pc, #84]	; (8004ac8 <UART_AdvFeatureConfig+0x160>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	0019      	movs	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <UART_AdvFeatureConfig+0x164>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fffdffff 	.word	0xfffdffff
 8004ab0:	fffeffff 	.word	0xfffeffff
 8004ab4:	fffbffff 	.word	0xfffbffff
 8004ab8:	ffff7fff 	.word	0xffff7fff
 8004abc:	ffffefff 	.word	0xffffefff
 8004ac0:	ffffdfff 	.word	0xffffdfff
 8004ac4:	ffefffff 	.word	0xffefffff
 8004ac8:	ff9fffff 	.word	0xff9fffff
 8004acc:	fff7ffff 	.word	0xfff7ffff

08004ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2280      	movs	r2, #128	; 0x80
 8004adc:	2100      	movs	r1, #0
 8004ade:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae0:	f7fc fda2 	bl	8001628 <HAL_GetTick>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2208      	movs	r2, #8
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d10c      	bne.n	8004b10 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0391      	lsls	r1, r2, #14
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <UART_CheckIdleState+0x8c>)
 8004b00:	9200      	str	r2, [sp, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f82c 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d001      	beq.n	8004b10 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e021      	b.n	8004b54 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2204      	movs	r2, #4
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d10c      	bne.n	8004b38 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	03d1      	lsls	r1, r2, #15
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <UART_CheckIdleState+0x8c>)
 8004b28:	9200      	str	r2, [sp, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f000 f818 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004b30:	1e03      	subs	r3, r0, #0
 8004b32:	d001      	beq.n	8004b38 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e00d      	b.n	8004b54 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2274      	movs	r2, #116	; 0x74
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	0018      	movs	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b004      	add	sp, #16
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	01ffffff 	.word	0x01ffffff

08004b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b094      	sub	sp, #80	; 0x50
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b70:	e0a3      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b74:	3301      	adds	r3, #1
 8004b76:	d100      	bne.n	8004b7a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b78:	e09f      	b.n	8004cba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7a:	f7fc fd55 	bl	8001628 <HAL_GetTick>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d302      	bcc.n	8004b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d13d      	bne.n	8004c0c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8310 	mrs	r3, PRIMASK
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b98:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	494c      	ldr	r1, [pc, #304]	; (8004ce4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bca:	643b      	str	r3, [r7, #64]	; 0x40
 8004bcc:	2301      	movs	r3, #1
 8004bce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2101      	movs	r1, #1
 8004be4:	438a      	bics	r2, r1
 8004be6:	609a      	str	r2, [r3, #8]
 8004be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2274      	movs	r2, #116	; 0x74
 8004c04:	2100      	movs	r1, #0
 8004c06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e067      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2204      	movs	r2, #4
 8004c14:	4013      	ands	r3, r2
 8004c16:	d050      	beq.n	8004cba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	401a      	ands	r2, r3
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d146      	bne.n	8004cba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2280      	movs	r2, #128	; 0x80
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c36:	f3ef 8310 	mrs	r3, PRIMASK
 8004c3a:	613b      	str	r3, [r7, #16]
  return(result);
 8004c3c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	2301      	movs	r3, #1
 8004c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4923      	ldr	r1, [pc, #140]	; (8004ce4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c68:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c6e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c72:	2301      	movs	r3, #1
 8004c74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f383 8810 	msr	PRIMASK, r3
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	438a      	bics	r2, r1
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	f383 8810 	msr	PRIMASK, r3
}
 8004c98:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2280      	movs	r2, #128	; 0x80
 8004caa:	2120      	movs	r1, #32
 8004cac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2274      	movs	r2, #116	; 0x74
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e010      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	425a      	negs	r2, r3
 8004cca:	4153      	adcs	r3, r2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	001a      	movs	r2, r3
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d100      	bne.n	8004cda <UART_WaitOnFlagUntilTimeout+0x17a>
 8004cd8:	e74b      	b.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	0018      	movs	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b014      	add	sp, #80	; 0x50
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	fffffe5f 	.word	0xfffffe5f

08004ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4925      	ldr	r1, [pc, #148]	; (8004da8 <UART_EndRxTransfer+0xc0>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	623b      	str	r3, [r7, #32]
  return(result);
 8004d28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d118      	bne.n	8004d8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d66:	2301      	movs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f383 8810 	msr	PRIMASK, r3
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	438a      	bics	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b00e      	add	sp, #56	; 0x38
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	fffffedf 	.word	0xfffffedf

08004dac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	225a      	movs	r2, #90	; 0x5a
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2252      	movs	r2, #82	; 0x52
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7ff fc5f 	bl	8004690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b004      	add	sp, #16
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8310 	mrs	r3, PRIMASK
 8004de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	2301      	movs	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f383 8810 	msr	PRIMASK, r3
}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2140      	movs	r1, #64	; 0x40
 8004e04:	438a      	bics	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f383 8810 	msr	PRIMASK, r3
}
 8004e12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2220      	movs	r2, #32
 8004e18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7ff fc2c 	bl	8004680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b006      	add	sp, #24
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	2600      	movs	r6, #0
 8004e34:	4d0c      	ldr	r5, [pc, #48]	; (8004e68 <__libc_init_array+0x38>)
 8004e36:	4c0d      	ldr	r4, [pc, #52]	; (8004e6c <__libc_init_array+0x3c>)
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	2600      	movs	r6, #0
 8004e42:	f000 f82b 	bl	8004e9c <_init>
 8004e46:	4d0a      	ldr	r5, [pc, #40]	; (8004e70 <__libc_init_array+0x40>)
 8004e48:	4c0a      	ldr	r4, [pc, #40]	; (8004e74 <__libc_init_array+0x44>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	42a6      	cmp	r6, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	00b3      	lsls	r3, r6, #2
 8004e56:	58eb      	ldr	r3, [r5, r3]
 8004e58:	4798      	blx	r3
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	00b3      	lsls	r3, r6, #2
 8004e60:	58eb      	ldr	r3, [r5, r3]
 8004e62:	4798      	blx	r3
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	08004eec 	.word	0x08004eec
 8004e6c:	08004eec 	.word	0x08004eec
 8004e70:	08004eec 	.word	0x08004eec
 8004e74:	08004ef0 	.word	0x08004ef0

08004e78 <memcpy>:
 8004e78:	2300      	movs	r3, #0
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d100      	bne.n	8004e82 <memcpy+0xa>
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	5ccc      	ldrb	r4, [r1, r3]
 8004e84:	54c4      	strb	r4, [r0, r3]
 8004e86:	3301      	adds	r3, #1
 8004e88:	e7f8      	b.n	8004e7c <memcpy+0x4>

08004e8a <memset>:
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	1882      	adds	r2, r0, r2
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d100      	bne.n	8004e94 <memset+0xa>
 8004e92:	4770      	bx	lr
 8004e94:	7019      	strb	r1, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	e7f9      	b.n	8004e8e <memset+0x4>
	...

08004e9c <_init>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr

08004ea8 <_fini>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eae:	bc08      	pop	{r3}
 8004eb0:	469e      	mov	lr, r3
 8004eb2:	4770      	bx	lr
