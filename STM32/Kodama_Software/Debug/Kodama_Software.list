
Kodama_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043fc  080043fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080043fc  080043fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043fc  080043fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004400  08004400  00014400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000010  08004414  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004414  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105d8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cb  00000000  00000000  00030610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001124f  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119e9  00000000  00000000  000458e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000686a3  00000000  00000000  000572d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bf973  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003348  00000000  00000000  000bf9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080043ac 	.word	0x080043ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080043ac 	.word	0x080043ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fda6 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f996 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f964 	bl	80004fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000234:	f000 f8d8 	bl	80003e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f92e 	bl	8000498 <MX_USART1_UART_Init>
  MX_ADC_Init();
 800023c:	f000 f878 	bl	8000330 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <main+0x3c>)
 8000242:	0018      	movs	r0, r3
 8000244:	f001 fa1e 	bl	8001684 <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000248:	23fa      	movs	r3, #250	; 0xfa
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	0018      	movs	r0, r3
 800024e:	f000 fdf5 	bl	8000e3c <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc);
 8000252:	4b02      	ldr	r3, [pc, #8]	; (800025c <main+0x3c>)
 8000254:	0018      	movs	r0, r3
 8000256:	f000 ff55 	bl	8001104 <HAL_ADC_Start_IT>
	  HAL_Delay(1000);
 800025a:	e7f5      	b.n	8000248 <main+0x28>
 800025c:	20000180 	.word	0x20000180

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b097      	sub	sp, #92	; 0x5c
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	2428      	movs	r4, #40	; 0x28
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2330      	movs	r3, #48	; 0x30
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f004 f892 	bl	800439a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	2318      	movs	r3, #24
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f004 f88a 	bl	800439a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	0018      	movs	r0, r3
 800028a:	2314      	movs	r3, #20
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f004 f883 	bl	800439a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2212      	movs	r2, #18
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2201      	movs	r2, #1
 80002a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2210      	movs	r2, #16
 80002ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2210      	movs	r2, #16
 80002b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0212      	lsls	r2, r2, #8
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0352      	lsls	r2, r2, #13
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 ff02 	bl	80020dc <HAL_RCC_OscConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80002dc:	f000 faba 	bl	8000854 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	2118      	movs	r1, #24
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2101      	movs	r1, #1
 80002fe:	0018      	movs	r0, r3
 8000300:	f002 fa0a 	bl	8002718 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000308:	f000 faa4 	bl	8000854 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2201      	movs	r2, #1
 8000310:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	0018      	movs	r0, r3
 800031c:	f002 fb50 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000324:	f000 fa96 	bl	8000854 <Error_Handler>
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b017      	add	sp, #92	; 0x5c
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	0018      	movs	r0, r3
 800033a:	230c      	movs	r3, #12
 800033c:	001a      	movs	r2, r3
 800033e:	2100      	movs	r1, #0
 8000340:	f004 f82b 	bl	800439a <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000346:	4a27      	ldr	r2, [pc, #156]	; (80003e4 <MX_ADC_Init+0xb4>)
 8000348:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_ADC_Init+0xb0>)
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000350:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <MX_ADC_Init+0xb0>)
 800035e:	2201      	movs	r2, #1
 8000360:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000364:	2204      	movs	r2, #4
 8000366:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <MX_ADC_Init+0xb0>)
 800036a:	2200      	movs	r2, #0
 800036c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000370:	2200      	movs	r2, #0
 8000372:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000374:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000376:	2200      	movs	r2, #0
 8000378:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_ADC_Init+0xb0>)
 800037c:	2200      	movs	r2, #0
 800037e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000382:	22c2      	movs	r2, #194	; 0xc2
 8000384:	32ff      	adds	r2, #255	; 0xff
 8000386:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_ADC_Init+0xb0>)
 800038a:	2200      	movs	r2, #0
 800038c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000390:	2224      	movs	r2, #36	; 0x24
 8000392:	2100      	movs	r1, #0
 8000394:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000396:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_ADC_Init+0xb0>)
 8000398:	2201      	movs	r2, #1
 800039a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_ADC_Init+0xb0>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fd70 	bl	8000e84 <HAL_ADC_Init>
 80003a4:	1e03      	subs	r3, r0, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003a8:	f000 fa54 	bl	8000854 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	220a      	movs	r2, #10
 80003b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	0152      	lsls	r2, r2, #5
 80003b8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	0552      	lsls	r2, r2, #21
 80003c0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c2:	1d3a      	adds	r2, r7, #4
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_ADC_Init+0xb0>)
 80003c6:	0011      	movs	r1, r2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 ffe1 	bl	8001390 <HAL_ADC_ConfigChannel>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003d2:	f000 fa3f 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b004      	add	sp, #16
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	20000180 	.word	0x20000180
 80003e4:	40012400 	.word	0x40012400

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2308      	movs	r3, #8
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f003 ffce 	bl	800439a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	2308      	movs	r3, #8
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f003 ffc7 	bl	800439a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800040c:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_TIM1_Init+0xa8>)
 800040e:	4a21      	ldr	r2, [pc, #132]	; (8000494 <MX_TIM1_Init+0xac>)
 8000410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8000412:	4b1f      	ldr	r3, [pc, #124]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000414:	22fa      	movs	r2, #250	; 0xfa
 8000416:	01d2      	lsls	r2, r2, #7
 8000418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_TIM1_Init+0xa8>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000422:	2232      	movs	r2, #50	; 0x32
 8000424:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_TIM1_Init+0xa8>)
 800042e:	2200      	movs	r2, #0
 8000430:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_TIM1_Init+0xa8>)
 800043a:	0018      	movs	r0, r3
 800043c:	f002 fb9e 	bl	8002b7c <HAL_TIM_Base_Init>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000444:	f000 fa06 	bl	8000854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000448:	2108      	movs	r1, #8
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0152      	lsls	r2, r2, #5
 8000450:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000452:	187a      	adds	r2, r7, r1
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fd6f 	bl	8002f3c <HAL_TIM_ConfigClockSource>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000462:	f000 f9f7 	bl	8000854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000466:	003b      	movs	r3, r7
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	003b      	movs	r3, r7
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000472:	003a      	movs	r2, r7
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_TIM1_Init+0xa8>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f002 ff63 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000482:	f000 f9e7 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b006      	add	sp, #24
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	200000b4 	.word	0x200000b4
 8000494:	40012c00 	.word	0x40012c00

08000498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800049c:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 800049e:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <MX_USART1_UART_Init+0x5c>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 80004a2:	4b13      	ldr	r3, [pc, #76]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004a4:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <MX_USART1_UART_Init+0x60>)
 80004a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004bc:	220c      	movs	r2, #12
 80004be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004cc:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <MX_USART1_UART_Init+0x58>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 ff9a 	bl	8003414 <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80004e4:	f000 f9b6 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	20000030 	.word	0x20000030
 80004f4:	40013800 	.word	0x40013800
 80004f8:	00007a12 	.word	0x00007a12

080004fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000502:	4a15      	ldr	r2, [pc, #84]	; (8000558 <MX_USART2_UART_Init+0x5c>)
 8000504:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000508:	2296      	movs	r2, #150	; 0x96
 800050a:	0192      	lsls	r2, r2, #6
 800050c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000514:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <MX_USART2_UART_Init+0x58>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000522:	2208      	movs	r2, #8
 8000524:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <MX_USART2_UART_Init+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <MX_USART2_UART_Init+0x58>)
 8000540:	0018      	movs	r0, r3
 8000542:	f002 ff67 	bl	8003414 <HAL_UART_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054a:	f000 f983 	bl	8000854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000fc 	.word	0x200000fc
 8000558:	40004400 	.word	0x40004400

0800055c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b08b      	sub	sp, #44	; 0x2c
 8000560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000562:	2414      	movs	r4, #20
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f003 ff14 	bl	800439a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000572:	4b49      	ldr	r3, [pc, #292]	; (8000698 <MX_GPIO_Init+0x13c>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b48      	ldr	r3, [pc, #288]	; (8000698 <MX_GPIO_Init+0x13c>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0309      	lsls	r1, r1, #12
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b45      	ldr	r3, [pc, #276]	; (8000698 <MX_GPIO_Init+0x13c>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	031b      	lsls	r3, r3, #12
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b42      	ldr	r3, [pc, #264]	; (8000698 <MX_GPIO_Init+0x13c>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b41      	ldr	r3, [pc, #260]	; (8000698 <MX_GPIO_Init+0x13c>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	03c9      	lsls	r1, r1, #15
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b3e      	ldr	r3, [pc, #248]	; (8000698 <MX_GPIO_Init+0x13c>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	03db      	lsls	r3, r3, #15
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0289      	lsls	r1, r1, #10
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	029b      	lsls	r3, r3, #10
 80005c0:	4013      	ands	r3, r2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b34      	ldr	r3, [pc, #208]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	02c9      	lsls	r1, r1, #11
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b30      	ldr	r3, [pc, #192]	; (8000698 <MX_GPIO_Init+0x13c>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	02db      	lsls	r3, r3, #11
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fd3d 	bl	800206a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0192      	lsls	r2, r2, #6
 80005f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2288      	movs	r2, #136	; 0x88
 80005fc:	0352      	lsls	r2, r2, #13
 80005fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	193b      	adds	r3, r7, r4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000606:	193b      	adds	r3, r7, r4
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <MX_GPIO_Init+0x140>)
 800060a:	0019      	movs	r1, r3
 800060c:	0010      	movs	r0, r2
 800060e:	f001 fb9f 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2220      	movs	r2, #32
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2201      	movs	r2, #1
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062a:	193a      	adds	r2, r7, r4
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fb8c 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Note1_Pin Note2_Pin */
  GPIO_InitStruct.Pin = Note1_Pin|Note2_Pin;
 8000638:	0021      	movs	r1, r4
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2230      	movs	r2, #48	; 0x30
 800063e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2284      	movs	r2, #132	; 0x84
 8000644:	0392      	lsls	r2, r2, #14
 8000646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	000c      	movs	r4, r1
 8000650:	187b      	adds	r3, r7, r1
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_GPIO_Init+0x140>)
 8000654:	0019      	movs	r1, r3
 8000656:	0010      	movs	r0, r2
 8000658:	f001 fb7a 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Note3_Pin */
  GPIO_InitStruct.Pin = Note3_Pin;
 800065c:	0021      	movs	r1, r4
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2284      	movs	r2, #132	; 0x84
 8000668:	0392      	lsls	r2, r2, #14
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Note3_GPIO_Port, &GPIO_InitStruct);
 8000672:	187b      	adds	r3, r7, r1
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <MX_GPIO_Init+0x144>)
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f001 fb69 	bl	8001d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2101      	movs	r1, #1
 8000682:	2007      	movs	r0, #7
 8000684:	f001 f952 	bl	800192c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000688:	2007      	movs	r0, #7
 800068a:	f001 f964 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b00b      	add	sp, #44	; 0x2c
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800
 80006a0:	48000400 	.word	0x48000400

080006a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b0a3      	sub	sp, #140	; 0x8c
 80006a8:	af20      	add	r7, sp, #128	; 0x80
 80006aa:	0002      	movs	r2, r0
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	2b20      	cmp	r3, #32
 80006b6:	d01e      	beq.n	80006f6 <HAL_GPIO_EXTI_Callback+0x52>
 80006b8:	dc51      	bgt.n	800075e <HAL_GPIO_EXTI_Callback+0xba>
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d035      	beq.n	800072a <HAL_GPIO_EXTI_Callback+0x86>
 80006be:	2b10      	cmp	r3, #16
 80006c0:	d14d      	bne.n	800075e <HAL_GPIO_EXTI_Callback+0xba>
		case Note1_Pin:
			if (state == true){
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d04b      	beq.n	8000762 <HAL_GPIO_EXTI_Callback+0xbe>
				srv_midi_internal_sendNote(0x3C, 0x00, 0x5A,huart1);
 80006ca:	4c2b      	ldr	r4, [pc, #172]	; (8000778 <HAL_GPIO_EXTI_Callback+0xd4>)
 80006cc:	466b      	mov	r3, sp
 80006ce:	0018      	movs	r0, r3
 80006d0:	1d23      	adds	r3, r4, #4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0019      	movs	r1, r3
 80006d6:	f003 fe57 	bl	8004388 <memcpy>
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	225a      	movs	r2, #90	; 0x5a
 80006de:	2100      	movs	r1, #0
 80006e0:	203c      	movs	r0, #60	; 0x3c
 80006e2:	f000 f8bd 	bl	8000860 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <HAL_GPIO_EXTI_Callback+0xd8>)
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 fa97 	bl	8002c1c <HAL_TIM_Base_Start_IT>
				state = false;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
			}

			break;
 80006f4:	e035      	b.n	8000762 <HAL_GPIO_EXTI_Callback+0xbe>
		case Note2_Pin:
			if (state == true){
 80006f6:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d033      	beq.n	8000766 <HAL_GPIO_EXTI_Callback+0xc2>
				srv_midi_internal_sendNote(0x3E, 0x00, 0x5A,huart1);
 80006fe:	4c1e      	ldr	r4, [pc, #120]	; (8000778 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000700:	466b      	mov	r3, sp
 8000702:	0018      	movs	r0, r3
 8000704:	1d23      	adds	r3, r4, #4
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0019      	movs	r1, r3
 800070a:	f003 fe3d 	bl	8004388 <memcpy>
 800070e:	6823      	ldr	r3, [r4, #0]
 8000710:	225a      	movs	r2, #90	; 0x5a
 8000712:	2100      	movs	r1, #0
 8000714:	203e      	movs	r0, #62	; 0x3e
 8000716:	f000 f8a3 	bl	8000860 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_GPIO_EXTI_Callback+0xd8>)
 800071c:	0018      	movs	r0, r3
 800071e:	f002 fa7d 	bl	8002c1c <HAL_TIM_Base_Start_IT>
				state = false;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000728:	e01d      	b.n	8000766 <HAL_GPIO_EXTI_Callback+0xc2>
		case Note3_Pin:
			if (state == true){
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d01b      	beq.n	800076a <HAL_GPIO_EXTI_Callback+0xc6>
				srv_midi_internal_sendNote(0x40, 0x00, 0x5A,huart1);
 8000732:	4c11      	ldr	r4, [pc, #68]	; (8000778 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000734:	466b      	mov	r3, sp
 8000736:	0018      	movs	r0, r3
 8000738:	1d23      	adds	r3, r4, #4
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	0019      	movs	r1, r3
 800073e:	f003 fe23 	bl	8004388 <memcpy>
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	225a      	movs	r2, #90	; 0x5a
 8000746:	2100      	movs	r1, #0
 8000748:	2040      	movs	r0, #64	; 0x40
 800074a:	f000 f889 	bl	8000860 <srv_midi_internal_sendNote>
				HAL_TIM_Base_Start_IT(&htim1);
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000750:	0018      	movs	r0, r3
 8000752:	f002 fa63 	bl	8002c1c <HAL_TIM_Base_Start_IT>
				state = false;
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800075c:	e005      	b.n	800076a <HAL_GPIO_EXTI_Callback+0xc6>
		default:
			break;
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	e004      	b.n	800076c <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	e002      	b.n	800076c <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	e000      	b.n	800076c <HAL_GPIO_EXTI_Callback+0xc8>
			break;
 800076a:	46c0      	nop			; (mov r8, r8)
	}
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b003      	add	sp, #12
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000030 	.word	0x20000030
 800077c:	200000b4 	.word	0x200000b4

08000780 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(Note1_GPIO_Port, Note1_Pin) == GPIO_PIN_SET ){
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800078a:	2110      	movs	r1, #16
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fc4f 	bl	8002030 <HAL_GPIO_ReadPin>
 8000792:	0003      	movs	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d107      	bne.n	80007a8 <HAL_TIM_PeriodElapsedCallback+0x28>

		state = true;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f002 fa87 	bl	8002cb4 <HAL_TIM_Base_Stop_IT>
	else if (HAL_GPIO_ReadPin(Note3_GPIO_Port, Note3_Pin) == GPIO_PIN_SET ){

		state = true;
		HAL_TIM_Base_Stop_IT(&htim1);
	}
}
 80007a6:	e01e      	b.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (HAL_GPIO_ReadPin(Note2_GPIO_Port, Note2_Pin) == GPIO_PIN_SET ){
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007aa:	2120      	movs	r1, #32
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 fc3f 	bl	8002030 <HAL_GPIO_ReadPin>
 80007b2:	0003      	movs	r3, r0
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d107      	bne.n	80007c8 <HAL_TIM_PeriodElapsedCallback+0x48>
		state = true;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 fa77 	bl	8002cb4 <HAL_TIM_Base_Stop_IT>
}
 80007c6:	e00e      	b.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x66>
	else if (HAL_GPIO_ReadPin(Note3_GPIO_Port, Note3_Pin) == GPIO_PIN_SET ){
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80007ca:	2101      	movs	r1, #1
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fc2f 	bl	8002030 <HAL_GPIO_ReadPin>
 80007d2:	0003      	movs	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d106      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x66>
		state = true;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fa67 	bl	8002cb4 <HAL_TIM_Base_Stop_IT>
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	48000800 	.word	0x48000800
 80007f4:	20000000 	.word	0x20000000
 80007f8:	200000b4 	.word	0x200000b4
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000800:	b5b0      	push	{r4, r5, r7, lr}
 8000802:	b0a2      	sub	sp, #136	; 0x88
 8000804:	af20      	add	r7, sp, #128	; 0x80
 8000806:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	//HAL_Delay(1000);
    CC1Value = HAL_ADC_GetValue(hadc)*127;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fcec 	bl	80011e8 <HAL_ADC_GetValue>
 8000810:	0003      	movs	r3, r0
 8000812:	b2db      	uxtb	r3, r3
 8000814:	1c1a      	adds	r2, r3, #0
 8000816:	01d2      	lsls	r2, r2, #7
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_ADC_ConvCpltCallback+0x4c>)
 800081e:	701a      	strb	r2, [r3, #0]
    srv_midi_internal_controlChange(1,CC1Value,huart2);
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000822:	781d      	ldrb	r5, [r3, #0]
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <HAL_ADC_ConvCpltCallback+0x50>)
 8000826:	466b      	mov	r3, sp
 8000828:	0018      	movs	r0, r3
 800082a:	0023      	movs	r3, r4
 800082c:	3308      	adds	r3, #8
 800082e:	227c      	movs	r2, #124	; 0x7c
 8000830:	0019      	movs	r1, r3
 8000832:	f003 fda9 	bl	8004388 <memcpy>
 8000836:	6822      	ldr	r2, [r4, #0]
 8000838:	6863      	ldr	r3, [r4, #4]
 800083a:	0029      	movs	r1, r5
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f87f 	bl	8000940 <srv_midi_internal_controlChange>
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bdb0      	pop	{r4, r5, r7, pc}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	2000002c 	.word	0x2000002c
 8000850:	200000fc 	.word	0x200000fc

08000854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <srv_midi_internal_sendNote>:

/* Private variables ---------------------------------------------------------*/
uint8_t aTxBuffer[3];

/* Public functions -----------------------------------------------*/
void srv_midi_internal_sendNote(uint8_t note,uint8_t channel, uint8_t velocity,UART_HandleTypeDef uart){
 8000860:	b082      	sub	sp, #8
 8000862:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000864:	46c6      	mov	lr, r8
 8000866:	b500      	push	{lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	0004      	movs	r4, r0
 800086e:	0008      	movs	r0, r1
 8000870:	0011      	movs	r1, r2
 8000872:	2204      	movs	r2, #4
 8000874:	2520      	movs	r5, #32
 8000876:	46ac      	mov	ip, r5
 8000878:	2508      	movs	r5, #8
 800087a:	46a8      	mov	r8, r5
 800087c:	44b8      	add	r8, r7
 800087e:	44c4      	add	ip, r8
 8000880:	4462      	add	r2, ip
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	1c22      	adds	r2, r4, #0
 8000888:	701a      	strb	r2, [r3, #0]
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	1c02      	adds	r2, r0, #0
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	1d7b      	adds	r3, r7, #5
 8000892:	1c0a      	adds	r2, r1, #0
 8000894:	701a      	strb	r2, [r3, #0]
	uint8_t channelBuffer, noteBuffer, velocityBuffer;
	channelBuffer = 0x0F & channel; //To be sure that channel is 4 bits value
 8000896:	240f      	movs	r4, #15
 8000898:	193b      	adds	r3, r7, r4
 800089a:	1dba      	adds	r2, r7, #6
 800089c:	7812      	ldrb	r2, [r2, #0]
 800089e:	210f      	movs	r1, #15
 80008a0:	400a      	ands	r2, r1
 80008a2:	701a      	strb	r2, [r3, #0]
	noteBuffer = 0x7F & note; //To be sure that note is 7 bits value
 80008a4:	250e      	movs	r5, #14
 80008a6:	197b      	adds	r3, r7, r5
 80008a8:	1dfa      	adds	r2, r7, #7
 80008aa:	7812      	ldrb	r2, [r2, #0]
 80008ac:	217f      	movs	r1, #127	; 0x7f
 80008ae:	400a      	ands	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
	velocityBuffer = 0x7F & velocity; //To be sure that velocity is 7 bits value
 80008b2:	260d      	movs	r6, #13
 80008b4:	19bb      	adds	r3, r7, r6
 80008b6:	1d7a      	adds	r2, r7, #5
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	217f      	movs	r1, #127	; 0x7f
 80008bc:	400a      	ands	r2, r1
 80008be:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = channelBuffer+NOTE_ON;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3b70      	subs	r3, #112	; 0x70
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008ca:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008ce:	197a      	adds	r2, r7, r5
 80008d0:	7812      	ldrb	r2, [r2, #0]
 80008d2:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008d6:	19ba      	adds	r2, r7, r6
 80008d8:	7812      	ldrb	r2, [r2, #0]
 80008da:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 80008dc:	23fa      	movs	r3, #250	; 0xfa
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4916      	ldr	r1, [pc, #88]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008e2:	2224      	movs	r2, #36	; 0x24
 80008e4:	2008      	movs	r0, #8
 80008e6:	1838      	adds	r0, r7, r0
 80008e8:	1880      	adds	r0, r0, r2
 80008ea:	2203      	movs	r2, #3
 80008ec:	f002 fde6 	bl	80034bc <HAL_UART_Transmit>
	aTxBuffer[0] = channelBuffer+NOTE_OFF;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	3b80      	subs	r3, #128	; 0x80
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008fa:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 80008fe:	197a      	adds	r2, r7, r5
 8000900:	7812      	ldrb	r2, [r2, #0]
 8000902:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 8000906:	19ba      	adds	r2, r7, r6
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	709a      	strb	r2, [r3, #2]
	HAL_Delay(300); //Wait 300 ms
 800090c:	2396      	movs	r3, #150	; 0x96
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fa93 	bl	8000e3c <HAL_Delay>
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000); //Send Note Off
 8000916:	23fa      	movs	r3, #250	; 0xfa
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <srv_midi_internal_sendNote+0xdc>)
 800091c:	2224      	movs	r2, #36	; 0x24
 800091e:	2008      	movs	r0, #8
 8000920:	1838      	adds	r0, r7, r0
 8000922:	1880      	adds	r0, r0, r2
 8000924:	2203      	movs	r2, #3
 8000926:	f002 fdc9 	bl	80034bc <HAL_UART_Transmit>

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bc80      	pop	{r7}
 8000932:	46b8      	mov	r8, r7
 8000934:	bcf0      	pop	{r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	b002      	add	sp, #8
 800093a:	4718      	bx	r3
 800093c:	200001c0 	.word	0x200001c0

08000940 <srv_midi_internal_controlChange>:

void srv_midi_internal_controlChange(uint8_t controlNumber, uint8_t controlValue, UART_HandleTypeDef uart){
 8000940:	b082      	sub	sp, #8
 8000942:	b5b0      	push	{r4, r5, r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	0004      	movs	r4, r0
 800094a:	0008      	movs	r0, r1
 800094c:	2518      	movs	r5, #24
 800094e:	1979      	adds	r1, r7, r5
 8000950:	600a      	str	r2, [r1, #0]
 8000952:	604b      	str	r3, [r1, #4]
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	1c22      	adds	r2, r4, #0
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	1c02      	adds	r2, r0, #0
 800095e:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = CONTROL_CHANGE;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <srv_midi_internal_controlChange+0x54>)
 8000962:	22b0      	movs	r2, #176	; 0xb0
 8000964:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = controlNumber;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <srv_midi_internal_controlChange+0x54>)
 8000968:	1dfa      	adds	r2, r7, #7
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = controlValue;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <srv_midi_internal_controlChange+0x54>)
 8000970:	1dba      	adds	r2, r7, #6
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4906      	ldr	r1, [pc, #24]	; (8000994 <srv_midi_internal_controlChange+0x54>)
 800097c:	1978      	adds	r0, r7, r5
 800097e:	2203      	movs	r2, #3
 8000980:	f002 fd9c 	bl	80034bc <HAL_UART_Transmit>

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b002      	add	sp, #8
 800098a:	bcb0      	pop	{r4, r5, r7}
 800098c:	bc08      	pop	{r3}
 800098e:	b002      	add	sp, #8
 8000990:	4718      	bx	r3
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	200001c0 	.word	0x200001c0

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_MspInit+0x64>)
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_MspInit+0x64>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	619a      	str	r2, [r3, #24]
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_MspInit+0x64>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_MspInit+0x64>)
 80009b8:	69da      	ldr	r2, [r3, #28]
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x64>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0549      	lsls	r1, r1, #21
 80009c0:	430a      	orrs	r2, r1
 80009c2:	61da      	str	r2, [r3, #28]
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_MspInit+0x64>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	055b      	lsls	r3, r3, #21
 80009cc:	4013      	ands	r3, r2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2003      	movs	r0, #3
 80009d8:	f000 ffa8 	bl	800192c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 ffba 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2004      	movs	r0, #4
 80009e8:	f000 ffa0 	bl	800192c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80009ec:	2004      	movs	r0, #4
 80009ee:	f000 ffb2 	bl	8001956 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 fcc1 	bl	800439a <memset>
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_ADC_MspInit+0x90>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d132      	bne.n	8000a88 <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a24:	699a      	ldr	r2, [r3, #24]
 8000a26:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0089      	lsls	r1, r1, #2
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	619a      	str	r2, [r3, #24]
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	0309      	lsls	r1, r1, #12
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_ADC_MspInit+0x94>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	031b      	lsls	r3, r3, #12
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    */
    GPIO_InitStruct.Pin = CC1_Pin;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2203      	movs	r2, #3
 8000a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_ADC_MspInit+0x98>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	0010      	movs	r0, r2
 8000a74:	f001 f96c 	bl	8001d50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	200c      	movs	r0, #12
 8000a7e:	f000 ff55 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000a82:	200c      	movs	r0, #12
 8000a84:	f000 ff67 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b00b      	add	sp, #44	; 0x2c
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	40012400 	.word	0x40012400
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <HAL_TIM_Base_MspInit+0x58>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d11d      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ab0:	699a      	ldr	r2, [r3, #24]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_TIM_Base_MspInit+0x5c>)
 8000ab4:	2180      	movs	r1, #128	; 0x80
 8000ab6:	0109      	lsls	r1, r1, #4
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	619a      	str	r2, [r3, #24]
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_TIM_Base_MspInit+0x5c>)
 8000abe:	699a      	ldr	r2, [r3, #24]
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 2, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2102      	movs	r1, #2
 8000ace:	200d      	movs	r0, #13
 8000ad0:	f000 ff2c 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000ad4:	200d      	movs	r0, #13
 8000ad6:	f000 ff3e 	bl	8001956 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2103      	movs	r1, #3
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f000 ff24 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	f000 ff36 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b004      	add	sp, #16
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	40021000 	.word	0x40021000

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b08d      	sub	sp, #52	; 0x34
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	241c      	movs	r4, #28
 8000b06:	193b      	adds	r3, r7, r4
 8000b08:	0018      	movs	r0, r3
 8000b0a:	2314      	movs	r3, #20
 8000b0c:	001a      	movs	r2, r3
 8000b0e:	2100      	movs	r1, #0
 8000b10:	f003 fc43 	bl	800439a <memset>
  if(huart->Instance==USART1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <HAL_UART_MspInit+0x144>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d134      	bne.n	8000b88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1e:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b20:	699a      	ldr	r2, [r3, #24]
 8000b22:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	01c9      	lsls	r1, r1, #7
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	619a      	str	r2, [r3, #24]
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b2e:	699a      	ldr	r2, [r3, #24]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	01db      	lsls	r3, r3, #7
 8000b34:	4013      	ands	r3, r2
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b42      	ldr	r3, [pc, #264]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	0289      	lsls	r1, r1, #10
 8000b44:	430a      	orrs	r2, r1
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	029b      	lsls	r3, r3, #10
 8000b50:	4013      	ands	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	22c0      	movs	r2, #192	; 0xc0
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	0021      	movs	r1, r4
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2202      	movs	r2, #2
 8000b64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2201      	movs	r2, #1
 8000b76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	187a      	adds	r2, r7, r1
 8000b7a:	2390      	movs	r3, #144	; 0x90
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	0011      	movs	r1, r2
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 f8e5 	bl	8001d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	e056      	b.n	8000c36 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a2e      	ldr	r2, [pc, #184]	; (8000c48 <HAL_UART_MspInit+0x14c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d151      	bne.n	8000c36 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	0289      	lsls	r1, r1, #10
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	61da      	str	r2, [r3, #28]
 8000ba0:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	029b      	lsls	r3, r3, #10
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000bb0:	695a      	ldr	r2, [r3, #20]
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0289      	lsls	r1, r1, #10
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	615a      	str	r2, [r3, #20]
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000bbe:	695a      	ldr	r2, [r3, #20]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	029b      	lsls	r3, r3, #10
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 8000bca:	241c      	movs	r4, #28
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2204      	movs	r2, #4
 8000bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	2203      	movs	r2, #3
 8000be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2201      	movs	r2, #1
 8000be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 8000bea:	193a      	adds	r2, r7, r4
 8000bec:	2390      	movs	r3, #144	; 0x90
 8000bee:	05db      	lsls	r3, r3, #23
 8000bf0:	0011      	movs	r1, r2
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 f8ac 	bl	8001d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 8000bf8:	0021      	movs	r1, r4
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2202      	movs	r2, #2
 8000c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2201      	movs	r2, #1
 8000c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	2390      	movs	r3, #144	; 0x90
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 f895 	bl	8001d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f000 fe7e 	bl	800192c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c30:	201c      	movs	r0, #28
 8000c32:	f000 fe90 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b00d      	add	sp, #52	; 0x34
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	40013800 	.word	0x40013800
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40004400 	.word	0x40004400

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f8c8 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c7e:	f000 ff05 	bl	8001a8c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000c96:	2010      	movs	r0, #16
 8000c98:	f001 fa04 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	f001 fa01 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	019b      	lsls	r3, r3, #6
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f001 f9fc 	bl	80020a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <ADC1_IRQHandler+0x14>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 faa0 	bl	8001200 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000180 	.word	0x20000180

08000ccc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f002 f81c 	bl	8002d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	200000b4 	.word	0x200000b4

08000ce4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <TIM1_CC_IRQHandler+0x14>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f002 f810 	bl	8002d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200000b4 	.word	0x200000b4

08000cfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <USART2_IRQHandler+0x14>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 fc84 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200000fc 	.word	0x200000fc

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d4a:	f7ff ffe3 	bl	8000d14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d4e:	f003 faf7 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d52:	f7ff fa65 	bl	8000220 <main>

08000d56 <LoopForever>:

LoopForever:
    b LoopForever
 8000d56:	e7fe      	b.n	8000d56 <LoopForever>
  ldr   r0, =_estack
 8000d58:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d64:	08004404 	.word	0x08004404
  ldr r2, =_sbss
 8000d68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d6c:	200001e8 	.word	0x200001e8

08000d70 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <DMA1_Channel1_IRQHandler>
	...

08000d74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_Init+0x24>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_Init+0x24>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f809 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8a:	f7ff fe05 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x5c>)
 8000da6:	681c      	ldr	r4, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	0019      	movs	r1, r3
 8000dae:	23fa      	movs	r3, #250	; 0xfa
 8000db0:	0098      	lsls	r0, r3, #2
 8000db2:	f7ff f9a9 	bl	8000108 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	0019      	movs	r1, r3
 8000dba:	0020      	movs	r0, r4
 8000dbc:	f7ff f9a4 	bl	8000108 <__udivsi3>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 fdd7 	bl	8001976 <HAL_SYSTICK_Config>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e00f      	b.n	8000df0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d80b      	bhi.n	8000dee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fda4 	bl	800192c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_InitTick+0x64>)
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b003      	add	sp, #12
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000004 	.word	0x20000004
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000008 	.word	0x20000008

08000e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x1c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x20>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	18d2      	adds	r2, r2, r3
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_IncTick+0x20>)
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	2000000c 	.word	0x2000000c
 8000e24:	200001c4 	.word	0x200001c4

08000e28 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <HAL_GetTick+0x10>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	200001c4 	.word	0x200001c4

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_Delay+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	189b      	adds	r3, r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	f7ff ffe0 	bl	8000e28 <HAL_GetTick>
 8000e68:	0002      	movs	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e125      	b.n	80010ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10a      	bne.n	8000ec0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2234      	movs	r2, #52	; 0x34
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fda0 	bl	8000a00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec4:	2210      	movs	r2, #16
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d000      	beq.n	8000ecc <HAL_ADC_Init+0x48>
 8000eca:	e103      	b.n	80010d4 <HAL_ADC_Init+0x250>
 8000ecc:	230f      	movs	r3, #15
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d000      	beq.n	8000ed8 <HAL_ADC_Init+0x54>
 8000ed6:	e0fd      	b.n	80010d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000ee2:	d000      	beq.n	8000ee6 <HAL_ADC_Init+0x62>
 8000ee4:	e0f6      	b.n	80010d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eea:	4a83      	ldr	r2, [pc, #524]	; (80010f8 <HAL_ADC_Init+0x274>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	2202      	movs	r2, #2
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d112      	bne.n	8000f2a <HAL_ADC_Init+0xa6>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d009      	beq.n	8000f26 <HAL_ADC_Init+0xa2>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Init+0xa6>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_ADC_Init+0xa8>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d116      	bne.n	8000f5e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2218      	movs	r2, #24
 8000f38:	4393      	bics	r3, r2
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	0899      	lsrs	r1, r3, #2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4964      	ldr	r1, [pc, #400]	; (80010fc <HAL_ADC_Init+0x278>)
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7e1b      	ldrb	r3, [r3, #24]
 8000f72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e5b      	ldrb	r3, [r3, #25]
 8000f78:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f7a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e9b      	ldrb	r3, [r3, #26]
 8000f80:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f82:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <HAL_ADC_Init+0x10e>
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	015b      	lsls	r3, r3, #5
 8000f90:	e000      	b.n	8000f94 <HAL_ADC_Init+0x110>
 8000f92:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f94:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f9a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_ADC_Init+0x124>
 8000fa4:	2304      	movs	r3, #4
 8000fa6:	e000      	b.n	8000faa <HAL_ADC_Init+0x126>
 8000fa8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000faa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2124      	movs	r1, #36	; 0x24
 8000fb0:	5c5b      	ldrb	r3, [r3, r1]
 8000fb2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fb4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7edb      	ldrb	r3, [r3, #27]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d115      	bne.n	8000ff0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e9b      	ldrb	r3, [r3, #26]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d105      	bne.n	8000fd8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0252      	lsls	r2, r2, #9
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fdc:	2220      	movs	r2, #32
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	2201      	movs	r2, #1
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	23c2      	movs	r3, #194	; 0xc2
 8000ff6:	33ff      	adds	r3, #255	; 0xff
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d007      	beq.n	800100c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001004:	4313      	orrs	r3, r2
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4313      	orrs	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d9      	ldr	r1, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	430a      	orrs	r2, r1
 800101a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	055b      	lsls	r3, r3, #21
 8001024:	429a      	cmp	r2, r3
 8001026:	d01b      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	2b01      	cmp	r3, #1
 800102e:	d017      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	2b02      	cmp	r3, #2
 8001036:	d013      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b03      	cmp	r3, #3
 800103e:	d00f      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	2b04      	cmp	r3, #4
 8001046:	d00b      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	2b05      	cmp	r3, #5
 800104e:	d007      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b06      	cmp	r3, #6
 8001056:	d003      	beq.n	8001060 <HAL_ADC_Init+0x1dc>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b07      	cmp	r3, #7
 800105e:	d112      	bne.n	8001086 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2107      	movs	r1, #7
 800106c:	438a      	bics	r2, r1
 800106e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6959      	ldr	r1, [r3, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	2207      	movs	r2, #7
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_ADC_Init+0x27c>)
 800108e:	4013      	ands	r3, r2
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d10b      	bne.n	80010ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a0:	2203      	movs	r2, #3
 80010a2:	4393      	bics	r3, r2
 80010a4:	2201      	movs	r2, #1
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010ac:	e01c      	b.n	80010e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b2:	2212      	movs	r2, #18
 80010b4:	4393      	bics	r3, r2
 80010b6:	2210      	movs	r2, #16
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c2:	2201      	movs	r2, #1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80010ca:	230f      	movs	r3, #15
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2201      	movs	r2, #1
 80010d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010d2:	e009      	b.n	80010e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	2210      	movs	r2, #16
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	fffffefd 	.word	0xfffffefd
 80010fc:	fffe0219 	.word	0xfffe0219
 8001100:	833fffe7 	.word	0x833fffe7

08001104 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110c:	230f      	movs	r3, #15
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2204      	movs	r2, #4
 800111c:	4013      	ands	r3, r2
 800111e:	d156      	bne.n	80011ce <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2234      	movs	r2, #52	; 0x34
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_Start_IT+0x2a>
 800112a:	2302      	movs	r3, #2
 800112c:	e056      	b.n	80011dc <HAL_ADC_Start_IT+0xd8>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2234      	movs	r2, #52	; 0x34
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7e5b      	ldrb	r3, [r3, #25]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d007      	beq.n	800114e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800113e:	230f      	movs	r3, #15
 8001140:	18fc      	adds	r4, r7, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f000 fa19 	bl	800157c <ADC_Enable>
 800114a:	0003      	movs	r3, r0
 800114c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800114e:	230f      	movs	r3, #15
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d13e      	bne.n	80011d6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_ADC_Start_IT+0xe0>)
 800115e:	4013      	ands	r3, r2
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0052      	lsls	r2, r2, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2234      	movs	r2, #52	; 0x34
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	221c      	movs	r2, #28
 800117e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d110      	bne.n	80011aa <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2104      	movs	r1, #4
 8001194:	438a      	bics	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2118      	movs	r1, #24
 80011a4:	430a      	orrs	r2, r1
 80011a6:	605a      	str	r2, [r3, #4]
          break;
 80011a8:	e008      	b.n	80011bc <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	211c      	movs	r1, #28
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
          break;
 80011ba:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2104      	movs	r1, #4
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e003      	b.n	80011d6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80011d6:	230f      	movs	r3, #15
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	781b      	ldrb	r3, [r3, #0]
}
 80011dc:	0018      	movs	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	b005      	add	sp, #20
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	fffff0fe 	.word	0xfffff0fe

080011e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2204      	movs	r2, #4
 8001210:	4013      	ands	r3, r2
 8001212:	2b04      	cmp	r3, #4
 8001214:	d106      	bne.n	8001224 <HAL_ADC_IRQHandler+0x24>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2204      	movs	r2, #4
 800121e:	4013      	ands	r3, r2
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00d      	beq.n	8001240 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2208      	movs	r2, #8
 800122c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800122e:	2b08      	cmp	r3, #8
 8001230:	d14f      	bne.n	80012d2 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2208      	movs	r2, #8
 800123a:	4013      	ands	r3, r2
 800123c:	2b08      	cmp	r3, #8
 800123e:	d148      	bne.n	80012d2 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001244:	2210      	movs	r2, #16
 8001246:	4013      	ands	r3, r2
 8001248:	d106      	bne.n	8001258 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	011b      	lsls	r3, r3, #4
 8001262:	4013      	ands	r3, r2
 8001264:	d12d      	bne.n	80012c2 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126a:	2b00      	cmp	r3, #0
 800126c:	d129      	bne.n	80012c2 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2208      	movs	r2, #8
 8001276:	4013      	ands	r3, r2
 8001278:	2b08      	cmp	r3, #8
 800127a:	d122      	bne.n	80012c2 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	d110      	bne.n	80012aa <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	210c      	movs	r1, #12
 8001294:	438a      	bics	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129c:	4a33      	ldr	r2, [pc, #204]	; (800136c <HAL_ADC_IRQHandler+0x16c>)
 800129e:	4013      	ands	r3, r2
 80012a0:	2201      	movs	r2, #1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
 80012a8:	e00b      	b.n	80012c2 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ae:	2220      	movs	r2, #32
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2201      	movs	r2, #1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff fa9b 	bl	8000800 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	4013      	ands	r3, r2
 80012dc:	2b80      	cmp	r3, #128	; 0x80
 80012de:	d115      	bne.n	800130c <HAL_ADC_IRQHandler+0x10c>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b80      	cmp	r3, #128	; 0x80
 80012ec:	d10e      	bne.n	800130c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0252      	lsls	r2, r2, #9
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f836 	bl	8001370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	2b10      	cmp	r3, #16
 8001318:	d123      	bne.n	8001362 <HAL_ADC_IRQHandler+0x162>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2210      	movs	r2, #16
 8001322:	4013      	ands	r3, r2
 8001324:	2b10      	cmp	r3, #16
 8001326:	d11c      	bne.n	8001362 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	2b01      	cmp	r3, #1
 800132e:	d006      	beq.n	800133e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2201      	movs	r2, #1
 8001338:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800133a:	2b01      	cmp	r3, #1
 800133c:	d10d      	bne.n	800135a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	2202      	movs	r2, #2
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2210      	movs	r2, #16
 8001350:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0018      	movs	r0, r3
 8001356:	f000 f813 	bl	8001380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2210      	movs	r2, #16
 8001360:	601a      	str	r2, [r3, #0]
  }

}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	fffffefe 	.word	0xfffffefe

08001370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b002      	add	sp, #8
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139a:	230f      	movs	r3, #15
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d011      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d00d      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d009      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d005      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d001      	beq.n	80013d6 <HAL_ADC_ConfigChannel+0x46>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2234      	movs	r2, #52	; 0x34
 80013da:	5c9b      	ldrb	r3, [r3, r2]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x54>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e0bb      	b.n	800155c <HAL_ADC_ConfigChannel+0x1cc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2234      	movs	r2, #52	; 0x34
 80013e8:	2101      	movs	r1, #1
 80013ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d000      	beq.n	80013fa <HAL_ADC_ConfigChannel+0x6a>
 80013f8:	e09f      	b.n	800153a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4a59      	ldr	r2, [pc, #356]	; (8001564 <HAL_ADC_ConfigChannel+0x1d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_ADC_ConfigChannel+0x76>
 8001404:	e077      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2201      	movs	r2, #1
 8001412:	409a      	lsls	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	055b      	lsls	r3, r3, #21
 8001424:	429a      	cmp	r2, r3
 8001426:	d037      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b01      	cmp	r3, #1
 800142e:	d033      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	2b02      	cmp	r3, #2
 8001436:	d02f      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	2b03      	cmp	r3, #3
 800143e:	d02b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	2b04      	cmp	r3, #4
 8001446:	d027      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	2b05      	cmp	r3, #5
 800144e:	d023      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	2b06      	cmp	r3, #6
 8001456:	d01f      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	2b07      	cmp	r3, #7
 800145e:	d01b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2107      	movs	r1, #7
 800146c:	400b      	ands	r3, r1
 800146e:	429a      	cmp	r2, r3
 8001470:	d012      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695a      	ldr	r2, [r3, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2107      	movs	r1, #7
 800147e:	438a      	bics	r2, r1
 8001480:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6959      	ldr	r1, [r3, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2207      	movs	r2, #7
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b10      	cmp	r3, #16
 800149e:	d003      	beq.n	80014a8 <HAL_ADC_ConfigChannel+0x118>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b11      	cmp	r3, #17
 80014a6:	d152      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b10      	cmp	r3, #16
 80014b2:	d102      	bne.n	80014ba <HAL_ADC_ConfigChannel+0x12a>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	041b      	lsls	r3, r3, #16
 80014b8:	e001      	b.n	80014be <HAL_ADC_ConfigChannel+0x12e>
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	03db      	lsls	r3, r3, #15
 80014be:	4a2a      	ldr	r2, [pc, #168]	; (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 80014c0:	430b      	orrs	r3, r1
 80014c2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d140      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_ADC_ConfigChannel+0x1dc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4927      	ldr	r1, [pc, #156]	; (8001570 <HAL_ADC_ConfigChannel+0x1e0>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f7fe fe18 	bl	8000108 <__udivsi3>
 80014d8:	0003      	movs	r3, r0
 80014da:	001a      	movs	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	189b      	adds	r3, r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014e6:	e002      	b.n	80014ee <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x158>
 80014f4:	e02b      	b.n	800154e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4099      	lsls	r1, r3
 8001504:	000b      	movs	r3, r1
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d003      	beq.n	8001520 <HAL_ADC_ConfigChannel+0x190>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b11      	cmp	r3, #17
 800151e:	d116      	bne.n	800154e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b10      	cmp	r3, #16
 800152a:	d101      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x1a0>
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_ADC_ConfigChannel+0x1e4>)
 800152e:	e000      	b.n	8001532 <HAL_ADC_ConfigChannel+0x1a2>
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <HAL_ADC_ConfigChannel+0x1e8>)
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_ADC_ConfigChannel+0x1d8>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	e009      	b.n	800154e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	2220      	movs	r2, #32
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001546:	230f      	movs	r3, #15
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2234      	movs	r2, #52	; 0x34
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001556:	230f      	movs	r3, #15
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b004      	add	sp, #16
 8001562:	bd80      	pop	{r7, pc}
 8001564:	00001001 	.word	0x00001001
 8001568:	40012708 	.word	0x40012708
 800156c:	20000004 	.word	0x20000004
 8001570:	000f4240 	.word	0x000f4240
 8001574:	ff7fffff 	.word	0xff7fffff
 8001578:	ffbfffff 	.word	0xffbfffff

0800157c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2203      	movs	r2, #3
 8001594:	4013      	ands	r3, r2
 8001596:	2b01      	cmp	r3, #1
 8001598:	d112      	bne.n	80015c0 <ADC_Enable+0x44>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d009      	beq.n	80015bc <ADC_Enable+0x40>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	401a      	ands	r2, r3
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d101      	bne.n	80015c0 <ADC_Enable+0x44>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <ADC_Enable+0x46>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d152      	bne.n	800166c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <ADC_Enable+0xfc>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	d00d      	beq.n	80015ee <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	2210      	movs	r2, #16
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e2:	2201      	movs	r2, #1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e03f      	b.n	800166e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <ADC_Enable+0x100>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	491f      	ldr	r1, [pc, #124]	; (8001680 <ADC_Enable+0x104>)
 8001604:	0018      	movs	r0, r3
 8001606:	f7fe fd7f 	bl	8000108 <__udivsi3>
 800160a:	0003      	movs	r3, r0
 800160c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160e:	e002      	b.n	8001616 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	3b01      	subs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800161c:	f7ff fc04 	bl	8000e28 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001624:	e01b      	b.n	800165e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001626:	f7ff fbff 	bl	8000e28 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d914      	bls.n	800165e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	4013      	ands	r3, r2
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00d      	beq.n	800165e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	2210      	movs	r2, #16
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	2201      	movs	r2, #1
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e007      	b.n	800166e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2201      	movs	r2, #1
 8001666:	4013      	ands	r3, r2
 8001668:	2b01      	cmp	r3, #1
 800166a:	d1dc      	bne.n	8001626 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	80000017 	.word	0x80000017
 800167c:	20000004 	.word	0x20000004
 8001680:	000f4240 	.word	0x000f4240

08001684 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800168c:	2317      	movs	r3, #23
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2234      	movs	r2, #52	; 0x34
 80016a0:	5c9b      	ldrb	r3, [r3, r2]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_ADCEx_Calibration_Start+0x26>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e08d      	b.n	80017c6 <HAL_ADCEx_Calibration_Start+0x142>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2234      	movs	r2, #52	; 0x34
 80016ae:	2101      	movs	r1, #1
 80016b0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d112      	bne.n	80016e6 <HAL_ADCEx_Calibration_Start+0x62>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d009      	beq.n	80016e2 <HAL_ADCEx_Calibration_Start+0x5e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	401a      	ands	r2, r3
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	429a      	cmp	r2, r3
 80016e0:	d101      	bne.n	80016e6 <HAL_ADCEx_Calibration_Start+0x62>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <HAL_ADCEx_Calibration_Start+0x64>
 80016e6:	2300      	movs	r3, #0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d15b      	bne.n	80017a4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f0:	4a37      	ldr	r2, [pc, #220]	; (80017d0 <HAL_ADCEx_Calibration_Start+0x14c>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	2202      	movs	r2, #2
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2203      	movs	r2, #3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2103      	movs	r1, #3
 8001714:	438a      	bics	r2, r1
 8001716:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	0609      	lsls	r1, r1, #24
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800172a:	f7ff fb7d 	bl	8000e28 <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001732:	e01d      	b.n	8001770 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001734:	f7ff fb78 	bl	8000e28 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d916      	bls.n	8001770 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	0fdb      	lsrs	r3, r3, #31
 800174a:	07da      	lsls	r2, r3, #31
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	061b      	lsls	r3, r3, #24
 8001750:	429a      	cmp	r2, r3
 8001752:	d10d      	bne.n	8001770 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	2212      	movs	r2, #18
 800175a:	4393      	bics	r3, r2
 800175c:	2210      	movs	r2, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2234      	movs	r2, #52	; 0x34
 8001768:	2100      	movs	r1, #0
 800176a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e02a      	b.n	80017c6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0fdb      	lsrs	r3, r3, #31
 8001778:	07da      	lsls	r2, r3, #31
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	061b      	lsls	r3, r3, #24
 800177e:	429a      	cmp	r2, r3
 8001780:	d0d8      	beq.n	8001734 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68d9      	ldr	r1, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	430a      	orrs	r2, r1
 8001790:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001796:	2203      	movs	r2, #3
 8001798:	4393      	bics	r3, r2
 800179a:	2201      	movs	r2, #1
 800179c:	431a      	orrs	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	639a      	str	r2, [r3, #56]	; 0x38
 80017a2:	e009      	b.n	80017b8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	2220      	movs	r2, #32
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80017b0:	2317      	movs	r3, #23
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2234      	movs	r2, #52	; 0x34
 80017bc:	2100      	movs	r1, #0
 80017be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	2317      	movs	r3, #23
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	781b      	ldrb	r3, [r3, #0]
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	fffffefd 	.word	0xfffffefd

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	0002      	movs	r2, r0
 80017dc:	1dfb      	adds	r3, r7, #7
 80017de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b7f      	cmp	r3, #127	; 0x7f
 80017e6:	d809      	bhi.n	80017fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	001a      	movs	r2, r3
 80017ee:	231f      	movs	r3, #31
 80017f0:	401a      	ands	r2, r3
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_EnableIRQ+0x30>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	4091      	lsls	r1, r2
 80017f8:	000a      	movs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
  }
}
 80017fc:	46c0      	nop			; (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b002      	add	sp, #8
 8001802:	bd80      	pop	{r7, pc}
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	0002      	movs	r2, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b7f      	cmp	r3, #127	; 0x7f
 800181c:	d828      	bhi.n	8001870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800181e:	4a2f      	ldr	r2, [pc, #188]	; (80018dc <__NVIC_SetPriority+0xd4>)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	33c0      	adds	r3, #192	; 0xc0
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	589b      	ldr	r3, [r3, r2]
 800182e:	1dfa      	adds	r2, r7, #7
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	0011      	movs	r1, r2
 8001834:	2203      	movs	r2, #3
 8001836:	400a      	ands	r2, r1
 8001838:	00d2      	lsls	r2, r2, #3
 800183a:	21ff      	movs	r1, #255	; 0xff
 800183c:	4091      	lsls	r1, r2
 800183e:	000a      	movs	r2, r1
 8001840:	43d2      	mvns	r2, r2
 8001842:	401a      	ands	r2, r3
 8001844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	019b      	lsls	r3, r3, #6
 800184a:	22ff      	movs	r2, #255	; 0xff
 800184c:	401a      	ands	r2, r3
 800184e:	1dfb      	adds	r3, r7, #7
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	0018      	movs	r0, r3
 8001854:	2303      	movs	r3, #3
 8001856:	4003      	ands	r3, r0
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185c:	481f      	ldr	r0, [pc, #124]	; (80018dc <__NVIC_SetPriority+0xd4>)
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	430a      	orrs	r2, r1
 8001868:	33c0      	adds	r3, #192	; 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800186e:	e031      	b.n	80018d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001870:	4a1b      	ldr	r2, [pc, #108]	; (80018e0 <__NVIC_SetPriority+0xd8>)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	0019      	movs	r1, r3
 8001878:	230f      	movs	r3, #15
 800187a:	400b      	ands	r3, r1
 800187c:	3b08      	subs	r3, #8
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3306      	adds	r3, #6
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	18d3      	adds	r3, r2, r3
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	1dfa      	adds	r2, r7, #7
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	0011      	movs	r1, r2
 8001890:	2203      	movs	r2, #3
 8001892:	400a      	ands	r2, r1
 8001894:	00d2      	lsls	r2, r2, #3
 8001896:	21ff      	movs	r1, #255	; 0xff
 8001898:	4091      	lsls	r1, r2
 800189a:	000a      	movs	r2, r1
 800189c:	43d2      	mvns	r2, r2
 800189e:	401a      	ands	r2, r3
 80018a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	22ff      	movs	r2, #255	; 0xff
 80018a8:	401a      	ands	r2, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	0018      	movs	r0, r3
 80018b0:	2303      	movs	r3, #3
 80018b2:	4003      	ands	r3, r0
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <__NVIC_SetPriority+0xd8>)
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001c      	movs	r4, r3
 80018c0:	230f      	movs	r3, #15
 80018c2:	4023      	ands	r3, r4
 80018c4:	3b08      	subs	r3, #8
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	430a      	orrs	r2, r1
 80018ca:	3306      	adds	r3, #6
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	18c3      	adds	r3, r0, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b003      	add	sp, #12
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1e5a      	subs	r2, r3, #1
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	045b      	lsls	r3, r3, #17
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f8:	2301      	movs	r3, #1
 80018fa:	e010      	b.n	800191e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <SysTick_Config+0x44>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	3a01      	subs	r2, #1
 8001902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001904:	2301      	movs	r3, #1
 8001906:	425b      	negs	r3, r3
 8001908:	2103      	movs	r1, #3
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff ff7c 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <SysTick_Config+0x44>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <SysTick_Config+0x44>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	210f      	movs	r1, #15
 8001938:	187b      	adds	r3, r7, r1
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b25b      	sxtb	r3, r3
 8001946:	0011      	movs	r1, r2
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b004      	add	sp, #16
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	0002      	movs	r2, r0
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001962:	1dfb      	adds	r3, r7, #7
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff ff33 	bl	80017d4 <__NVIC_EnableIRQ>
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f7ff ffaf 	bl	80018e4 <SysTick_Config>
 8001986:	0003      	movs	r3, r0
}
 8001988:	0018      	movs	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2221      	movs	r2, #33	; 0x21
 800199c:	5c9b      	ldrb	r3, [r3, r2]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e020      	b.n	80019f8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	210e      	movs	r1, #14
 80019c2:	438a      	bics	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2101      	movs	r1, #1
 80019d2:	438a      	bics	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	2101      	movs	r1, #1
 80019e0:	4091      	lsls	r1, r2
 80019e2:	000a      	movs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2221      	movs	r2, #33	; 0x21
 80019ea:	2101      	movs	r1, #1
 80019ec:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	2100      	movs	r1, #0
 80019f4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a08:	210f      	movs	r1, #15
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2221      	movs	r2, #33	; 0x21
 8001a14:	5c9b      	ldrb	r3, [r3, r2]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d006      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e028      	b.n	8001a7c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	210e      	movs	r1, #14
 8001a36:	438a      	bics	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	438a      	bics	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2101      	movs	r1, #1
 8001a54:	4091      	lsls	r1, r2
 8001a56:	000a      	movs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2221      	movs	r2, #33	; 0x21
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2220      	movs	r2, #32
 8001a66:	2100      	movs	r1, #0
 8001a68:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	0010      	movs	r0, r2
 8001a7a:	4798      	blx	r3
    } 
  }
  return status;
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a96:	4b6e      	ldr	r3, [pc, #440]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b10      	cmp	r3, #16
 8001aa0:	d005      	beq.n	8001aae <HAL_FLASH_IRQHandler+0x22>
 8001aa2:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d10f      	bne.n	8001ace <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8001aae:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001ab4:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4252      	negs	r2, r2
 8001aba:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8001abc:	f000 f8fa 	bl	8001cb4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 f8d2 	bl	8001c6c <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b20      	cmp	r3, #32
 8001ad8:	d000      	beq.n	8001adc <HAL_FLASH_IRQHandler+0x50>
 8001ada:	e0a1      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001adc:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001ade:	2220      	movs	r2, #32
 8001ae0:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d100      	bne.n	8001aee <HAL_FLASH_IRQHandler+0x62>
 8001aec:	e098      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001aee:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d132      	bne.n	8001b5e <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	4b55      	ldr	r3, [pc, #340]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b00:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001b02:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d01b      	beq.n	8001b42 <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8001b0a:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	0018      	movs	r0, r3
 8001b14:	f000 f8a2 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8001b18:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	4694      	mov	ip, r2
 8001b22:	4463      	add	r3, ip
 8001b24:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001b2c:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001b32:	2102      	movs	r1, #2
 8001b34:	438a      	bics	r2, r1
 8001b36:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8ea 	bl	8001d14 <FLASH_PageErase>
 8001b40:	e06e      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8001b42:	2301      	movs	r3, #1
 8001b44:	425b      	negs	r3, r3
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f880 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
 8001b5c:	e060      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d10c      	bne.n	8001b82 <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001b6e:	2104      	movs	r1, #4
 8001b70:	438a      	bics	r2, r1
 8001b72:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 f871 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e04e      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b8a:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d021      	beq.n	8001bd8 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	1c9a      	adds	r2, r3, #2
 8001b9a:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001b9c:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	0419      	lsls	r1, r3, #16
 8001bac:	0c14      	lsrs	r4, r2, #16
 8001bae:	430c      	orrs	r4, r1
 8001bb0:	0c1d      	lsrs	r5, r3, #16
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001bb4:	611c      	str	r4, [r3, #16]
 8001bb6:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	0011      	movs	r1, r2
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f000 f853 	bl	8001c7c <FLASH_Program_HalfWord>
 8001bd6:	e023      	b.n	8001c20 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d105      	bne.n	8001bee <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001be2:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0018      	movs	r0, r3
 8001be8:	f000 f838 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
 8001bec:	e011      	b.n	8001c12 <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d106      	bne.n	8001c06 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	3b02      	subs	r3, #2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 f82c 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	3b06      	subs	r3, #6
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 f825 	bl	8001c5c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	4252      	negs	r2, r2
 8001c18:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10e      	bne.n	8001c48 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001c30:	2107      	movs	r1, #7
 8001c32:	438a      	bics	r2, r1
 8001c34:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_FLASH_IRQHandler+0x1c4>)
 8001c3c:	4906      	ldr	r1, [pc, #24]	; (8001c58 <HAL_FLASH_IRQHandler+0x1cc>)
 8001c3e:	400a      	ands	r2, r1
 8001c40:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_FLASH_IRQHandler+0x1c8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	761a      	strb	r2, [r3, #24]
  }
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	40022000 	.word	0x40022000
 8001c54:	200001c8 	.word	0x200001c8
 8001c58:	ffffebff 	.word	0xffffebff

08001c5c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	000a      	movs	r2, r1
 8001c86:	1cbb      	adds	r3, r7, #2
 8001c88:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <FLASH_Program_HalfWord+0x30>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001c90:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <FLASH_Program_HalfWord+0x34>)
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <FLASH_Program_HalfWord+0x34>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	1cba      	adds	r2, r7, #2
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	801a      	strh	r2, [r3, #0]
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200001c8 	.word	0x200001c8
 8001cb0:	40022000 	.word	0x40022000

08001cb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <FLASH_SetErrorCode+0x58>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d109      	bne.n	8001cde <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <FLASH_SetErrorCode+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <FLASH_SetErrorCode+0x5c>)
 8001cd4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <FLASH_SetErrorCode+0x58>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d109      	bne.n	8001cfe <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <FLASH_SetErrorCode+0x5c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <FLASH_SetErrorCode+0x5c>)
 8001cf4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001cfe:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <FLASH_SetErrorCode+0x58>)
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}  
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	200001c8 	.word	0x200001c8

08001d14 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <FLASH_PageErase+0x34>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <FLASH_PageErase+0x38>)
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <FLASH_PageErase+0x38>)
 8001d28:	2102      	movs	r1, #2
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <FLASH_PageErase+0x38>)
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <FLASH_PageErase+0x38>)
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <FLASH_PageErase+0x38>)
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	611a      	str	r2, [r3, #16]
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200001c8 	.word	0x200001c8
 8001d4c:	40022000 	.word	0x40022000

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5e:	e14f      	b.n	8002000 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4091      	lsls	r1, r2
 8001d6a:	000a      	movs	r2, r1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d100      	bne.n	8001d78 <HAL_GPIO_Init+0x28>
 8001d76:	e140      	b.n	8001ffa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d005      	beq.n	8001d90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d130      	bne.n	8001df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	43da      	mvns	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	0013      	movs	r3, r2
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	2201      	movs	r2, #1
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d017      	beq.n	8001e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d123      	bne.n	8001e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	58d3      	ldr	r3, [r2, r3]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2107      	movs	r1, #7
 8001e66:	400b      	ands	r3, r1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	08da      	lsrs	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3208      	adds	r2, #8
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	6939      	ldr	r1, [r7, #16]
 8001e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	029b      	lsls	r3, r3, #10
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d100      	bne.n	8001ec4 <HAL_GPIO_Init+0x174>
 8001ec2:	e09a      	b.n	8001ffa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2c8>)
 8001ec6:	699a      	ldr	r2, [r3, #24]
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_GPIO_Init+0x2c8>)
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	619a      	str	r2, [r3, #24]
 8001ed0:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_GPIO_Init+0x2c8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x2cc>)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	589b      	ldr	r3, [r3, r2]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2203      	movs	r2, #3
 8001eee:	4013      	ands	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	2390      	movs	r3, #144	; 0x90
 8001f04:	05db      	lsls	r3, r3, #23
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d013      	beq.n	8001f32 <HAL_GPIO_Init+0x1e2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a44      	ldr	r2, [pc, #272]	; (8002020 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00d      	beq.n	8001f2e <HAL_GPIO_Init+0x1de>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_GPIO_Init+0x2d4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d007      	beq.n	8001f2a <HAL_GPIO_Init+0x1da>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a42      	ldr	r2, [pc, #264]	; (8002028 <HAL_GPIO_Init+0x2d8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d101      	bne.n	8001f26 <HAL_GPIO_Init+0x1d6>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f26:	2305      	movs	r3, #5
 8001f28:	e004      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e002      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_GPIO_Init+0x1e4>
 8001f32:	2300      	movs	r3, #0
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	2103      	movs	r1, #3
 8001f38:	400a      	ands	r2, r1
 8001f3a:	0092      	lsls	r2, r2, #2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f44:	4935      	ldr	r1, [pc, #212]	; (800201c <HAL_GPIO_Init+0x2cc>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	025b      	lsls	r3, r3, #9
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43da      	mvns	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	035b      	lsls	r3, r3, #13
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43da      	mvns	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	039b      	lsls	r3, r3, #14
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_GPIO_Init+0x2dc>)
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	40da      	lsrs	r2, r3
 8002008:	1e13      	subs	r3, r2, #0
 800200a:	d000      	beq.n	800200e <HAL_GPIO_Init+0x2be>
 800200c:	e6a8      	b.n	8001d60 <HAL_GPIO_Init+0x10>
  } 
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46c0      	nop			; (mov r8, r8)
 8002012:	46bd      	mov	sp, r7
 8002014:	b006      	add	sp, #24
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800
 8002028:	48000c00 	.word	0x48000c00
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	000a      	movs	r2, r1
 800203a:	1cbb      	adds	r3, r7, #2
 800203c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	1cba      	adds	r2, r7, #2
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	4013      	ands	r3, r2
 8002048:	d004      	beq.n	8002054 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800204a:	230f      	movs	r3, #15
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	e003      	b.n	800205c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800205c:	230f      	movs	r3, #15
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
  }
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	0008      	movs	r0, r1
 8002074:	0011      	movs	r1, r2
 8002076:	1cbb      	adds	r3, r7, #2
 8002078:	1c02      	adds	r2, r0, #0
 800207a:	801a      	strh	r2, [r3, #0]
 800207c:	1c7b      	adds	r3, r7, #1
 800207e:	1c0a      	adds	r2, r1, #0
 8002080:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002082:	1c7b      	adds	r3, r7, #1
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d004      	beq.n	8002094 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208a:	1cbb      	adds	r3, r7, #2
 800208c:	881a      	ldrh	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002092:	e003      	b.n	800209c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002094:	1cbb      	adds	r3, r7, #2
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	0002      	movs	r2, r0
 80020ac:	1dbb      	adds	r3, r7, #6
 80020ae:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	1dba      	adds	r2, r7, #6
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	4013      	ands	r3, r2
 80020ba:	d008      	beq.n	80020ce <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80020be:	1dba      	adds	r2, r7, #6
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7fe faeb 	bl	80006a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e305      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2201      	movs	r2, #1
 80020f4:	4013      	ands	r3, r2
 80020f6:	d100      	bne.n	80020fa <HAL_RCC_OscConfig+0x1e>
 80020f8:	e08d      	b.n	8002216 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020fa:	4bc5      	ldr	r3, [pc, #788]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	220c      	movs	r2, #12
 8002100:	4013      	ands	r3, r2
 8002102:	2b04      	cmp	r3, #4
 8002104:	d00e      	beq.n	8002124 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002106:	4bc2      	ldr	r3, [pc, #776]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	220c      	movs	r2, #12
 800210c:	4013      	ands	r3, r2
 800210e:	2b08      	cmp	r3, #8
 8002110:	d116      	bne.n	8002140 <HAL_RCC_OscConfig+0x64>
 8002112:	4bbf      	ldr	r3, [pc, #764]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	401a      	ands	r2, r3
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	429a      	cmp	r2, r3
 8002122:	d10d      	bne.n	8002140 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4bba      	ldr	r3, [pc, #744]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	029b      	lsls	r3, r3, #10
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <HAL_RCC_OscConfig+0x56>
 8002130:	e070      	b.n	8002214 <HAL_RCC_OscConfig+0x138>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d000      	beq.n	800213c <HAL_RCC_OscConfig+0x60>
 800213a:	e06b      	b.n	8002214 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e2dc      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x7c>
 8002148:	4bb1      	ldr	r3, [pc, #708]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0249      	lsls	r1, r1, #9
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	e02f      	b.n	80021b8 <HAL_RCC_OscConfig+0xdc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x9e>
 8002160:	4bab      	ldr	r3, [pc, #684]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4baa      	ldr	r3, [pc, #680]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002166:	49ab      	ldr	r1, [pc, #684]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 8002168:	400a      	ands	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4ba8      	ldr	r3, [pc, #672]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4ba7      	ldr	r3, [pc, #668]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002172:	49a9      	ldr	r1, [pc, #676]	; (8002418 <HAL_RCC_OscConfig+0x33c>)
 8002174:	400a      	ands	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e01e      	b.n	80021b8 <HAL_RCC_OscConfig+0xdc>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d10e      	bne.n	80021a0 <HAL_RCC_OscConfig+0xc4>
 8002182:	4ba3      	ldr	r3, [pc, #652]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4ba2      	ldr	r3, [pc, #648]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	02c9      	lsls	r1, r1, #11
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	4b9f      	ldr	r3, [pc, #636]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b9e      	ldr	r3, [pc, #632]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	0249      	lsls	r1, r1, #9
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xdc>
 80021a0:	4b9b      	ldr	r3, [pc, #620]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b9a      	ldr	r3, [pc, #616]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80021a6:	499b      	ldr	r1, [pc, #620]	; (8002414 <HAL_RCC_OscConfig+0x338>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b98      	ldr	r3, [pc, #608]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b97      	ldr	r3, [pc, #604]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80021b2:	4999      	ldr	r1, [pc, #612]	; (8002418 <HAL_RCC_OscConfig+0x33c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe32 	bl	8000e28 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ca:	f7fe fe2d 	bl	8000e28 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	; 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e28e      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	4b8c      	ldr	r3, [pc, #560]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0xee>
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fe1d 	bl	8000e28 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fe18 	bl	8000e28 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e279      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002206:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	029b      	lsls	r3, r3, #10
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x118>
 8002212:	e000      	b.n	8002216 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002214:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2202      	movs	r2, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x146>
 8002220:	e06c      	b.n	80022fc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	220c      	movs	r2, #12
 8002228:	4013      	ands	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800222c:	4b78      	ldr	r3, [pc, #480]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	220c      	movs	r2, #12
 8002232:	4013      	ands	r3, r2
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11f      	bne.n	8002278 <HAL_RCC_OscConfig+0x19c>
 8002238:	4b75      	ldr	r3, [pc, #468]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	23c0      	movs	r3, #192	; 0xc0
 800223e:	025b      	lsls	r3, r3, #9
 8002240:	401a      	ands	r2, r3
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	429a      	cmp	r2, r3
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b71      	ldr	r3, [pc, #452]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x184>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e24c      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	22f8      	movs	r2, #248	; 0xf8
 8002266:	4393      	bics	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00da      	lsls	r2, r3, #3
 8002270:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e041      	b.n	80022fc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d024      	beq.n	80022ca <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe fdcc 	bl	8000e28 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fdc7 	bl	8000e28 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e228      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0f1      	beq.n	8002296 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	22f8      	movs	r2, #248	; 0xf8
 80022b8:	4393      	bics	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b50      	ldr	r3, [pc, #320]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	438a      	bics	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7fe fda7 	bl	8000e28 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fda2 	bl	8000e28 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e203      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1f1      	bne.n	80022e0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2208      	movs	r2, #8
 8002302:	4013      	ands	r3, r2
 8002304:	d036      	beq.n	8002374 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002312:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002314:	2101      	movs	r1, #1
 8002316:	430a      	orrs	r2, r1
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7fe fd85 	bl	8000e28 <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fd80 	bl	8000e28 <HAL_GetTick>
 8002328:	0002      	movs	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1e1      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	4013      	ands	r3, r2
 800233e:	d0f1      	beq.n	8002324 <HAL_RCC_OscConfig+0x248>
 8002340:	e018      	b.n	8002374 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b33      	ldr	r3, [pc, #204]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002346:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002348:	2101      	movs	r1, #1
 800234a:	438a      	bics	r2, r1
 800234c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fd6b 	bl	8000e28 <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002358:	f7fe fd66 	bl	8000e28 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1c7      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d1f1      	bne.n	8002358 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2204      	movs	r2, #4
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_RCC_OscConfig+0x2a4>
 800237e:	e0b5      	b.n	80024ec <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002380:	201f      	movs	r0, #31
 8002382:	183b      	adds	r3, r7, r0
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	4013      	ands	r3, r2
 8002392:	d110      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 800239a:	2180      	movs	r1, #128	; 0x80
 800239c:	0549      	lsls	r1, r1, #21
 800239e:	430a      	orrs	r2, r1
 80023a0:	61da      	str	r2, [r3, #28]
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	055b      	lsls	r3, r3, #21
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_OscConfig+0x340>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_OscConfig+0x340>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <HAL_RCC_OscConfig+0x340>)
 80023c8:	2180      	movs	r1, #128	; 0x80
 80023ca:	0049      	lsls	r1, r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fd2a 	bl	8000e28 <HAL_GetTick>
 80023d4:	0003      	movs	r3, r0
 80023d6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023da:	f7fe fd25 	bl	8000e28 <HAL_GetTick>
 80023de:	0002      	movs	r2, r0
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e186      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_OscConfig+0x340>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d10f      	bne.n	8002420 <HAL_RCC_OscConfig+0x344>
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4b02      	ldr	r3, [pc, #8]	; (8002410 <HAL_RCC_OscConfig+0x334>)
 8002406:	2101      	movs	r1, #1
 8002408:	430a      	orrs	r2, r1
 800240a:	621a      	str	r2, [r3, #32]
 800240c:	e036      	b.n	800247c <HAL_RCC_OscConfig+0x3a0>
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	40021000 	.word	0x40021000
 8002414:	fffeffff 	.word	0xfffeffff
 8002418:	fffbffff 	.word	0xfffbffff
 800241c:	40007000 	.word	0x40007000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x366>
 8002428:	4bb6      	ldr	r3, [pc, #728]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800242a:	6a1a      	ldr	r2, [r3, #32]
 800242c:	4bb5      	ldr	r3, [pc, #724]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	621a      	str	r2, [r3, #32]
 8002434:	4bb3      	ldr	r3, [pc, #716]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	4bb2      	ldr	r3, [pc, #712]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800243a:	2104      	movs	r1, #4
 800243c:	438a      	bics	r2, r1
 800243e:	621a      	str	r2, [r3, #32]
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x3a0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b05      	cmp	r3, #5
 8002448:	d10c      	bne.n	8002464 <HAL_RCC_OscConfig+0x388>
 800244a:	4bae      	ldr	r3, [pc, #696]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	4bad      	ldr	r3, [pc, #692]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002450:	2104      	movs	r1, #4
 8002452:	430a      	orrs	r2, r1
 8002454:	621a      	str	r2, [r3, #32]
 8002456:	4bab      	ldr	r3, [pc, #684]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002458:	6a1a      	ldr	r2, [r3, #32]
 800245a:	4baa      	ldr	r3, [pc, #680]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	621a      	str	r2, [r3, #32]
 8002462:	e00b      	b.n	800247c <HAL_RCC_OscConfig+0x3a0>
 8002464:	4ba7      	ldr	r3, [pc, #668]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	4ba6      	ldr	r3, [pc, #664]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800246a:	2101      	movs	r1, #1
 800246c:	438a      	bics	r2, r1
 800246e:	621a      	str	r2, [r3, #32]
 8002470:	4ba4      	ldr	r3, [pc, #656]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002472:	6a1a      	ldr	r2, [r3, #32]
 8002474:	4ba3      	ldr	r3, [pc, #652]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002476:	2104      	movs	r1, #4
 8002478:	438a      	bics	r2, r1
 800247a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d014      	beq.n	80024ae <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002484:	f7fe fcd0 	bl	8000e28 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	e009      	b.n	80024a2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe fccb 	bl	8000e28 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	4a9b      	ldr	r2, [pc, #620]	; (8002708 <HAL_RCC_OscConfig+0x62c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e12b      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	4b98      	ldr	r3, [pc, #608]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	2202      	movs	r2, #2
 80024a8:	4013      	ands	r3, r2
 80024aa:	d0f0      	beq.n	800248e <HAL_RCC_OscConfig+0x3b2>
 80024ac:	e013      	b.n	80024d6 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ae:	f7fe fcbb 	bl	8000e28 <HAL_GetTick>
 80024b2:	0003      	movs	r3, r0
 80024b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	e009      	b.n	80024cc <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fcb6 	bl	8000e28 <HAL_GetTick>
 80024bc:	0002      	movs	r2, r0
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	4a91      	ldr	r2, [pc, #580]	; (8002708 <HAL_RCC_OscConfig+0x62c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e116      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024cc:	4b8d      	ldr	r3, [pc, #564]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4013      	ands	r3, r2
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d6:	231f      	movs	r3, #31
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b88      	ldr	r3, [pc, #544]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	4b87      	ldr	r3, [pc, #540]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80024e6:	4989      	ldr	r1, [pc, #548]	; (800270c <HAL_RCC_OscConfig+0x630>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2210      	movs	r2, #16
 80024f2:	4013      	ands	r3, r2
 80024f4:	d063      	beq.n	80025be <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d12a      	bne.n	8002554 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024fe:	4b81      	ldr	r3, [pc, #516]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002502:	4b80      	ldr	r3, [pc, #512]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002504:	2104      	movs	r1, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800250a:	4b7e      	ldr	r3, [pc, #504]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800250c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800250e:	4b7d      	ldr	r3, [pc, #500]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002510:	2101      	movs	r1, #1
 8002512:	430a      	orrs	r2, r1
 8002514:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fc87 	bl	8000e28 <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002520:	f7fe fc82 	bl	8000e28 <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0e3      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002532:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d0f1      	beq.n	8002520 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800253c:	4b71      	ldr	r3, [pc, #452]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	22f8      	movs	r2, #248	; 0xf8
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800254e:	430a      	orrs	r2, r1
 8002550:	635a      	str	r2, [r3, #52]	; 0x34
 8002552:	e034      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	3305      	adds	r3, #5
 800255a:	d111      	bne.n	8002580 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800255c:	4b69      	ldr	r3, [pc, #420]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800255e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002562:	2104      	movs	r1, #4
 8002564:	438a      	bics	r2, r1
 8002566:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	22f8      	movs	r2, #248	; 0xf8
 800256e:	4393      	bics	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	00da      	lsls	r2, r3, #3
 8002578:	4b62      	ldr	r3, [pc, #392]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800257a:	430a      	orrs	r2, r1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
 800257e:	e01e      	b.n	80025be <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002580:	4b60      	ldr	r3, [pc, #384]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002584:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002586:	2104      	movs	r1, #4
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800258c:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800258e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002590:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002592:	2101      	movs	r1, #1
 8002594:	438a      	bics	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe fc46 	bl	8000e28 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025a2:	f7fe fc41 	bl	8000e28 <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e0a2      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80025b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b8:	2202      	movs	r2, #2
 80025ba:	4013      	ands	r3, r2
 80025bc:	d1f1      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d100      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4ec>
 80025c6:	e097      	b.n	80026f8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	220c      	movs	r2, #12
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d100      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4fa>
 80025d4:	e06b      	b.n	80026ae <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d14c      	bne.n	8002678 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b48      	ldr	r3, [pc, #288]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80025e4:	494a      	ldr	r1, [pc, #296]	; (8002710 <HAL_RCC_OscConfig+0x634>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7fe fc1d 	bl	8000e28 <HAL_GetTick>
 80025ee:	0003      	movs	r3, r0
 80025f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fc18 	bl	8000e28 <HAL_GetTick>
 80025f8:	0002      	movs	r2, r0
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e079      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002606:	4b3f      	ldr	r3, [pc, #252]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	049b      	lsls	r3, r3, #18
 800260e:	4013      	ands	r3, r2
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	220f      	movs	r2, #15
 8002618:	4393      	bics	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	4b38      	ldr	r3, [pc, #224]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4a3a      	ldr	r2, [pc, #232]	; (8002714 <HAL_RCC_OscConfig+0x638>)
 800262c:	4013      	ands	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	431a      	orrs	r2, r3
 800263a:	4b32      	ldr	r3, [pc, #200]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0449      	lsls	r1, r1, #17
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe fbeb 	bl	8000e28 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fbe6 	bl	8000e28 <HAL_GetTick>
 800265c:	0002      	movs	r2, r0
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e047      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266a:	4b26      	ldr	r3, [pc, #152]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	049b      	lsls	r3, r3, #18
 8002672:	4013      	ands	r3, r2
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x57c>
 8002676:	e03f      	b.n	80026f8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 800267e:	4924      	ldr	r1, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x634>)
 8002680:	400a      	ands	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fbd0 	bl	8000e28 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fbcb 	bl	8000e28 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e02c      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	049b      	lsls	r3, r3, #18
 80026a8:	4013      	ands	r3, r2
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0x5b2>
 80026ac:	e024      	b.n	80026f8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e01f      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_OscConfig+0x628>)
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	23c0      	movs	r3, #192	; 0xc0
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	401a      	ands	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d10e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	220f      	movs	r2, #15
 80026da:	401a      	ands	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	23f0      	movs	r3, #240	; 0xf0
 80026e8:	039b      	lsls	r3, r3, #14
 80026ea:	401a      	ands	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b008      	add	sp, #32
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	40021000 	.word	0x40021000
 8002708:	00001388 	.word	0x00001388
 800270c:	efffffff 	.word	0xefffffff
 8002710:	feffffff 	.word	0xfeffffff
 8002714:	ffc27fff 	.word	0xffc27fff

08002718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b3      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800272c:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	4013      	ands	r3, r2
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d911      	bls.n	800275e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b58      	ldr	r3, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2201      	movs	r2, #1
 8002740:	4393      	bics	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	4b55      	ldr	r3, [pc, #340]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d001      	beq.n	800275e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e09a      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d015      	beq.n	8002794 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d006      	beq.n	8002780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002772:	4b4b      	ldr	r3, [pc, #300]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002778:	21e0      	movs	r1, #224	; 0xe0
 800277a:	00c9      	lsls	r1, r1, #3
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002780:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	22f0      	movs	r2, #240	; 0xf0
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	d040      	beq.n	8002820 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	2380      	movs	r3, #128	; 0x80
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	d114      	bne.n	80027dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06e      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2380      	movs	r3, #128	; 0x80
 80027c4:	049b      	lsls	r3, r3, #18
 80027c6:	4013      	ands	r3, r2
 80027c8:	d108      	bne.n	80027dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e062      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ce:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e05b      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2203      	movs	r2, #3
 80027e2:	4393      	bics	r3, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f0:	f7fe fb1a 	bl	8000e28 <HAL_GetTick>
 80027f4:	0003      	movs	r3, r0
 80027f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f8:	e009      	b.n	800280e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7fe fb15 	bl	8000e28 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_RCC_ClockConfig+0x18c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e042      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	220c      	movs	r2, #12
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1ec      	bne.n	80027fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d211      	bcs.n	8002852 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4393      	bics	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x184>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2201      	movs	r2, #1
 8002846:	4013      	ands	r3, r2
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e020      	b.n	8002894 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_RCC_ClockConfig+0x190>)
 8002862:	4013      	ands	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002870:	f000 f820 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8002874:	0001      	movs	r1, r0
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x188>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	220f      	movs	r2, #15
 800287e:	4013      	ands	r3, r2
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_RCC_ClockConfig+0x194>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	000a      	movs	r2, r1
 8002886:	40da      	lsrs	r2, r3
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <HAL_RCC_ClockConfig+0x198>)
 800288a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800288c:	2000      	movs	r0, #0
 800288e:	f7fe fa85 	bl	8000d9c <HAL_InitTick>
  
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40022000 	.word	0x40022000
 80028a0:	40021000 	.word	0x40021000
 80028a4:	00001388 	.word	0x00001388
 80028a8:	fffff8ff 	.word	0xfffff8ff
 80028ac:	080043e4 	.word	0x080043e4
 80028b0:	20000004 	.word	0x20000004

080028b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b08f      	sub	sp, #60	; 0x3c
 80028b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80028ba:	2314      	movs	r3, #20
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028c2:	c313      	stmia	r3!, {r0, r1, r4}
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4a2a      	ldr	r2, [pc, #168]	; (8002974 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80028ce:	c313      	stmia	r3!, {r0, r1, r4}
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
 80028dc:	2300      	movs	r3, #0
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	220c      	movs	r2, #12
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d002      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x4a>
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d003      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x50>
 80028fc:	e02f      	b.n	800295e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002902:	e02f      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	220f      	movs	r2, #15
 800290a:	4013      	ands	r3, r2
 800290c:	2214      	movs	r2, #20
 800290e:	18ba      	adds	r2, r7, r2
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	220f      	movs	r2, #15
 800291a:	4013      	ands	r3, r2
 800291c:	1d3a      	adds	r2, r7, #4
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002924:	23c0      	movs	r3, #192	; 0xc0
 8002926:	025b      	lsls	r3, r3, #9
 8002928:	401a      	ands	r2, r3
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	025b      	lsls	r3, r3, #9
 800292e:	429a      	cmp	r2, r3
 8002930:	d109      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002934:	4811      	ldr	r0, [pc, #68]	; (800297c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002936:	f7fd fbe7 	bl	8000108 <__udivsi3>
 800293a:	0003      	movs	r3, r0
 800293c:	001a      	movs	r2, r3
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	4353      	muls	r3, r2
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
 8002944:	e008      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002948:	480c      	ldr	r0, [pc, #48]	; (800297c <HAL_RCC_GetSysClockFreq+0xc8>)
 800294a:	f7fd fbdd 	bl	8000108 <__udivsi3>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	4353      	muls	r3, r2
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800295c:	e002      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002960:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002962:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b00f      	add	sp, #60	; 0x3c
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	080043c4 	.word	0x080043c4
 8002974:	080043d4 	.word	0x080043d4
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <HAL_RCC_GetHCLKFreq+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002998:	f7ff fff2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800299c:	0001      	movs	r1, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	2207      	movs	r2, #7
 80029a6:	4013      	ands	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	40d9      	lsrs	r1, r3
 80029ae:	000b      	movs	r3, r1
}    
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000
 80029bc:	080043f4 	.word	0x080043f4

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	4013      	ands	r3, r2
 80029da:	d100      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029dc:	e08e      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029de:	2017      	movs	r0, #23
 80029e0:	183b      	adds	r3, r7, r0
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b5f      	ldr	r3, [pc, #380]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	055b      	lsls	r3, r3, #21
 80029ee:	4013      	ands	r3, r2
 80029f0:	d110      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b5c      	ldr	r3, [pc, #368]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029f4:	69da      	ldr	r2, [r3, #28]
 80029f6:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	0549      	lsls	r1, r1, #21
 80029fc:	430a      	orrs	r2, r1
 80029fe:	61da      	str	r2, [r3, #28]
 8002a00:	4b58      	ldr	r3, [pc, #352]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	055b      	lsls	r3, r3, #21
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0e:	183b      	adds	r3, r7, r0
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	; 0x80
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d11a      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a20:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	0049      	lsls	r1, r1, #1
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe f9fb 	bl	8000e28 <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a38:	f7fe f9f6 	bl	8000e28 <HAL_GetTick>
 8002a3c:	0002      	movs	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e087      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	23c0      	movs	r3, #192	; 0xc0
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d034      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	23c0      	movs	r3, #192	; 0xc0
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d02c      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a78:	4b3a      	ldr	r3, [pc, #232]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	4a3b      	ldr	r2, [pc, #236]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a82:	4b38      	ldr	r3, [pc, #224]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0249      	lsls	r1, r1, #9
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a96:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9c:	4b31      	ldr	r3, [pc, #196]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d013      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f9bd 	bl	8000e28 <HAL_GetTick>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e009      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe f9b8 	bl	8000e28 <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	4a2d      	ldr	r2, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e048      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b26      	ldr	r3, [pc, #152]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae6:	2317      	movs	r3, #23
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002af6:	4920      	ldr	r1, [pc, #128]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002af8:	400a      	ands	r2, r1
 8002afa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	4013      	ands	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	2210      	movs	r2, #16
 8002b2a:	4393      	bics	r3, r2
 8002b2c:	0019      	movs	r1, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b34:	430a      	orrs	r2, r1
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	4393      	bics	r3, r2
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b54:	430a      	orrs	r2, r1
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b006      	add	sp, #24
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	fffffcff 	.word	0xfffffcff
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	00001388 	.word	0x00001388
 8002b78:	efffffff 	.word	0xefffffff

08002b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e042      	b.n	8002c14 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223d      	movs	r2, #61	; 0x3d
 8002b92:	5c9b      	ldrb	r3, [r3, r2]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223c      	movs	r2, #60	; 0x3c
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fd ff79 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	223d      	movs	r2, #61	; 0x3d
 8002bae:	2102      	movs	r1, #2
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	0019      	movs	r1, r3
 8002bbc:	0010      	movs	r0, r2
 8002bbe:	f000 fab1 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2246      	movs	r2, #70	; 0x46
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	223e      	movs	r2, #62	; 0x3e
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	223f      	movs	r2, #63	; 0x3f
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2241      	movs	r2, #65	; 0x41
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2242      	movs	r2, #66	; 0x42
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2243      	movs	r2, #67	; 0x43
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2244      	movs	r2, #68	; 0x44
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2245      	movs	r2, #69	; 0x45
 8002c06:	2101      	movs	r1, #1
 8002c08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	; 0x3d
 8002c0e:	2101      	movs	r1, #1
 8002c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	223d      	movs	r2, #61	; 0x3d
 8002c28:	5c9b      	ldrb	r3, [r3, r2]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e035      	b.n	8002ca0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	223d      	movs	r2, #61	; 0x3d
 8002c38:	2102      	movs	r1, #2
 8002c3a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2101      	movs	r1, #1
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <HAL_TIM_Base_Start_IT+0x8c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d009      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x4e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_Base_Start_IT+0x90>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x4e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_TIM_Base_Start_IT+0x94>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d111      	bne.n	8002c8e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d010      	beq.n	8002c9e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2101      	movs	r1, #1
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	e007      	b.n	8002c9e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b004      	add	sp, #16
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40014000 	.word	0x40014000

08002cb4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <HAL_TIM_Base_Stop_IT+0x54>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d10d      	bne.n	8002cf4 <HAL_TIM_Base_Stop_IT+0x40>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a0b      	ldr	r2, [pc, #44]	; (8002d0c <HAL_TIM_Base_Stop_IT+0x58>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_Base_Stop_IT+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	223d      	movs	r2, #61	; 0x3d
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	00001111 	.word	0x00001111
 8002d0c:	00000444 	.word	0x00000444

08002d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d124      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d11d      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4252      	negs	r2, r2
 8002d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 f9ce 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002d58:	e007      	b.n	8002d6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f9c1 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f9cd 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2204      	movs	r2, #4
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d125      	bne.n	8002dca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2204      	movs	r2, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11e      	bne.n	8002dca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2205      	movs	r2, #5
 8002d92:	4252      	negs	r2, r2
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	23c0      	movs	r3, #192	; 0xc0
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f9a1 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002db2:	e007      	b.n	8002dc4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 f994 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 f9a0 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d124      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2208      	movs	r2, #8
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d11d      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2209      	movs	r2, #9
 8002dec:	4252      	negs	r2, r2
 8002dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2204      	movs	r2, #4
 8002df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f975 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002e0a:	e007      	b.n	8002e1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 f968 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f974 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b10      	cmp	r3, #16
 8002e2e:	d125      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2210      	movs	r2, #16
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d11e      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2211      	movs	r2, #17
 8002e44:	4252      	negs	r2, r2
 8002e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	23c0      	movs	r3, #192	; 0xc0
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f948 	bl	80030f4 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e007      	b.n	8002e76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f93b 	bl	80030e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f000 f947 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10f      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d108      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4252      	negs	r2, r2
 8002ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fd fc6b 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b80      	cmp	r3, #128	; 0x80
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b80      	cmp	r3, #128	; 0x80
 8002ec4:	d108      	bne.n	8002ed8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2281      	movs	r2, #129	; 0x81
 8002ecc:	4252      	negs	r2, r2
 8002ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 fa96 	bl	8003404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d10f      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2240      	movs	r2, #64	; 0x40
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d108      	bne.n	8002f06 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2241      	movs	r2, #65	; 0x41
 8002efa:	4252      	negs	r2, r2
 8002efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f000 f907 	bl	8003114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	4013      	ands	r3, r2
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d10f      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	d108      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2221      	movs	r2, #33	; 0x21
 8002f28:	4252      	negs	r2, r2
 8002f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fa60 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f46:	230f      	movs	r3, #15
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223c      	movs	r2, #60	; 0x3c
 8002f52:	5c9b      	ldrb	r3, [r3, r2]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_TIM_ConfigClockSource+0x20>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0bc      	b.n	80030d6 <HAL_TIM_ConfigClockSource+0x19a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	223c      	movs	r2, #60	; 0x3c
 8002f60:	2101      	movs	r1, #1
 8002f62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	223d      	movs	r2, #61	; 0x3d
 8002f68:	2102      	movs	r1, #2
 8002f6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2277      	movs	r2, #119	; 0x77
 8002f78:	4393      	bics	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	0192      	lsls	r2, r2, #6
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d040      	beq.n	800301a <HAL_TIM_ConfigClockSource+0xde>
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	0192      	lsls	r2, r2, #6
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d900      	bls.n	8002fa2 <HAL_TIM_ConfigClockSource+0x66>
 8002fa0:	e088      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0152      	lsls	r2, r2, #5
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d100      	bne.n	8002fac <HAL_TIM_ConfigClockSource+0x70>
 8002faa:	e088      	b.n	80030be <HAL_TIM_ConfigClockSource+0x182>
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0152      	lsls	r2, r2, #5
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d900      	bls.n	8002fb6 <HAL_TIM_ConfigClockSource+0x7a>
 8002fb4:	e07e      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fb6:	2b70      	cmp	r3, #112	; 0x70
 8002fb8:	d018      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xb0>
 8002fba:	d900      	bls.n	8002fbe <HAL_TIM_ConfigClockSource+0x82>
 8002fbc:	e07a      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fbe:	2b60      	cmp	r3, #96	; 0x60
 8002fc0:	d04f      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0x126>
 8002fc2:	d900      	bls.n	8002fc6 <HAL_TIM_ConfigClockSource+0x8a>
 8002fc4:	e076      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fc6:	2b50      	cmp	r3, #80	; 0x50
 8002fc8:	d03b      	beq.n	8003042 <HAL_TIM_ConfigClockSource+0x106>
 8002fca:	d900      	bls.n	8002fce <HAL_TIM_ConfigClockSource+0x92>
 8002fcc:	e072      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d057      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0x146>
 8002fd2:	d900      	bls.n	8002fd6 <HAL_TIM_ConfigClockSource+0x9a>
 8002fd4:	e06e      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d063      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x166>
 8002fda:	d86b      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d060      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x166>
 8002fe0:	d868      	bhi.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d05d      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x166>
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d05b      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x166>
 8002fea:	e063      	b.n	80030b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f000 f982 	bl	8003304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2277      	movs	r2, #119	; 0x77
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
      break;
 8003018:	e052      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6899      	ldr	r1, [r3, #8]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f000 f96b 	bl	8003304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2180      	movs	r1, #128	; 0x80
 800303a:	01c9      	lsls	r1, r1, #7
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
      break;
 8003040:	e03e      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	001a      	movs	r2, r3
 8003050:	f000 f8de 	bl	8003210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2150      	movs	r1, #80	; 0x50
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f938 	bl	80032d0 <TIM_ITRx_SetConfig>
      break;
 8003060:	e02e      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	001a      	movs	r2, r3
 8003070:	f000 f8fc 	bl	800326c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2160      	movs	r1, #96	; 0x60
 800307a:	0018      	movs	r0, r3
 800307c:	f000 f928 	bl	80032d0 <TIM_ITRx_SetConfig>
      break;
 8003080:	e01e      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	001a      	movs	r2, r3
 8003090:	f000 f8be 	bl	8003210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f918 	bl	80032d0 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e00e      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0019      	movs	r1, r3
 80030ac:	0010      	movs	r0, r2
 80030ae:	f000 f90f 	bl	80032d0 <TIM_ITRx_SetConfig>
      break;
 80030b2:	e005      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80030b4:	230f      	movs	r3, #15
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
      break;
 80030bc:	e000      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80030be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	223d      	movs	r2, #61	; 0x3d
 80030c4:	2101      	movs	r1, #1
 80030c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	223c      	movs	r2, #60	; 0x3c
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

  return status;
 80030d0:	230f      	movs	r3, #15
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b004      	add	sp, #16
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	ffff00ff 	.word	0xffff00ff

080030e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <TIM_Base_SetConfig+0xd0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x20>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a2e      	ldr	r2, [pc, #184]	; (80031f8 <TIM_Base_SetConfig+0xd4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2270      	movs	r2, #112	; 0x70
 8003148:	4393      	bics	r3, r2
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a26      	ldr	r2, [pc, #152]	; (80031f4 <TIM_Base_SetConfig+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a25      	ldr	r2, [pc, #148]	; (80031f8 <TIM_Base_SetConfig+0xd4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00f      	beq.n	8003186 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a24      	ldr	r2, [pc, #144]	; (80031fc <TIM_Base_SetConfig+0xd8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00b      	beq.n	8003186 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <TIM_Base_SetConfig+0xdc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <TIM_Base_SetConfig+0x62>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a22      	ldr	r2, [pc, #136]	; (8003204 <TIM_Base_SetConfig+0xe0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_Base_SetConfig+0x62>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <TIM_Base_SetConfig+0xe4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d108      	bne.n	8003198 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <TIM_Base_SetConfig+0xe8>)
 800318a:	4013      	ands	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	4393      	bics	r3, r2
 800319e:	001a      	movs	r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <TIM_Base_SetConfig+0xd0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0xba>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <TIM_Base_SetConfig+0xdc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0xba>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a0c      	ldr	r2, [pc, #48]	; (8003204 <TIM_Base_SetConfig+0xe0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0xba>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <TIM_Base_SetConfig+0xe4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d103      	bne.n	80031e6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	615a      	str	r2, [r3, #20]
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b004      	add	sp, #16
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40002000 	.word	0x40002000
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	fffffcff 	.word	0xfffffcff

08003210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	2201      	movs	r2, #1
 8003228:	4393      	bics	r3, r2
 800322a:	001a      	movs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	22f0      	movs	r2, #240	; 0xf0
 800323a:	4393      	bics	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	220a      	movs	r2, #10
 800324c:	4393      	bics	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	b006      	add	sp, #24
 800326a:	bd80      	pop	{r7, pc}

0800326c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	2210      	movs	r2, #16
 800327e:	4393      	bics	r3, r2
 8003280:	001a      	movs	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <TIM_TI2_ConfigInputStage+0x60>)
 8003296:	4013      	ands	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	22a0      	movs	r2, #160	; 0xa0
 80032a8:	4393      	bics	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b006      	add	sp, #24
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	ffff0fff 	.word	0xffff0fff

080032d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2270      	movs	r2, #112	; 0x70
 80032e4:	4393      	bics	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	2207      	movs	r2, #7
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	609a      	str	r2, [r3, #8]
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <TIM_ETR_SetConfig+0x3c>)
 800331c:	4013      	ands	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	021a      	lsls	r2, r3, #8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	431a      	orrs	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}
 8003340:	ffff00ff 	.word	0xffff00ff

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	223c      	movs	r2, #60	; 0x3c
 8003352:	5c9b      	ldrb	r3, [r3, r2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e041      	b.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	223c      	movs	r2, #60	; 0x3c
 8003360:	2101      	movs	r1, #1
 8003362:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223d      	movs	r2, #61	; 0x3d
 8003368:	2102      	movs	r1, #2
 800336a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2270      	movs	r2, #112	; 0x70
 8003380:	4393      	bics	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	4393      	bics	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223d      	movs	r2, #61	; 0x3d
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223c      	movs	r2, #60	; 0x3c
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e044      	b.n	80034b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2274      	movs	r2, #116	; 0x74
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fd fb5f 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2224      	movs	r2, #36	; 0x24
 8003442:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2101      	movs	r1, #1
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 fbb6 	bl	8003bc8 <UART_SetConfig>
 800345c:	0003      	movs	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e024      	b.n	80034b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fd01 	bl	8003e78 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	490d      	ldr	r1, [pc, #52]	; (80034b8 <HAL_UART_Init+0xa4>)
 8003482:	400a      	ands	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2108      	movs	r1, #8
 8003492:	438a      	bics	r2, r1
 8003494:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fd99 	bl	8003fe0 <UART_CheckIdleState>
 80034ae:	0003      	movs	r3, r0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	fffff7ff 	.word	0xfffff7ff

080034bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d000      	beq.n	80034d6 <HAL_UART_Transmit+0x1a>
 80034d4:	e096      	b.n	8003604 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_UART_Transmit+0x28>
 80034dc:	1dbb      	adds	r3, r7, #6
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e08e      	b.n	8003606 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	015b      	lsls	r3, r3, #5
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d109      	bne.n	8003508 <HAL_UART_Transmit+0x4c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d001      	beq.n	8003508 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e07e      	b.n	8003606 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2274      	movs	r2, #116	; 0x74
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_UART_Transmit+0x5a>
 8003512:	2302      	movs	r3, #2
 8003514:	e077      	b.n	8003606 <HAL_UART_Transmit+0x14a>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2274      	movs	r2, #116	; 0x74
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	2100      	movs	r1, #0
 8003524:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352c:	f7fd fc7c 	bl	8000e28 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1dba      	adds	r2, r7, #6
 8003538:	2150      	movs	r1, #80	; 0x50
 800353a:	8812      	ldrh	r2, [r2, #0]
 800353c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1dba      	adds	r2, r7, #6
 8003542:	2152      	movs	r1, #82	; 0x52
 8003544:	8812      	ldrh	r2, [r2, #0]
 8003546:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	429a      	cmp	r2, r3
 8003552:	d108      	bne.n	8003566 <HAL_UART_Transmit+0xaa>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	e003      	b.n	800356e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2274      	movs	r2, #116	; 0x74
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003576:	e02d      	b.n	80035d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	0013      	movs	r3, r2
 8003582:	2200      	movs	r2, #0
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	f000 fd73 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e039      	b.n	8003606 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	05d2      	lsls	r2, r2, #23
 80035a2:	0dd2      	lsrs	r2, r2, #23
 80035a4:	b292      	uxth	r2, r2
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	3302      	adds	r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e008      	b.n	80035c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b292      	uxth	r2, r2
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	3301      	adds	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2252      	movs	r2, #82	; 0x52
 80035c6:	5a9b      	ldrh	r3, [r3, r2]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b299      	uxth	r1, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2252      	movs	r2, #82	; 0x52
 80035d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2252      	movs	r2, #82	; 0x52
 80035d8:	5a9b      	ldrh	r3, [r3, r2]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1cb      	bne.n	8003578 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	0013      	movs	r3, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	f000 fd3f 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d001      	beq.n	80035fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e005      	b.n	8003606 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b008      	add	sp, #32
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b0ab      	sub	sp, #172	; 0xac
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	22a4      	movs	r2, #164	; 0xa4
 8003620:	18b9      	adds	r1, r7, r2
 8003622:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	20a0      	movs	r0, #160	; 0xa0
 800362c:	1839      	adds	r1, r7, r0
 800362e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	219c      	movs	r1, #156	; 0x9c
 8003638:	1879      	adds	r1, r7, r1
 800363a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800363c:	0011      	movs	r1, r2
 800363e:	18bb      	adds	r3, r7, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a99      	ldr	r2, [pc, #612]	; (80038a8 <HAL_UART_IRQHandler+0x298>)
 8003644:	4013      	ands	r3, r2
 8003646:	2298      	movs	r2, #152	; 0x98
 8003648:	18bc      	adds	r4, r7, r2
 800364a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800364c:	18bb      	adds	r3, r7, r2
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d114      	bne.n	800367e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003654:	187b      	adds	r3, r7, r1
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	4013      	ands	r3, r2
 800365c:	d00f      	beq.n	800367e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800365e:	183b      	adds	r3, r7, r0
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	4013      	ands	r3, r2
 8003666:	d00a      	beq.n	800367e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366c:	2b00      	cmp	r3, #0
 800366e:	d100      	bne.n	8003672 <HAL_UART_IRQHandler+0x62>
 8003670:	e27e      	b.n	8003b70 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	0010      	movs	r0, r2
 800367a:	4798      	blx	r3
      }
      return;
 800367c:	e278      	b.n	8003b70 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800367e:	2398      	movs	r3, #152	; 0x98
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d100      	bne.n	800368a <HAL_UART_IRQHandler+0x7a>
 8003688:	e114      	b.n	80038b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800368a:	239c      	movs	r3, #156	; 0x9c
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	4013      	ands	r3, r2
 8003694:	d106      	bne.n	80036a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a83      	ldr	r2, [pc, #524]	; (80038ac <HAL_UART_IRQHandler+0x29c>)
 800369e:	4013      	ands	r3, r2
 80036a0:	d100      	bne.n	80036a4 <HAL_UART_IRQHandler+0x94>
 80036a2:	e107      	b.n	80038b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036a4:	23a4      	movs	r3, #164	; 0xa4
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	d012      	beq.n	80036d6 <HAL_UART_IRQHandler+0xc6>
 80036b0:	23a0      	movs	r3, #160	; 0xa0
 80036b2:	18fb      	adds	r3, r7, r3
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4013      	ands	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	589b      	ldr	r3, [r3, r2]
 80036cc:	2201      	movs	r2, #1
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036d6:	23a4      	movs	r3, #164	; 0xa4
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d011      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
 80036e2:	239c      	movs	r3, #156	; 0x9c
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2201      	movs	r2, #1
 80036ea:	4013      	ands	r3, r2
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2202      	movs	r2, #2
 80036f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	589b      	ldr	r3, [r3, r2]
 80036fc:	2204      	movs	r2, #4
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003706:	23a4      	movs	r3, #164	; 0xa4
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	d011      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
 8003712:	239c      	movs	r3, #156	; 0x9c
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	4013      	ands	r3, r2
 800371c:	d00b      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2204      	movs	r2, #4
 8003724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	589b      	ldr	r3, [r3, r2]
 800372c:	2202      	movs	r2, #2
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003736:	23a4      	movs	r3, #164	; 0xa4
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	4013      	ands	r3, r2
 8003740:	d017      	beq.n	8003772 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003742:	23a0      	movs	r3, #160	; 0xa0
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2220      	movs	r2, #32
 800374a:	4013      	ands	r3, r2
 800374c:	d105      	bne.n	800375a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800374e:	239c      	movs	r3, #156	; 0x9c
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2201      	movs	r2, #1
 8003756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003758:	d00b      	beq.n	8003772 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2208      	movs	r2, #8
 8003760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	589b      	ldr	r3, [r3, r2]
 8003768:	2208      	movs	r2, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003772:	23a4      	movs	r3, #164	; 0xa4
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	4013      	ands	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_UART_IRQHandler+0x198>
 8003780:	23a0      	movs	r3, #160	; 0xa0
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	04db      	lsls	r3, r3, #19
 800378a:	4013      	ands	r3, r2
 800378c:	d00c      	beq.n	80037a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0112      	lsls	r2, r2, #4
 8003796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	589b      	ldr	r3, [r3, r2]
 800379e:	2220      	movs	r2, #32
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2180      	movs	r1, #128	; 0x80
 80037a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	589b      	ldr	r3, [r3, r2]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d100      	bne.n	80037b4 <HAL_UART_IRQHandler+0x1a4>
 80037b2:	e1df      	b.n	8003b74 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80037b4:	23a4      	movs	r3, #164	; 0xa4
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2220      	movs	r2, #32
 80037bc:	4013      	ands	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037c0:	23a0      	movs	r3, #160	; 0xa0
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	4013      	ands	r3, r2
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d004      	beq.n	80037de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	0010      	movs	r0, r2
 80037dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2280      	movs	r2, #128	; 0x80
 80037e2:	589b      	ldr	r3, [r3, r2]
 80037e4:	2194      	movs	r1, #148	; 0x94
 80037e6:	187a      	adds	r2, r7, r1
 80037e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2240      	movs	r2, #64	; 0x40
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d004      	beq.n	8003802 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2228      	movs	r2, #40	; 0x28
 80037fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003800:	d047      	beq.n	8003892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fcf7 	bl	80041f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2240      	movs	r2, #64	; 0x40
 8003812:	4013      	ands	r3, r2
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	d137      	bne.n	8003888 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800381e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003820:	2090      	movs	r0, #144	; 0x90
 8003822:	183a      	adds	r2, r7, r0
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	2301      	movs	r3, #1
 8003828:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2140      	movs	r1, #64	; 0x40
 800383e:	438a      	bics	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	183b      	adds	r3, r7, r0
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800384a:	f383 8810 	msr	PRIMASK, r3
}
 800384e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	4a14      	ldr	r2, [pc, #80]	; (80038b0 <HAL_UART_IRQHandler+0x2a0>)
 800385e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	0018      	movs	r0, r3
 8003866:	f7fe f8cb 	bl	8001a00 <HAL_DMA_Abort_IT>
 800386a:	1e03      	subs	r3, r0, #0
 800386c:	d01a      	beq.n	80038a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	0018      	movs	r0, r3
 800387a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	e012      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f98d 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	e00d      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f988 	bl	8003ba0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003890:	e008      	b.n	80038a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 f983 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	2100      	movs	r1, #0
 80038a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80038a2:	e167      	b.n	8003b74 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	46c0      	nop			; (mov r8, r8)
    return;
 80038a6:	e165      	b.n	8003b74 <HAL_UART_IRQHandler+0x564>
 80038a8:	0000080f 	.word	0x0000080f
 80038ac:	04000120 	.word	0x04000120
 80038b0:	080042bd 	.word	0x080042bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d000      	beq.n	80038be <HAL_UART_IRQHandler+0x2ae>
 80038bc:	e131      	b.n	8003b22 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80038be:	23a4      	movs	r3, #164	; 0xa4
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_UART_IRQHandler+0x2bc>
 80038ca:	e12a      	b.n	8003b22 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80038cc:	23a0      	movs	r3, #160	; 0xa0
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2210      	movs	r2, #16
 80038d4:	4013      	ands	r3, r2
 80038d6:	d100      	bne.n	80038da <HAL_UART_IRQHandler+0x2ca>
 80038d8:	e123      	b.n	8003b22 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2240      	movs	r2, #64	; 0x40
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d000      	beq.n	80038f2 <HAL_UART_IRQHandler+0x2e2>
 80038f0:	e09b      	b.n	8003a2a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	217e      	movs	r1, #126	; 0x7e
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003900:	187b      	adds	r3, r7, r1
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <HAL_UART_IRQHandler+0x2fa>
 8003908:	e136      	b.n	8003b78 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2258      	movs	r2, #88	; 0x58
 800390e:	5a9b      	ldrh	r3, [r3, r2]
 8003910:	187a      	adds	r2, r7, r1
 8003912:	8812      	ldrh	r2, [r2, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d300      	bcc.n	800391a <HAL_UART_IRQHandler+0x30a>
 8003918:	e12e      	b.n	8003b78 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	187a      	adds	r2, r7, r1
 800391e:	215a      	movs	r1, #90	; 0x5a
 8003920:	8812      	ldrh	r2, [r2, #0]
 8003922:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b20      	cmp	r3, #32
 800392c:	d06e      	beq.n	8003a0c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003936:	67bb      	str	r3, [r7, #120]	; 0x78
 8003938:	2301      	movs	r3, #1
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	498e      	ldr	r1, [pc, #568]	; (8003b88 <HAL_UART_IRQHandler+0x578>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003960:	f3ef 8310 	mrs	r3, PRIMASK
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	677b      	str	r3, [r7, #116]	; 0x74
 800396a:	2301      	movs	r3, #1
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	438a      	bics	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003992:	f3ef 8310 	mrs	r3, PRIMASK
 8003996:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003998:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	673b      	str	r3, [r7, #112]	; 0x70
 800399c:	2301      	movs	r3, #1
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a2:	f383 8810 	msr	PRIMASK, r3
}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2140      	movs	r1, #64	; 0x40
 80039b4:	438a      	bics	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ba:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d0:	f3ef 8310 	mrs	r3, PRIMASK
 80039d4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039da:	2301      	movs	r3, #1
 80039dc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e0:	f383 8810 	msr	PRIMASK, r3
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2110      	movs	r1, #16
 80039f2:	438a      	bics	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039fc:	f383 8810 	msr	PRIMASK, r3
}
 8003a00:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd ffc2 	bl	8001990 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2258      	movs	r2, #88	; 0x58
 8003a10:	5a9a      	ldrh	r2, [r3, r2]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	215a      	movs	r1, #90	; 0x5a
 8003a16:	5a5b      	ldrh	r3, [r3, r1]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0011      	movs	r1, r2
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 f8c4 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a28:	e0a6      	b.n	8003b78 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2258      	movs	r2, #88	; 0x58
 8003a2e:	5a99      	ldrh	r1, [r3, r2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	225a      	movs	r2, #90	; 0x5a
 8003a34:	5a9b      	ldrh	r3, [r3, r2]
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	208e      	movs	r0, #142	; 0x8e
 8003a3a:	183b      	adds	r3, r7, r0
 8003a3c:	1a8a      	subs	r2, r1, r2
 8003a3e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	225a      	movs	r2, #90	; 0x5a
 8003a44:	5a9b      	ldrh	r3, [r3, r2]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d100      	bne.n	8003a4e <HAL_UART_IRQHandler+0x43e>
 8003a4c:	e096      	b.n	8003b7c <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d100      	bne.n	8003a58 <HAL_UART_IRQHandler+0x448>
 8003a56:	e091      	b.n	8003b7c <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a58:	f3ef 8310 	mrs	r3, PRIMASK
 8003a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a60:	2488      	movs	r4, #136	; 0x88
 8003a62:	193a      	adds	r2, r7, r4
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	2301      	movs	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4943      	ldr	r1, [pc, #268]	; (8003b8c <HAL_UART_IRQHandler+0x57c>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a96:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	2484      	movs	r4, #132	; 0x84
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ada:	f3ef 8310 	mrs	r3, PRIMASK
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae2:	2480      	movs	r4, #128	; 0x80
 8003ae4:	193a      	adds	r2, r7, r4
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	2301      	movs	r3, #1
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2110      	movs	r1, #16
 8003b00:	438a      	bics	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	193b      	adds	r3, r7, r4
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b12:	183b      	adds	r3, r7, r0
 8003b14:	881a      	ldrh	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f848 	bl	8003bb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b20:	e02c      	b.n	8003b7c <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b22:	23a4      	movs	r3, #164	; 0xa4
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d00f      	beq.n	8003b4e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b2e:	23a0      	movs	r3, #160	; 0xa0
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	4013      	ands	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01e      	beq.n	8003b80 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	0010      	movs	r0, r2
 8003b4a:	4798      	blx	r3
    }
    return;
 8003b4c:	e018      	b.n	8003b80 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b4e:	23a4      	movs	r3, #164	; 0xa4
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2240      	movs	r2, #64	; 0x40
 8003b56:	4013      	ands	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_UART_IRQHandler+0x572>
 8003b5a:	23a0      	movs	r3, #160	; 0xa0
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2240      	movs	r2, #64	; 0x40
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00d      	beq.n	8003b82 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 fbbe 	bl	80042ea <UART_EndTransmit_IT>
    return;
 8003b6e:	e008      	b.n	8003b82 <HAL_UART_IRQHandler+0x572>
      return;
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	e006      	b.n	8003b82 <HAL_UART_IRQHandler+0x572>
    return;
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	e004      	b.n	8003b82 <HAL_UART_IRQHandler+0x572>
      return;
 8003b78:	46c0      	nop			; (mov r8, r8)
 8003b7a:	e002      	b.n	8003b82 <HAL_UART_IRQHandler+0x572>
      return;
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	e000      	b.n	8003b82 <HAL_UART_IRQHandler+0x572>
    return;
 8003b80:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b02b      	add	sp, #172	; 0xac
 8003b86:	bd90      	pop	{r4, r7, pc}
 8003b88:	fffffeff 	.word	0xfffffeff
 8003b8c:	fffffedf 	.word	0xfffffedf

08003b90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ba8:	46c0      	nop			; (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	000a      	movs	r2, r1
 8003bba:	1cbb      	adds	r3, r7, #2
 8003bbc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bd0:	231e      	movs	r3, #30
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a97      	ldr	r2, [pc, #604]	; (8003e54 <UART_SetConfig+0x28c>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a92      	ldr	r2, [pc, #584]	; (8003e58 <UART_SetConfig+0x290>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a89      	ldr	r2, [pc, #548]	; (8003e5c <UART_SetConfig+0x294>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0019      	movs	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a85      	ldr	r2, [pc, #532]	; (8003e60 <UART_SetConfig+0x298>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d127      	bne.n	8003c9e <UART_SetConfig+0xd6>
 8003c4e:	4b85      	ldr	r3, [pc, #532]	; (8003e64 <UART_SetConfig+0x29c>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2203      	movs	r2, #3
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d00d      	beq.n	8003c76 <UART_SetConfig+0xae>
 8003c5a:	d81b      	bhi.n	8003c94 <UART_SetConfig+0xcc>
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d014      	beq.n	8003c8a <UART_SetConfig+0xc2>
 8003c60:	d818      	bhi.n	8003c94 <UART_SetConfig+0xcc>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <UART_SetConfig+0xa4>
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d00a      	beq.n	8003c80 <UART_SetConfig+0xb8>
 8003c6a:	e013      	b.n	8003c94 <UART_SetConfig+0xcc>
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e035      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003c76:	231f      	movs	r3, #31
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e030      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003c80:	231f      	movs	r3, #31
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2204      	movs	r2, #4
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e02b      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003c8a:	231f      	movs	r3, #31
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2208      	movs	r2, #8
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e026      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003c94:	231f      	movs	r3, #31
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2210      	movs	r2, #16
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e021      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a71      	ldr	r2, [pc, #452]	; (8003e68 <UART_SetConfig+0x2a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d104      	bne.n	8003cb2 <UART_SetConfig+0xea>
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e017      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <UART_SetConfig+0x2a4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d104      	bne.n	8003cc6 <UART_SetConfig+0xfe>
 8003cbc:	231f      	movs	r3, #31
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e00d      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a69      	ldr	r2, [pc, #420]	; (8003e70 <UART_SetConfig+0x2a8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d104      	bne.n	8003cda <UART_SetConfig+0x112>
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e003      	b.n	8003ce2 <UART_SetConfig+0x11a>
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	2210      	movs	r2, #16
 8003ce0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d15d      	bne.n	8003daa <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8003cee:	231f      	movs	r3, #31
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d015      	beq.n	8003d24 <UART_SetConfig+0x15c>
 8003cf8:	dc18      	bgt.n	8003d2c <UART_SetConfig+0x164>
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00d      	beq.n	8003d1a <UART_SetConfig+0x152>
 8003cfe:	dc15      	bgt.n	8003d2c <UART_SetConfig+0x164>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <UART_SetConfig+0x142>
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d005      	beq.n	8003d14 <UART_SetConfig+0x14c>
 8003d08:	e010      	b.n	8003d2c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0a:	f7fe fe43 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	61bb      	str	r3, [r7, #24]
        break;
 8003d12:	e012      	b.n	8003d3a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b57      	ldr	r3, [pc, #348]	; (8003e74 <UART_SetConfig+0x2ac>)
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e00f      	b.n	8003d3a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fdcb 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	61bb      	str	r3, [r7, #24]
        break;
 8003d22:	e00a      	b.n	8003d3a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	61bb      	str	r3, [r7, #24]
        break;
 8003d2a:	e006      	b.n	8003d3a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d30:	231e      	movs	r3, #30
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
        break;
 8003d38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <UART_SetConfig+0x17a>
 8003d40:	e07b      	b.n	8003e3a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	005a      	lsls	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	18d2      	adds	r2, r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	0019      	movs	r1, r3
 8003d54:	0010      	movs	r0, r2
 8003d56:	f7fc f9d7 	bl	8000108 <__udivsi3>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0f      	cmp	r3, #15
 8003d64:	d91c      	bls.n	8003da0 <UART_SetConfig+0x1d8>
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d217      	bcs.n	8003da0 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	200e      	movs	r0, #14
 8003d76:	183b      	adds	r3, r7, r0
 8003d78:	210f      	movs	r1, #15
 8003d7a:	438a      	bics	r2, r1
 8003d7c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	085b      	lsrs	r3, r3, #1
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2207      	movs	r2, #7
 8003d86:	4013      	ands	r3, r2
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	183b      	adds	r3, r7, r0
 8003d8c:	183a      	adds	r2, r7, r0
 8003d8e:	8812      	ldrh	r2, [r2, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	183a      	adds	r2, r7, r0
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	e04c      	b.n	8003e3a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8003da0:	231e      	movs	r3, #30
 8003da2:	18fb      	adds	r3, r7, r3
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	e047      	b.n	8003e3a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003daa:	231f      	movs	r3, #31
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d015      	beq.n	8003de0 <UART_SetConfig+0x218>
 8003db4:	dc18      	bgt.n	8003de8 <UART_SetConfig+0x220>
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d00d      	beq.n	8003dd6 <UART_SetConfig+0x20e>
 8003dba:	dc15      	bgt.n	8003de8 <UART_SetConfig+0x220>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <UART_SetConfig+0x1fe>
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d005      	beq.n	8003dd0 <UART_SetConfig+0x208>
 8003dc4:	e010      	b.n	8003de8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7fe fde5 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	61bb      	str	r3, [r7, #24]
        break;
 8003dce:	e012      	b.n	8003df6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b28      	ldr	r3, [pc, #160]	; (8003e74 <UART_SetConfig+0x2ac>)
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e00f      	b.n	8003df6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fe fd6d 	bl	80028b4 <HAL_RCC_GetSysClockFreq>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	61bb      	str	r3, [r7, #24]
        break;
 8003dde:	e00a      	b.n	8003df6 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	021b      	lsls	r3, r3, #8
 8003de4:	61bb      	str	r3, [r7, #24]
        break;
 8003de6:	e006      	b.n	8003df6 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dec:	231e      	movs	r3, #30
 8003dee:	18fb      	adds	r3, r7, r3
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
        break;
 8003df4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01e      	beq.n	8003e3a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	085a      	lsrs	r2, r3, #1
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	18d2      	adds	r2, r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f7fc f97b 	bl	8000108 <__udivsi3>
 8003e12:	0003      	movs	r3, r0
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	d909      	bls.n	8003e32 <UART_SetConfig+0x26a>
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d204      	bcs.n	8003e32 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	60da      	str	r2, [r3, #12]
 8003e30:	e003      	b.n	8003e3a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8003e32:	231e      	movs	r3, #30
 8003e34:	18fb      	adds	r3, r7, r3
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e46:	231e      	movs	r3, #30
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b008      	add	sp, #32
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	efff69f3 	.word	0xefff69f3
 8003e58:	ffffcfff 	.word	0xffffcfff
 8003e5c:	fffff4ff 	.word	0xfffff4ff
 8003e60:	40013800 	.word	0x40013800
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40004400 	.word	0x40004400
 8003e6c:	40004800 	.word	0x40004800
 8003e70:	40004c00 	.word	0x40004c00
 8003e74:	007a1200 	.word	0x007a1200

08003e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	4a4a      	ldr	r2, [pc, #296]	; (8003fbc <UART_AdvFeatureConfig+0x144>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d00b      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a43      	ldr	r2, [pc, #268]	; (8003fc0 <UART_AdvFeatureConfig+0x148>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2204      	movs	r2, #4
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a3b      	ldr	r2, [pc, #236]	; (8003fc4 <UART_AdvFeatureConfig+0x14c>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	0019      	movs	r1, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2208      	movs	r2, #8
 8003eec:	4013      	ands	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	4a34      	ldr	r2, [pc, #208]	; (8003fc8 <UART_AdvFeatureConfig+0x150>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	0019      	movs	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	4013      	ands	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a2c      	ldr	r2, [pc, #176]	; (8003fcc <UART_AdvFeatureConfig+0x154>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2220      	movs	r2, #32
 8003f30:	4013      	ands	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <UART_AdvFeatureConfig+0x158>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2240      	movs	r2, #64	; 0x40
 8003f52:	4013      	ands	r3, r2
 8003f54:	d01d      	beq.n	8003f92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <UART_AdvFeatureConfig+0x15c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0019      	movs	r1, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	035b      	lsls	r3, r3, #13
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d10b      	bne.n	8003f92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <UART_AdvFeatureConfig+0x160>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a0e      	ldr	r2, [pc, #56]	; (8003fdc <UART_AdvFeatureConfig+0x164>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	fffdffff 	.word	0xfffdffff
 8003fc0:	fffeffff 	.word	0xfffeffff
 8003fc4:	fffbffff 	.word	0xfffbffff
 8003fc8:	ffff7fff 	.word	0xffff7fff
 8003fcc:	ffffefff 	.word	0xffffefff
 8003fd0:	ffffdfff 	.word	0xffffdfff
 8003fd4:	ffefffff 	.word	0xffefffff
 8003fd8:	ff9fffff 	.word	0xff9fffff
 8003fdc:	fff7ffff 	.word	0xfff7ffff

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	2100      	movs	r1, #0
 8003fee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fc ff1a 	bl	8000e28 <HAL_GetTick>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2208      	movs	r2, #8
 8004000:	4013      	ands	r3, r2
 8004002:	2b08      	cmp	r3, #8
 8004004:	d10c      	bne.n	8004020 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	0391      	lsls	r1, r2, #14
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	; (800406c <UART_CheckIdleState+0x8c>)
 8004010:	9200      	str	r2, [sp, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	f000 f82c 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e021      	b.n	8004064 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
 800402a:	2b04      	cmp	r3, #4
 800402c:	d10c      	bne.n	8004048 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	03d1      	lsls	r1, r2, #15
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4a0d      	ldr	r2, [pc, #52]	; (800406c <UART_CheckIdleState+0x8c>)
 8004038:	9200      	str	r2, [sp, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	f000 f818 	bl	8004070 <UART_WaitOnFlagUntilTimeout>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e00d      	b.n	8004064 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2274      	movs	r2, #116	; 0x74
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	01ffffff 	.word	0x01ffffff

08004070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b094      	sub	sp, #80	; 0x50
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	1dfb      	adds	r3, r7, #7
 800407e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004080:	e0a3      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004084:	3301      	adds	r3, #1
 8004086:	d100      	bne.n	800408a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004088:	e09f      	b.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fc fecd 	bl	8000e28 <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800409a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800409c:	2b00      	cmp	r3, #0
 800409e:	d13d      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a0:	f3ef 8310 	mrs	r3, PRIMASK
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a8:	647b      	str	r3, [r7, #68]	; 0x44
 80040aa:	2301      	movs	r3, #1
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	f383 8810 	msr	PRIMASK, r3
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	494c      	ldr	r1, [pc, #304]	; (80041f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80040c2:	400a      	ands	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	f383 8810 	msr	PRIMASK, r3
}
 80040d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d2:	f3ef 8310 	mrs	r3, PRIMASK
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
 80040dc:	2301      	movs	r3, #1
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2274      	movs	r2, #116	; 0x74
 8004114:	2100      	movs	r1, #0
 8004116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e067      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2204      	movs	r2, #4
 8004124:	4013      	ands	r3, r2
 8004126:	d050      	beq.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69da      	ldr	r2, [r3, #28]
 800412e:	2380      	movs	r3, #128	; 0x80
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	401a      	ands	r2, r3
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	429a      	cmp	r2, r3
 800413a:	d146      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	613b      	str	r3, [r7, #16]
  return(result);
 800414c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4923      	ldr	r1, [pc, #140]	; (80041f4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	61fb      	str	r3, [r7, #28]
  return(result);
 800417e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	64bb      	str	r3, [r7, #72]	; 0x48
 8004182:	2301      	movs	r3, #1
 8004184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2101      	movs	r1, #1
 800419a:	438a      	bics	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	2120      	movs	r1, #32
 80041bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2274      	movs	r2, #116	; 0x74
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e010      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4013      	ands	r3, r2
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	425a      	negs	r2, r3
 80041da:	4153      	adcs	r3, r2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	001a      	movs	r2, r3
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d100      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x17a>
 80041e8:	e74b      	b.n	8004082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b014      	add	sp, #80	; 0x50
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	fffffe5f 	.word	0xfffffe5f

080041f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	; 0x38
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004200:	f3ef 8310 	mrs	r3, PRIMASK
 8004204:	617b      	str	r3, [r7, #20]
  return(result);
 8004206:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	2301      	movs	r3, #1
 800420c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4925      	ldr	r1, [pc, #148]	; (80042b8 <UART_EndRxTransfer+0xc0>)
 8004222:	400a      	ands	r2, r1
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004228:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f383 8810 	msr	PRIMASK, r3
}
 8004230:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004232:	f3ef 8310 	mrs	r3, PRIMASK
 8004236:	623b      	str	r3, [r7, #32]
  return(result);
 8004238:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
 800423c:	2301      	movs	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	f383 8810 	msr	PRIMASK, r3
}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2101      	movs	r1, #1
 8004254:	438a      	bics	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	f383 8810 	msr	PRIMASK, r3
}
 8004262:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004268:	2b01      	cmp	r3, #1
 800426a:	d118      	bne.n	800429e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426c:	f3ef 8310 	mrs	r3, PRIMASK
 8004270:	60bb      	str	r3, [r7, #8]
  return(result);
 8004272:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004276:	2301      	movs	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2110      	movs	r1, #16
 800428e:	438a      	bics	r2, r1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f383 8810 	msr	PRIMASK, r3
}
 800429c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042b0:	46c0      	nop			; (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b00e      	add	sp, #56	; 0x38
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	fffffedf 	.word	0xfffffedf

080042bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	225a      	movs	r2, #90	; 0x5a
 80042ce:	2100      	movs	r1, #0
 80042d0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2252      	movs	r2, #82	; 0x52
 80042d6:	2100      	movs	r1, #0
 80042d8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff fc5f 	bl	8003ba0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	46bd      	mov	sp, r7
 80042e6:	b004      	add	sp, #16
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	2301      	movs	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2140      	movs	r1, #64	; 0x40
 8004314:	438a      	bics	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fc2c 	bl	8003b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	b006      	add	sp, #24
 800433e:	bd80      	pop	{r7, pc}

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	2600      	movs	r6, #0
 8004344:	4d0c      	ldr	r5, [pc, #48]	; (8004378 <__libc_init_array+0x38>)
 8004346:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004348:	1b64      	subs	r4, r4, r5
 800434a:	10a4      	asrs	r4, r4, #2
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	2600      	movs	r6, #0
 8004352:	f000 f82b 	bl	80043ac <_init>
 8004356:	4d0a      	ldr	r5, [pc, #40]	; (8004380 <__libc_init_array+0x40>)
 8004358:	4c0a      	ldr	r4, [pc, #40]	; (8004384 <__libc_init_array+0x44>)
 800435a:	1b64      	subs	r4, r4, r5
 800435c:	10a4      	asrs	r4, r4, #2
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	00b3      	lsls	r3, r6, #2
 8004366:	58eb      	ldr	r3, [r5, r3]
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	00b3      	lsls	r3, r6, #2
 8004370:	58eb      	ldr	r3, [r5, r3]
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	080043fc 	.word	0x080043fc
 800437c:	080043fc 	.word	0x080043fc
 8004380:	080043fc 	.word	0x080043fc
 8004384:	08004400 	.word	0x08004400

08004388 <memcpy>:
 8004388:	2300      	movs	r3, #0
 800438a:	b510      	push	{r4, lr}
 800438c:	429a      	cmp	r2, r3
 800438e:	d100      	bne.n	8004392 <memcpy+0xa>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	5ccc      	ldrb	r4, [r1, r3]
 8004394:	54c4      	strb	r4, [r0, r3]
 8004396:	3301      	adds	r3, #1
 8004398:	e7f8      	b.n	800438c <memcpy+0x4>

0800439a <memset>:
 800439a:	0003      	movs	r3, r0
 800439c:	1882      	adds	r2, r0, r2
 800439e:	4293      	cmp	r3, r2
 80043a0:	d100      	bne.n	80043a4 <memset+0xa>
 80043a2:	4770      	bx	lr
 80043a4:	7019      	strb	r1, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	e7f9      	b.n	800439e <memset+0x4>
	...

080043ac <_init>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr

080043b8 <_fini>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr
