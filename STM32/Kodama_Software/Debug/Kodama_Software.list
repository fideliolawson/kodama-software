
Kodama_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e0  080062e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080062e0  080062e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062e0  080062e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080062e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000010  080062f8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080062f8  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d70  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002986  00000000  00000000  00033da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00037898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000117ca  00000000  00000000  000388e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015af5  00000000  00000000  0004a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069d16  00000000  00000000  0005fba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c98bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f28  00000000  00000000  000c9910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800620c 	.word	0x0800620c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800620c 	.word	0x0800620c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f001 fa9a 	bl	8001930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f81c 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  MX_USART2_UART_Init();
 8000400:	f000 f9de 	bl	80007c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000404:	f000 f9aa 	bl	800075c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000408:	f000 f882 	bl	8000510 <MX_ADC_Init>
  MX_TIM3_Init();
 800040c:	f000 f950 	bl	80006b0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000410:	f000 f90e 	bl	8000630 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000414:	23fa      	movs	r3, #250	; 0xfa
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	0018      	movs	r0, r3
 800041a:	f001 faed 	bl	80019f8 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc);
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <main+0x3c>)
 8000420:	0018      	movs	r0, r3
 8000422:	f002 f941 	bl	80026a8 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000426:	4b03      	ldr	r3, [pc, #12]	; (8000434 <main+0x40>)
 8000428:	0018      	movs	r0, r3
 800042a:	f004 fb27 	bl	8004a7c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800042e:	e7fe      	b.n	800042e <main+0x3a>
 8000430:	200001f0 	.word	0x200001f0
 8000434:	200000a0 	.word	0x200000a0

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b097      	sub	sp, #92	; 0x5c
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	2428      	movs	r4, #40	; 0x28
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2330      	movs	r3, #48	; 0x30
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f005 fed6 	bl	80061fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044e:	2318      	movs	r3, #24
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0018      	movs	r0, r3
 8000454:	2310      	movs	r3, #16
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f005 fece 	bl	80061fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f005 fec7 	bl	80061fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046c:	0021      	movs	r1, r4
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2212      	movs	r2, #18
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2201      	movs	r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2201      	movs	r2, #1
 800047e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2210      	movs	r2, #16
 8000484:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2210      	movs	r2, #16
 800048a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2202      	movs	r2, #2
 8000490:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2280      	movs	r2, #128	; 0x80
 8000496:	0212      	lsls	r2, r2, #8
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2280      	movs	r2, #128	; 0x80
 800049e:	0352      	lsls	r2, r2, #13
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2200      	movs	r2, #0
 80004a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 fd46 	bl	8003f3c <HAL_RCC_OscConfig>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80004b4:	f000 ff32 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	2118      	movs	r1, #24
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2202      	movs	r2, #2
 80004c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f004 f84e 	bl	8004578 <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80004e0:	f000 ff1c 	bl	800131c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2221      	movs	r2, #33	; 0x21
 80004e8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004f0:	1d3b      	adds	r3, r7, #4
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	0018      	movs	r0, r3
 80004fa:	f004 f991 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000502:	f000 ff0b 	bl	800131c <Error_Handler>
  }
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b017      	add	sp, #92	; 0x5c
 800050c:	bd90      	pop	{r4, r7, pc}
	...

08000510 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	0018      	movs	r0, r3
 800051a:	230c      	movs	r3, #12
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f005 fe6b 	bl	80061fa <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <MX_ADC_Init+0x118>)
 8000526:	4a41      	ldr	r2, [pc, #260]	; (800062c <MX_ADC_Init+0x11c>)
 8000528:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800052a:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <MX_ADC_Init+0x118>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000530:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <MX_ADC_Init+0x118>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <MX_ADC_Init+0x118>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800053c:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_ADC_Init+0x118>)
 800053e:	2201      	movs	r2, #1
 8000540:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000542:	4b39      	ldr	r3, [pc, #228]	; (8000628 <MX_ADC_Init+0x118>)
 8000544:	2208      	movs	r2, #8
 8000546:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000548:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_ADC_Init+0x118>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800054e:	4b36      	ldr	r3, [pc, #216]	; (8000628 <MX_ADC_Init+0x118>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000554:	4b34      	ldr	r3, [pc, #208]	; (8000628 <MX_ADC_Init+0x118>)
 8000556:	2201      	movs	r2, #1
 8000558:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <MX_ADC_Init+0x118>)
 800055c:	2200      	movs	r2, #0
 800055e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <MX_ADC_Init+0x118>)
 8000562:	22c2      	movs	r2, #194	; 0xc2
 8000564:	32ff      	adds	r2, #255	; 0xff
 8000566:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <MX_ADC_Init+0x118>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <MX_ADC_Init+0x118>)
 8000570:	2224      	movs	r2, #36	; 0x24
 8000572:	2100      	movs	r1, #0
 8000574:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000576:	4b2c      	ldr	r3, [pc, #176]	; (8000628 <MX_ADC_Init+0x118>)
 8000578:	2201      	movs	r2, #1
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800057c:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <MX_ADC_Init+0x118>)
 800057e:	0018      	movs	r0, r3
 8000580:	f001 fa5e 	bl	8001a40 <HAL_ADC_Init>
 8000584:	1e03      	subs	r3, r0, #0
 8000586:	d001      	beq.n	800058c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000588:	f000 fec8 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	0152      	lsls	r2, r2, #5
 8000598:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0552      	lsls	r2, r2, #21
 80005a0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005a2:	1d3a      	adds	r2, r7, #4
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <MX_ADC_Init+0x118>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fe45 	bl	8002238 <HAL_ADC_ConfigChannel>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80005b2:	f000 feb3 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	220a      	movs	r2, #10
 80005ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005bc:	1d3a      	adds	r2, r7, #4
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_ADC_Init+0x118>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fe38 	bl	8002238 <HAL_ADC_ConfigChannel>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80005cc:	f000 fea6 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	220b      	movs	r2, #11
 80005d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_ADC_Init+0x118>)
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fe2b 	bl	8002238 <HAL_ADC_ConfigChannel>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC_Init+0xda>
  {
    Error_Handler();
 80005e6:	f000 fe99 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	220c      	movs	r2, #12
 80005ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f0:	1d3a      	adds	r2, r7, #4
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_ADC_Init+0x118>)
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fe1e 	bl	8002238 <HAL_ADC_ConfigChannel>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000600:	f000 fe8c 	bl	800131c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	220d      	movs	r2, #13
 8000608:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800060a:	1d3a      	adds	r2, r7, #4
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_ADC_Init+0x118>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fe11 	bl	8002238 <HAL_ADC_ConfigChannel>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800061a:	f000 fe7f 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	200001f0 	.word	0x200001f0
 800062c:	40012400 	.word	0x40012400

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000636:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <MX_I2C1_Init+0x78>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_I2C1_Init+0x74>)
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_I2C1_Init+0x7c>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000648:	2201      	movs	r2, #1
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x74>)
 800066c:	0018      	movs	r0, r3
 800066e:	f002 fd37 	bl	80030e0 <HAL_I2C_Init>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000676:	f000 fe51 	bl	800131c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x74>)
 800067c:	2100      	movs	r1, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f003 fbc4 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000688:	f000 fe48 	bl	800131c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_I2C1_Init+0x74>)
 800068e:	2100      	movs	r1, #0
 8000690:	0018      	movs	r0, r3
 8000692:	f003 fc07 	bl	8003ea4 <HAL_I2CEx_ConfigDigitalFilter>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800069a:	f000 fe3f 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000054 	.word	0x20000054
 80006a8:	40005400 	.word	0x40005400
 80006ac:	0000020b 	.word	0x0000020b

080006b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	2308      	movs	r3, #8
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	0018      	movs	r0, r3
 80006bc:	2310      	movs	r3, #16
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f005 fd9a 	bl	80061fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	003b      	movs	r3, r7
 80006c8:	0018      	movs	r0, r3
 80006ca:	2308      	movs	r3, #8
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f005 fd93 	bl	80061fa <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006d6:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <MX_TIM3_Init+0xa4>)
 80006d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 74;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006dc:	224a      	movs	r2, #74	; 0x4a
 80006de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_TIM3_Init+0xa8>)
 80006ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_TIM3_Init+0xa0>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f004 f96e 	bl	80049dc <HAL_TIM_Base_Init>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000704:	f000 fe0a 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000708:	2108      	movs	r1, #8
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	0152      	lsls	r2, r2, #5
 8000710:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000712:	187a      	adds	r2, r7, r1
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_TIM3_Init+0xa0>)
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f004 fb3f 	bl	8004d9c <HAL_TIM_ConfigClockSource>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000722:	f000 fdfb 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	003b      	movs	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000732:	003a      	movs	r2, r7
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_TIM3_Init+0xa0>)
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f004 fd33 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000742:	f000 fdeb 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	b006      	add	sp, #24
 800074c:	bd80      	pop	{r7, pc}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	200000a0 	.word	0x200000a0
 8000754:	40000400 	.word	0x40000400
 8000758:	0000f9ff 	.word	0x0000f9ff

0800075c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_USART1_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <MX_USART1_UART_Init+0x60>)
 800076a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000780:	220c      	movs	r2, #12
 8000782:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <MX_USART1_UART_Init+0x58>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f004 fd68 	bl	8005274 <HAL_UART_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 80007a8:	f000 fdb8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	200000e8 	.word	0x200000e8
 80007b8:	40013800 	.word	0x40013800
 80007bc:	00007a12 	.word	0x00007a12

080007c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	; (800081c <MX_USART2_UART_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007cc:	2296      	movs	r2, #150	; 0x96
 80007ce:	0192      	lsls	r2, r2, #6
 80007d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007e6:	2208      	movs	r2, #8
 80007e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x58>)
 8000804:	0018      	movs	r0, r3
 8000806:	f004 fd35 	bl	8005274 <HAL_UART_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 fd85 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000016c 	.word	0x2000016c
 800081c:	40004400 	.word	0x40004400

08000820 <HAL_GPIO_EXTI_Callback>:
}

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000820:	b5b0      	push	{r4, r5, r7, lr}
 8000822:	b0a2      	sub	sp, #136	; 0x88
 8000824:	af20      	add	r7, sp, #128	; 0x80
 8000826:	0002      	movs	r2, r0
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 800082c:	1dbb      	adds	r3, r7, #6
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0212      	lsls	r2, r2, #8
 8000834:	4293      	cmp	r3, r2
 8000836:	d100      	bne.n	800083a <HAL_GPIO_EXTI_Callback+0x1a>
 8000838:	e2f9      	b.n	8000e2e <HAL_GPIO_EXTI_Callback+0x60e>
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0212      	lsls	r2, r2, #8
 800083e:	4293      	cmp	r3, r2
 8000840:	dd00      	ble.n	8000844 <HAL_GPIO_EXTI_Callback+0x24>
 8000842:	e336      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0152      	lsls	r2, r2, #5
 8000848:	4293      	cmp	r3, r2
 800084a:	d100      	bne.n	800084e <HAL_GPIO_EXTI_Callback+0x2e>
 800084c:	e213      	b.n	8000c76 <HAL_GPIO_EXTI_Callback+0x456>
 800084e:	2280      	movs	r2, #128	; 0x80
 8000850:	0152      	lsls	r2, r2, #5
 8000852:	4293      	cmp	r3, r2
 8000854:	dd00      	ble.n	8000858 <HAL_GPIO_EXTI_Callback+0x38>
 8000856:	e32c      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	4293      	cmp	r3, r2
 800085e:	d100      	bne.n	8000862 <HAL_GPIO_EXTI_Callback+0x42>
 8000860:	e0e0      	b.n	8000a24 <HAL_GPIO_EXTI_Callback+0x204>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	0112      	lsls	r2, r2, #4
 8000866:	4293      	cmp	r3, r2
 8000868:	dd00      	ble.n	800086c <HAL_GPIO_EXTI_Callback+0x4c>
 800086a:	e322      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	00d2      	lsls	r2, r2, #3
 8000870:	4293      	cmp	r3, r2
 8000872:	d100      	bne.n	8000876 <HAL_GPIO_EXTI_Callback+0x56>
 8000874:	e1a2      	b.n	8000bbc <HAL_GPIO_EXTI_Callback+0x39c>
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	00d2      	lsls	r2, r2, #3
 800087a:	4293      	cmp	r3, r2
 800087c:	dd00      	ble.n	8000880 <HAL_GPIO_EXTI_Callback+0x60>
 800087e:	e318      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	4293      	cmp	r3, r2
 8000886:	d100      	bne.n	800088a <HAL_GPIO_EXTI_Callback+0x6a>
 8000888:	e28e      	b.n	8000da8 <HAL_GPIO_EXTI_Callback+0x588>
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	4293      	cmp	r3, r2
 8000890:	dd00      	ble.n	8000894 <HAL_GPIO_EXTI_Callback+0x74>
 8000892:	e30e      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 8000894:	2b20      	cmp	r3, #32
 8000896:	dc0a      	bgt.n	80008ae <HAL_GPIO_EXTI_Callback+0x8e>
 8000898:	2b00      	cmp	r3, #0
 800089a:	dc00      	bgt.n	800089e <HAL_GPIO_EXTI_Callback+0x7e>
 800089c:	e309      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 800089e:	2b20      	cmp	r3, #32
 80008a0:	d900      	bls.n	80008a4 <HAL_GPIO_EXTI_Callback+0x84>
 80008a2:	e306      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
 80008a4:	009a      	lsls	r2, r3, #2
 80008a6:	4bdb      	ldr	r3, [pc, #876]	; (8000c14 <HAL_GPIO_EXTI_Callback+0x3f4>)
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	469f      	mov	pc, r3
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	0052      	lsls	r2, r2, #1
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d100      	bne.n	80008b8 <HAL_GPIO_EXTI_Callback+0x98>
 80008b6:	e231      	b.n	8000d1c <HAL_GPIO_EXTI_Callback+0x4fc>

//		case RDY_PIN_Pin: if (HAL_GPIO_ReadPin(RDY_PIN_GPIO_Port, RDY_PIN_Pin)== GPIO_PIN_RESET){
//			srv_iqs5xx_callback();
//		}
		default:
			break;
 80008b8:	e2fb      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x692>
			if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_SET && UpPad1_state != true){
 80008ba:	4bd7      	ldr	r3, [pc, #860]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x3f8>)
 80008bc:	2110      	movs	r1, #16
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 fbd4 	bl	800306c <HAL_GPIO_ReadPin>
 80008c4:	0003      	movs	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d125      	bne.n	8000916 <HAL_GPIO_EXTI_Callback+0xf6>
 80008ca:	4bd4      	ldr	r3, [pc, #848]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x3fc>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2201      	movs	r2, #1
 80008d0:	4053      	eors	r3, r2
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01e      	beq.n	8000916 <HAL_GPIO_EXTI_Callback+0xf6>
				if (CC1Value<126){
 80008d8:	4bd1      	ldr	r3, [pc, #836]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b7d      	cmp	r3, #125	; 0x7d
 80008de:	d805      	bhi.n	80008ec <HAL_GPIO_EXTI_Callback+0xcc>
					CC1Value ++;
 80008e0:	4bcf      	ldr	r3, [pc, #828]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4bcd      	ldr	r3, [pc, #820]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 80008ea:	701a      	strb	r2, [r3, #0]
				srv_midi_internal_controlChange(1, CC1Value, huart1);
 80008ec:	4bcc      	ldr	r3, [pc, #816]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 80008ee:	781d      	ldrb	r5, [r3, #0]
 80008f0:	4ccc      	ldr	r4, [pc, #816]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 80008f2:	466b      	mov	r3, sp
 80008f4:	0018      	movs	r0, r3
 80008f6:	0023      	movs	r3, r4
 80008f8:	3308      	adds	r3, #8
 80008fa:	227c      	movs	r2, #124	; 0x7c
 80008fc:	0019      	movs	r1, r3
 80008fe:	f005 fc73 	bl	80061e8 <memcpy>
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	0029      	movs	r1, r5
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fd57 	bl	80013bc <srv_midi_internal_controlChange>
				UpPad1_state = true;
 800090e:	4bc3      	ldr	r3, [pc, #780]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x3fc>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
			break;
 8000914:	e2cf      	b.n	8000eb6 <HAL_GPIO_EXTI_Callback+0x696>
			else if (HAL_GPIO_ReadPin(UpPad1_GPIO_Port, UpPad1_Pin)== GPIO_PIN_RESET && UpPad1_state != false) {
 8000916:	4bc0      	ldr	r3, [pc, #768]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8000918:	2110      	movs	r1, #16
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fba6 	bl	800306c <HAL_GPIO_ReadPin>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d000      	beq.n	8000926 <HAL_GPIO_EXTI_Callback+0x106>
 8000924:	e2c7      	b.n	8000eb6 <HAL_GPIO_EXTI_Callback+0x696>
 8000926:	4bbd      	ldr	r3, [pc, #756]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x3fc>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d100      	bne.n	8000930 <HAL_GPIO_EXTI_Callback+0x110>
 800092e:	e2c2      	b.n	8000eb6 <HAL_GPIO_EXTI_Callback+0x696>
				UpPad1_state = false;
 8000930:	4bba      	ldr	r3, [pc, #744]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x3fc>)
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
			break;
 8000936:	e2be      	b.n	8000eb6 <HAL_GPIO_EXTI_Callback+0x696>
					if (HAL_GPIO_ReadPin(UpPad2_GPIO_Port, UpPad2_Pin)== GPIO_PIN_SET && UpPad2_state != true){
 8000938:	4bbb      	ldr	r3, [pc, #748]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 800093a:	2101      	movs	r1, #1
 800093c:	0018      	movs	r0, r3
 800093e:	f002 fb95 	bl	800306c <HAL_GPIO_ReadPin>
 8000942:	0003      	movs	r3, r0
 8000944:	2b01      	cmp	r3, #1
 8000946:	d121      	bne.n	800098c <HAL_GPIO_EXTI_Callback+0x16c>
 8000948:	4bb8      	ldr	r3, [pc, #736]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x40c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4053      	eors	r3, r2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d01a      	beq.n	800098c <HAL_GPIO_EXTI_Callback+0x16c>
						CC2Value ++;
 8000956:	4bb6      	ldr	r3, [pc, #728]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4bb4      	ldr	r3, [pc, #720]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000960:	701a      	strb	r2, [r3, #0]
						srv_midi_internal_controlChange(2, CC2Value, huart1);
 8000962:	4bb3      	ldr	r3, [pc, #716]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000964:	781d      	ldrb	r5, [r3, #0]
 8000966:	4caf      	ldr	r4, [pc, #700]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000968:	466b      	mov	r3, sp
 800096a:	0018      	movs	r0, r3
 800096c:	0023      	movs	r3, r4
 800096e:	3308      	adds	r3, #8
 8000970:	227c      	movs	r2, #124	; 0x7c
 8000972:	0019      	movs	r1, r3
 8000974:	f005 fc38 	bl	80061e8 <memcpy>
 8000978:	6822      	ldr	r2, [r4, #0]
 800097a:	6863      	ldr	r3, [r4, #4]
 800097c:	0029      	movs	r1, r5
 800097e:	2002      	movs	r0, #2
 8000980:	f000 fd1c 	bl	80013bc <srv_midi_internal_controlChange>
						UpPad2_state = true;
 8000984:	4ba9      	ldr	r3, [pc, #676]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x40c>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
					break;
 800098a:	e296      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x69a>
					else if (HAL_GPIO_ReadPin(UpPad2_GPIO_Port, UpPad2_Pin)== GPIO_PIN_RESET && UpPad2_state != false) {
 800098c:	4ba6      	ldr	r3, [pc, #664]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 800098e:	2101      	movs	r1, #1
 8000990:	0018      	movs	r0, r3
 8000992:	f002 fb6b 	bl	800306c <HAL_GPIO_ReadPin>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d000      	beq.n	800099c <HAL_GPIO_EXTI_Callback+0x17c>
 800099a:	e28e      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x69a>
 800099c:	4ba3      	ldr	r3, [pc, #652]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x40c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d100      	bne.n	80009a6 <HAL_GPIO_EXTI_Callback+0x186>
 80009a4:	e289      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x69a>
						UpPad2_state = false;
 80009a6:	4ba1      	ldr	r3, [pc, #644]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x40c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
					break;
 80009ac:	e285      	b.n	8000eba <HAL_GPIO_EXTI_Callback+0x69a>
							if (HAL_GPIO_ReadPin(UpPad3_GPIO_Port, UpPad3_Pin)== GPIO_PIN_SET && UpPad3_state != true){
 80009ae:	4b9e      	ldr	r3, [pc, #632]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 80009b0:	2104      	movs	r1, #4
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fb5a 	bl	800306c <HAL_GPIO_ReadPin>
 80009b8:	0003      	movs	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d121      	bne.n	8000a02 <HAL_GPIO_EXTI_Callback+0x1e2>
 80009be:	4b9d      	ldr	r3, [pc, #628]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x414>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	4053      	eors	r3, r2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01a      	beq.n	8000a02 <HAL_GPIO_EXTI_Callback+0x1e2>
								CC3Value ++;
 80009cc:	4b9a      	ldr	r3, [pc, #616]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b98      	ldr	r3, [pc, #608]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 80009d6:	701a      	strb	r2, [r3, #0]
								srv_midi_internal_controlChange(3, CC3Value, huart1);
 80009d8:	4b97      	ldr	r3, [pc, #604]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 80009da:	781d      	ldrb	r5, [r3, #0]
 80009dc:	4c91      	ldr	r4, [pc, #580]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 80009de:	466b      	mov	r3, sp
 80009e0:	0018      	movs	r0, r3
 80009e2:	0023      	movs	r3, r4
 80009e4:	3308      	adds	r3, #8
 80009e6:	227c      	movs	r2, #124	; 0x7c
 80009e8:	0019      	movs	r1, r3
 80009ea:	f005 fbfd 	bl	80061e8 <memcpy>
 80009ee:	6822      	ldr	r2, [r4, #0]
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	0029      	movs	r1, r5
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 fce1 	bl	80013bc <srv_midi_internal_controlChange>
								UpPad3_state = true;
 80009fa:	4b8e      	ldr	r3, [pc, #568]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x414>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
							break;
 8000a00:	e25d      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x69e>
							else if (HAL_GPIO_ReadPin(UpPad3_GPIO_Port, UpPad3_Pin)== GPIO_PIN_RESET && UpPad3_state != false) {
 8000a02:	4b89      	ldr	r3, [pc, #548]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	0018      	movs	r0, r3
 8000a08:	f002 fb30 	bl	800306c <HAL_GPIO_ReadPin>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d000      	beq.n	8000a12 <HAL_GPIO_EXTI_Callback+0x1f2>
 8000a10:	e255      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x69e>
 8000a12:	4b88      	ldr	r3, [pc, #544]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x414>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d100      	bne.n	8000a1c <HAL_GPIO_EXTI_Callback+0x1fc>
 8000a1a:	e250      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x69e>
								UpPad3_state = false;
 8000a1c:	4b85      	ldr	r3, [pc, #532]	; (8000c34 <HAL_GPIO_EXTI_Callback+0x414>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
							break;
 8000a22:	e24c      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x69e>
									if (HAL_GPIO_ReadPin(UpPad4_GPIO_Port, UpPad4_Pin)== GPIO_PIN_SET && UpPad4_state != true){
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	4a7f      	ldr	r2, [pc, #508]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000a2a:	0019      	movs	r1, r3
 8000a2c:	0010      	movs	r0, r2
 8000a2e:	f002 fb1d 	bl	800306c <HAL_GPIO_ReadPin>
 8000a32:	0003      	movs	r3, r0
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d124      	bne.n	8000a82 <HAL_GPIO_EXTI_Callback+0x262>
 8000a38:	4b80      	ldr	r3, [pc, #512]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x41c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4053      	eors	r3, r2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d01d      	beq.n	8000a82 <HAL_GPIO_EXTI_Callback+0x262>
										if (VideoSelector<27){
 8000a46:	4b7e      	ldr	r3, [pc, #504]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x420>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b1a      	cmp	r3, #26
 8000a4c:	d815      	bhi.n	8000a7a <HAL_GPIO_EXTI_Callback+0x25a>
											VideoSelector++;
 8000a4e:	4b7c      	ldr	r3, [pc, #496]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x420>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b7a      	ldr	r3, [pc, #488]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x420>)
 8000a58:	701a      	strb	r2, [r3, #0]
											srv_midi_internal_sendNote(VideoSelector, 3, 60, huart1);
 8000a5a:	4b79      	ldr	r3, [pc, #484]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x420>)
 8000a5c:	781d      	ldrb	r5, [r3, #0]
 8000a5e:	4c71      	ldr	r4, [pc, #452]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000a60:	466b      	mov	r3, sp
 8000a62:	0018      	movs	r0, r3
 8000a64:	1d23      	adds	r3, r4, #4
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0019      	movs	r1, r3
 8000a6a:	f005 fbbd 	bl	80061e8 <memcpy>
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	223c      	movs	r2, #60	; 0x3c
 8000a72:	2103      	movs	r1, #3
 8000a74:	0028      	movs	r0, r5
 8000a76:	f000 fc57 	bl	8001328 <srv_midi_internal_sendNote>
										UpPad4_state = true;
 8000a7a:	4b70      	ldr	r3, [pc, #448]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x41c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
									break;
 8000a80:	e21f      	b.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x6a2>
									else if (HAL_GPIO_ReadPin(UpPad4_GPIO_Port, UpPad4_Pin)== GPIO_PIN_RESET && UpPad4_state != false) {
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	4a68      	ldr	r2, [pc, #416]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f002 faee 	bl	800306c <HAL_GPIO_ReadPin>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d000      	beq.n	8000a96 <HAL_GPIO_EXTI_Callback+0x276>
 8000a94:	e215      	b.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x6a2>
 8000a96:	4b69      	ldr	r3, [pc, #420]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x41c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d100      	bne.n	8000aa0 <HAL_GPIO_EXTI_Callback+0x280>
 8000a9e:	e210      	b.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x6a2>
										UpPad4_state = false;
 8000aa0:	4b66      	ldr	r3, [pc, #408]	; (8000c3c <HAL_GPIO_EXTI_Callback+0x41c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
										srv_midi_internal_sendNote(VideoSelector, 3, 0, huart1);
 8000aa6:	4b66      	ldr	r3, [pc, #408]	; (8000c40 <HAL_GPIO_EXTI_Callback+0x420>)
 8000aa8:	781d      	ldrb	r5, [r3, #0]
 8000aaa:	4c5e      	ldr	r4, [pc, #376]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000aac:	466b      	mov	r3, sp
 8000aae:	0018      	movs	r0, r3
 8000ab0:	1d23      	adds	r3, r4, #4
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	f005 fb97 	bl	80061e8 <memcpy>
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	2200      	movs	r2, #0
 8000abe:	2103      	movs	r1, #3
 8000ac0:	0028      	movs	r0, r5
 8000ac2:	f000 fc31 	bl	8001328 <srv_midi_internal_sendNote>
									break;
 8000ac6:	e1fc      	b.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x6a2>
			if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_SET && DownPad1_state != true){
 8000ac8:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8000aca:	2120      	movs	r1, #32
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 facd 	bl	800306c <HAL_GPIO_ReadPin>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d125      	bne.n	8000b24 <HAL_GPIO_EXTI_Callback+0x304>
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x424>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2201      	movs	r2, #1
 8000ade:	4053      	eors	r3, r2
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d01e      	beq.n	8000b24 <HAL_GPIO_EXTI_Callback+0x304>
				if (CC1Value>0){
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <HAL_GPIO_EXTI_Callback+0x2da>
					CC1Value --;
 8000aee:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b4a      	ldr	r3, [pc, #296]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 8000af8:	701a      	strb	r2, [r3, #0]
				srv_midi_internal_controlChange(1, CC1Value, huart1);
 8000afa:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x400>)
 8000afc:	781d      	ldrb	r5, [r3, #0]
 8000afe:	4c49      	ldr	r4, [pc, #292]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000b00:	466b      	mov	r3, sp
 8000b02:	0018      	movs	r0, r3
 8000b04:	0023      	movs	r3, r4
 8000b06:	3308      	adds	r3, #8
 8000b08:	227c      	movs	r2, #124	; 0x7c
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	f005 fb6c 	bl	80061e8 <memcpy>
 8000b10:	6822      	ldr	r2, [r4, #0]
 8000b12:	6863      	ldr	r3, [r4, #4]
 8000b14:	0029      	movs	r1, r5
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fc50 	bl	80013bc <srv_midi_internal_controlChange>
				DownPad1_state = true;
 8000b1c:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x424>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
			break;
 8000b22:	e1d0      	b.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x6a6>
			else if (HAL_GPIO_ReadPin(DownPad1_GPIO_Port, DownPad1_Pin)== GPIO_PIN_RESET && DownPad1_state != false) {
 8000b24:	4b3c      	ldr	r3, [pc, #240]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x3f8>)
 8000b26:	2120      	movs	r1, #32
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 fa9f 	bl	800306c <HAL_GPIO_ReadPin>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d000      	beq.n	8000b34 <HAL_GPIO_EXTI_Callback+0x314>
 8000b32:	e1c8      	b.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x6a6>
 8000b34:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x424>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d100      	bne.n	8000b3e <HAL_GPIO_EXTI_Callback+0x31e>
 8000b3c:	e1c3      	b.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x6a6>
				DownPad1_state = false;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <HAL_GPIO_EXTI_Callback+0x424>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			break;
 8000b44:	e1bf      	b.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x6a6>
					if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_SET && DownPad2_state != true){
 8000b46:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000b48:	2102      	movs	r1, #2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 fa8e 	bl	800306c <HAL_GPIO_ReadPin>
 8000b50:	0003      	movs	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d121      	bne.n	8000b9a <HAL_GPIO_EXTI_Callback+0x37a>
 8000b56:	4b3c      	ldr	r3, [pc, #240]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x428>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4053      	eors	r3, r2
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d01a      	beq.n	8000b9a <HAL_GPIO_EXTI_Callback+0x37a>
						CC2Value --;
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b30      	ldr	r3, [pc, #192]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000b6e:	701a      	strb	r2, [r3, #0]
						srv_midi_internal_controlChange(2, CC2Value, huart1);
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <HAL_GPIO_EXTI_Callback+0x410>)
 8000b72:	781d      	ldrb	r5, [r3, #0]
 8000b74:	4c2b      	ldr	r4, [pc, #172]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000b76:	466b      	mov	r3, sp
 8000b78:	0018      	movs	r0, r3
 8000b7a:	0023      	movs	r3, r4
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	227c      	movs	r2, #124	; 0x7c
 8000b80:	0019      	movs	r1, r3
 8000b82:	f005 fb31 	bl	80061e8 <memcpy>
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	6863      	ldr	r3, [r4, #4]
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 fc15 	bl	80013bc <srv_midi_internal_controlChange>
						DownPad2_state = true;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x428>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	701a      	strb	r2, [r3, #0]
					break;
 8000b98:	e197      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x6aa>
					else if (HAL_GPIO_ReadPin(DownPad2_GPIO_Port, DownPad2_Pin)== GPIO_PIN_RESET && DownPad2_state != false) {
 8000b9a:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fa64 	bl	800306c <HAL_GPIO_ReadPin>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d000      	beq.n	8000baa <HAL_GPIO_EXTI_Callback+0x38a>
 8000ba8:	e18f      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x6aa>
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x428>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d100      	bne.n	8000bb4 <HAL_GPIO_EXTI_Callback+0x394>
 8000bb2:	e18a      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x6aa>
						DownPad2_state = false;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <HAL_GPIO_EXTI_Callback+0x428>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
					break;
 8000bba:	e186      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x6aa>
							if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_SET && DownPad3_state != true){
 8000bbc:	2380      	movs	r3, #128	; 0x80
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x408>)
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	0010      	movs	r0, r2
 8000bc6:	f002 fa51 	bl	800306c <HAL_GPIO_ReadPin>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d13f      	bne.n	8000c50 <HAL_GPIO_EXTI_Callback+0x430>
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x42c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4053      	eors	r3, r2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d038      	beq.n	8000c50 <HAL_GPIO_EXTI_Callback+0x430>
								CC3Value --;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 8000be8:	701a      	strb	r2, [r3, #0]
								srv_midi_internal_controlChange(3, CC3Value, huart1);
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <HAL_GPIO_EXTI_Callback+0x418>)
 8000bec:	781d      	ldrb	r5, [r3, #0]
 8000bee:	4c0d      	ldr	r4, [pc, #52]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x404>)
 8000bf0:	466b      	mov	r3, sp
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	0023      	movs	r3, r4
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	227c      	movs	r2, #124	; 0x7c
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	f005 faf4 	bl	80061e8 <memcpy>
 8000c00:	6822      	ldr	r2, [r4, #0]
 8000c02:	6863      	ldr	r3, [r4, #4]
 8000c04:	0029      	movs	r1, r5
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 fbd8 	bl	80013bc <srv_midi_internal_controlChange>
								DownPad3_state = true;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_GPIO_EXTI_Callback+0x42c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
							break;
 8000c12:	e15c      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x6ae>
 8000c14:	08006244 	.word	0x08006244
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	2000002d 	.word	0x2000002d
 8000c20:	20000000 	.word	0x20000000
 8000c24:	200000e8 	.word	0x200000e8
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	2000002e 	.word	0x2000002e
 8000c30:	20000001 	.word	0x20000001
 8000c34:	2000002f 	.word	0x2000002f
 8000c38:	20000002 	.word	0x20000002
 8000c3c:	20000030 	.word	0x20000030
 8000c40:	20000003 	.word	0x20000003
 8000c44:	20000031 	.word	0x20000031
 8000c48:	20000032 	.word	0x20000032
 8000c4c:	20000033 	.word	0x20000033
							else if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_RESET && DownPad3_state != false) {
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	4aa4      	ldr	r2, [pc, #656]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000c56:	0019      	movs	r1, r3
 8000c58:	0010      	movs	r0, r2
 8000c5a:	f002 fa07 	bl	800306c <HAL_GPIO_ReadPin>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d000      	beq.n	8000c64 <HAL_GPIO_EXTI_Callback+0x444>
 8000c62:	e134      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x6ae>
 8000c64:	4ba1      	ldr	r3, [pc, #644]	; (8000eec <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <HAL_GPIO_EXTI_Callback+0x44e>
 8000c6c:	e12f      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x6ae>
								DownPad3_state = false;
 8000c6e:	4b9f      	ldr	r3, [pc, #636]	; (8000eec <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
							break;
 8000c74:	e12b      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x6ae>
									if (HAL_GPIO_ReadPin(DownPad4_GPIO_Port, DownPad4_Pin)== GPIO_PIN_SET && DownPad4_state != true){
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	015a      	lsls	r2, r3, #5
 8000c7a:	2390      	movs	r3, #144	; 0x90
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 f9f3 	bl	800306c <HAL_GPIO_ReadPin>
 8000c86:	0003      	movs	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d124      	bne.n	8000cd6 <HAL_GPIO_EXTI_Callback+0x4b6>
 8000c8c:	4b98      	ldr	r3, [pc, #608]	; (8000ef0 <HAL_GPIO_EXTI_Callback+0x6d0>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4053      	eors	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d01d      	beq.n	8000cd6 <HAL_GPIO_EXTI_Callback+0x4b6>
										if (VideoSelector>19){
 8000c9a:	4b96      	ldr	r3, [pc, #600]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b13      	cmp	r3, #19
 8000ca0:	d915      	bls.n	8000cce <HAL_GPIO_EXTI_Callback+0x4ae>
											VideoSelector--;
 8000ca2:	4b94      	ldr	r3, [pc, #592]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b92      	ldr	r3, [pc, #584]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8000cac:	701a      	strb	r2, [r3, #0]
											srv_midi_internal_sendNote(VideoSelector, 3, 60, huart1);
 8000cae:	4b91      	ldr	r3, [pc, #580]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8000cb0:	781d      	ldrb	r5, [r3, #0]
 8000cb2:	4c91      	ldr	r4, [pc, #580]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000cb4:	466b      	mov	r3, sp
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	1d23      	adds	r3, r4, #4
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	f005 fa93 	bl	80061e8 <memcpy>
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	223c      	movs	r2, #60	; 0x3c
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	0028      	movs	r0, r5
 8000cca:	f000 fb2d 	bl	8001328 <srv_midi_internal_sendNote>
										DownPad3_state = true;
 8000cce:	4b87      	ldr	r3, [pc, #540]	; (8000eec <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
									break;
 8000cd4:	e0fd      	b.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x6b2>
									else if (HAL_GPIO_ReadPin(DownPad3_GPIO_Port, DownPad3_Pin)== GPIO_PIN_RESET && DownPad3_state != false) {
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	4a83      	ldr	r2, [pc, #524]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000cdc:	0019      	movs	r1, r3
 8000cde:	0010      	movs	r0, r2
 8000ce0:	f002 f9c4 	bl	800306c <HAL_GPIO_ReadPin>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d000      	beq.n	8000cea <HAL_GPIO_EXTI_Callback+0x4ca>
 8000ce8:	e0f3      	b.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x6b2>
 8000cea:	4b80      	ldr	r3, [pc, #512]	; (8000eec <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_EXTI_Callback+0x4d4>
 8000cf2:	e0ee      	b.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x6b2>
										DownPad3_state = false;
 8000cf4:	4b7d      	ldr	r3, [pc, #500]	; (8000eec <HAL_GPIO_EXTI_Callback+0x6cc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
										srv_midi_internal_sendNote(VideoSelector, 3, 0, huart1);
 8000cfa:	4b7e      	ldr	r3, [pc, #504]	; (8000ef4 <HAL_GPIO_EXTI_Callback+0x6d4>)
 8000cfc:	781d      	ldrb	r5, [r3, #0]
 8000cfe:	4c7e      	ldr	r4, [pc, #504]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000d00:	466b      	mov	r3, sp
 8000d02:	0018      	movs	r0, r3
 8000d04:	1d23      	adds	r3, r4, #4
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f005 fa6d 	bl	80061e8 <memcpy>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	2200      	movs	r2, #0
 8000d12:	2103      	movs	r1, #3
 8000d14:	0028      	movs	r0, r5
 8000d16:	f000 fb07 	bl	8001328 <srv_midi_internal_sendNote>
									break;
 8000d1a:	e0da      	b.n	8000ed2 <HAL_GPIO_EXTI_Callback+0x6b2>
											if (HAL_GPIO_ReadPin(Piezo1_GPIO_Port, Piezo1_Pin)== GPIO_PIN_SET && Piezo1_state != true){
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	005a      	lsls	r2, r3, #1
 8000d20:	2390      	movs	r3, #144	; 0x90
 8000d22:	05db      	lsls	r3, r3, #23
 8000d24:	0011      	movs	r1, r2
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 f9a0 	bl	800306c <HAL_GPIO_ReadPin>
 8000d2c:	0003      	movs	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d118      	bne.n	8000d64 <HAL_GPIO_EXTI_Callback+0x544>
 8000d32:	4b72      	ldr	r3, [pc, #456]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4053      	eors	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d011      	beq.n	8000d64 <HAL_GPIO_EXTI_Callback+0x544>
												srv_midi_internal_sendNote(24, 4, 60, huart1);
 8000d40:	4c6d      	ldr	r4, [pc, #436]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000d42:	466b      	mov	r3, sp
 8000d44:	0018      	movs	r0, r3
 8000d46:	1d23      	adds	r3, r4, #4
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f005 fa4c 	bl	80061e8 <memcpy>
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	223c      	movs	r2, #60	; 0x3c
 8000d54:	2104      	movs	r1, #4
 8000d56:	2018      	movs	r0, #24
 8000d58:	f000 fae6 	bl	8001328 <srv_midi_internal_sendNote>
												Piezo1_state = true;
 8000d5c:	4b67      	ldr	r3, [pc, #412]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
											break;
 8000d62:	e0b8      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x6b6>
											else if (HAL_GPIO_ReadPin(Piezo1_GPIO_Port, Piezo1_Pin)== GPIO_PIN_RESET && Piezo1_state != false) {
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	005a      	lsls	r2, r3, #1
 8000d68:	2390      	movs	r3, #144	; 0x90
 8000d6a:	05db      	lsls	r3, r3, #23
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f002 f97c 	bl	800306c <HAL_GPIO_ReadPin>
 8000d74:	1e03      	subs	r3, r0, #0
 8000d76:	d000      	beq.n	8000d7a <HAL_GPIO_EXTI_Callback+0x55a>
 8000d78:	e0ad      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x6b6>
 8000d7a:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <HAL_GPIO_EXTI_Callback+0x564>
 8000d82:	e0a8      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x6b6>
												Piezo1_state = false;
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_GPIO_EXTI_Callback+0x6dc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
												srv_midi_internal_sendNote(24, 4, 0, huart1);
 8000d8a:	4c5b      	ldr	r4, [pc, #364]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000d8c:	466b      	mov	r3, sp
 8000d8e:	0018      	movs	r0, r3
 8000d90:	1d23      	adds	r3, r4, #4
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	0019      	movs	r1, r3
 8000d96:	f005 fa27 	bl	80061e8 <memcpy>
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2104      	movs	r1, #4
 8000da0:	2018      	movs	r0, #24
 8000da2:	f000 fac1 	bl	8001328 <srv_midi_internal_sendNote>
											break;
 8000da6:	e096      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x6b6>
											if (HAL_GPIO_ReadPin(Piezo2_GPIO_Port, Piezo2_Pin)== GPIO_PIN_SET && Piezo2_state != true){
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4a54      	ldr	r2, [pc, #336]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x6e0>)
 8000dae:	0019      	movs	r1, r3
 8000db0:	0010      	movs	r0, r2
 8000db2:	f002 f95b 	bl	800306c <HAL_GPIO_ReadPin>
 8000db6:	0003      	movs	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d118      	bne.n	8000dee <HAL_GPIO_EXTI_Callback+0x5ce>
 8000dbc:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4053      	eors	r3, r2
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d011      	beq.n	8000dee <HAL_GPIO_EXTI_Callback+0x5ce>
												srv_midi_internal_sendNote(24, 5, 60, huart1);
 8000dca:	4c4b      	ldr	r4, [pc, #300]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000dcc:	466b      	mov	r3, sp
 8000dce:	0018      	movs	r0, r3
 8000dd0:	1d23      	adds	r3, r4, #4
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	f005 fa07 	bl	80061e8 <memcpy>
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	223c      	movs	r2, #60	; 0x3c
 8000dde:	2105      	movs	r1, #5
 8000de0:	2018      	movs	r0, #24
 8000de2:	f000 faa1 	bl	8001328 <srv_midi_internal_sendNote>
												Piezo2_state = true;
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
											break;
 8000dec:	e075      	b.n	8000eda <HAL_GPIO_EXTI_Callback+0x6ba>
											else if (HAL_GPIO_ReadPin(Piezo2_GPIO_Port, Piezo2_Pin)== GPIO_PIN_RESET && Piezo2_state != false) {
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4a43      	ldr	r2, [pc, #268]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x6e0>)
 8000df4:	0019      	movs	r1, r3
 8000df6:	0010      	movs	r0, r2
 8000df8:	f002 f938 	bl	800306c <HAL_GPIO_ReadPin>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d000      	beq.n	8000e02 <HAL_GPIO_EXTI_Callback+0x5e2>
 8000e00:	e06b      	b.n	8000eda <HAL_GPIO_EXTI_Callback+0x6ba>
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d067      	beq.n	8000eda <HAL_GPIO_EXTI_Callback+0x6ba>
												Piezo2_state = false;
 8000e0a:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x6e4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
												srv_midi_internal_sendNote(24, 5, 0, huart1);
 8000e10:	4c39      	ldr	r4, [pc, #228]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000e12:	466b      	mov	r3, sp
 8000e14:	0018      	movs	r0, r3
 8000e16:	1d23      	adds	r3, r4, #4
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	f005 f9e4 	bl	80061e8 <memcpy>
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	2105      	movs	r1, #5
 8000e26:	2018      	movs	r0, #24
 8000e28:	f000 fa7e 	bl	8001328 <srv_midi_internal_sendNote>
											break;
 8000e2c:	e055      	b.n	8000eda <HAL_GPIO_EXTI_Callback+0x6ba>
													if (HAL_GPIO_ReadPin(Piezo3_GPIO_Port, Piezo3_Pin)== GPIO_PIN_SET && Piezo3_state != true){
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	4a2d      	ldr	r2, [pc, #180]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000e34:	0019      	movs	r1, r3
 8000e36:	0010      	movs	r0, r2
 8000e38:	f002 f918 	bl	800306c <HAL_GPIO_ReadPin>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d118      	bne.n	8000e74 <HAL_GPIO_EXTI_Callback+0x654>
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4053      	eors	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d011      	beq.n	8000e74 <HAL_GPIO_EXTI_Callback+0x654>
														srv_midi_internal_sendNote(24, 6, 60, huart1);
 8000e50:	4c29      	ldr	r4, [pc, #164]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000e52:	466b      	mov	r3, sp
 8000e54:	0018      	movs	r0, r3
 8000e56:	1d23      	adds	r3, r4, #4
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	f005 f9c4 	bl	80061e8 <memcpy>
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	223c      	movs	r2, #60	; 0x3c
 8000e64:	2106      	movs	r1, #6
 8000e66:	2018      	movs	r0, #24
 8000e68:	f000 fa5e 	bl	8001328 <srv_midi_internal_sendNote>
														Piezo3_state = true;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
													break;
 8000e72:	e034      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x6be>
													else if (HAL_GPIO_ReadPin(Piezo3_GPIO_Port, Piezo3_Pin)== GPIO_PIN_RESET && Piezo3_state != false) {
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	4a1b      	ldr	r2, [pc, #108]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x6c8>)
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	f002 f8f5 	bl	800306c <HAL_GPIO_ReadPin>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d12b      	bne.n	8000ede <HAL_GPIO_EXTI_Callback+0x6be>
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d027      	beq.n	8000ede <HAL_GPIO_EXTI_Callback+0x6be>
														Piezo3_state = false;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x6e8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
														srv_midi_internal_sendNote(24, 6, 0, huart1);
 8000e94:	4c18      	ldr	r4, [pc, #96]	; (8000ef8 <HAL_GPIO_EXTI_Callback+0x6d8>)
 8000e96:	466b      	mov	r3, sp
 8000e98:	0018      	movs	r0, r3
 8000e9a:	1d23      	adds	r3, r4, #4
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	f005 f9a2 	bl	80061e8 <memcpy>
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2106      	movs	r1, #6
 8000eaa:	2018      	movs	r0, #24
 8000eac:	f000 fa3c 	bl	8001328 <srv_midi_internal_sendNote>
													break;
 8000eb0:	e015      	b.n	8000ede <HAL_GPIO_EXTI_Callback+0x6be>
			break;
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	e014      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
			break;
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	e012      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
					break;
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e010      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
							break;
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
									break;
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
			break;
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
					break;
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
							break;
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
									break;
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
											break;
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
											break;
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_EXTI_Callback+0x6c0>
													break;
 8000ede:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	20000033 	.word	0x20000033
 8000ef0:	20000034 	.word	0x20000034
 8000ef4:	20000003 	.word	0x20000003
 8000ef8:	200000e8 	.word	0x200000e8
 8000efc:	20000035 	.word	0x20000035
 8000f00:	48000800 	.word	0x48000800
 8000f04:	20000036 	.word	0x20000036
 8000f08:	20000037 	.word	0x20000037

08000f0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
 //Non blocking delay for getting ADC value every x ms
  GET_ADC_Value();
 8000f14:	f000 f9f6 	bl	8001304 <GET_ADC_Value>
  HAL_TIM_Base_Stop_IT(&htim3);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f003 fdfa 	bl	8004b14 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f22:	0018      	movs	r0, r3
 8000f24:	f003 fdaa 	bl	8004a7c <HAL_TIM_Base_Start_IT>


}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000a0 	.word	0x200000a0

08000f34 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) //Callback when ADC got a value
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b0a7      	sub	sp, #156	; 0x9c
 8000f38:	af20      	add	r7, sp, #128	; 0x80
 8000f3a:	6078      	str	r0, [r7, #4]
    // Read & Update The ADC Result
	//HAL_Delay(1000);
	if (initPassed == false){
 8000f3c:	4bc7      	ldr	r3, [pc, #796]	; (800125c <HAL_ADC_ConvCpltCallback+0x328>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	4053      	eors	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <HAL_ADC_ConvCpltCallback+0x18>
 8000f4a:	e08e      	b.n	800106a <HAL_ADC_ConvCpltCallback+0x136>
		if(nbTest<11){
 8000f4c:	4bc4      	ldr	r3, [pc, #784]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b0a      	cmp	r3, #10
 8000f52:	d865      	bhi.n	8001020 <HAL_ADC_ConvCpltCallback+0xec>
			//HAL_Delay(DELAYUPDATEPHOTO);
			uint16_t LumValue_1 = HAL_ADC_GetValue(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 f89a 	bl	8002090 <HAL_ADC_GetValue>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	2110      	movs	r1, #16
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	801a      	strh	r2, [r3, #0]
			if (nbTest !=0){lum1average = LumValue_1 + lum1average;}
 8000f64:	4bbe      	ldr	r3, [pc, #760]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_ADC_ConvCpltCallback+0x46>
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	881a      	ldrh	r2, [r3, #0]
 8000f70:	4bbc      	ldr	r3, [pc, #752]	; (8001264 <HAL_ADC_ConvCpltCallback+0x330>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	18d2      	adds	r2, r2, r3
 8000f76:	4bbb      	ldr	r3, [pc, #748]	; (8001264 <HAL_ADC_ConvCpltCallback+0x330>)
 8000f78:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop_IT(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 f83d 	bl	8001ffc <HAL_ADC_Stop_IT>
			ADC_Select_CH11();
 8000f82:	f000 f983 	bl	800128c <ADC_Select_CH11>
			//HAL_Delay(DELAYUPDATEPHOTO);
			HAL_ADC_Start(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 fe99 	bl	8001cc0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000f8e:	2301      	movs	r3, #1
 8000f90:	425a      	negs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 ff26 	bl	8001de8 <HAL_ADC_PollForConversion>
			uint16_t LumValue_2 = HAL_ADC_GetValue(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f001 f876 	bl	8002090 <HAL_ADC_GetValue>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	210e      	movs	r1, #14
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	801a      	strh	r2, [r3, #0]
			if (nbTest != 0){lum2average = LumValue_2 + lum2average;}
 8000fac:	4bac      	ldr	r3, [pc, #688]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_ADC_ConvCpltCallback+0x8e>
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	4bab      	ldr	r3, [pc, #684]	; (8001268 <HAL_ADC_ConvCpltCallback+0x334>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	18d2      	adds	r2, r2, r3
 8000fbe:	4baa      	ldr	r3, [pc, #680]	; (8001268 <HAL_ADC_ConvCpltCallback+0x334>)
 8000fc0:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 fecf 	bl	8001d68 <HAL_ADC_Stop>

			ADC_Select_CH12();
 8000fca:	f000 f97d 	bl	80012c8 <ADC_Select_CH12>
			//HAL_Delay(DELAYUPDATEPHOTO);
			HAL_ADC_Start(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 fe75 	bl	8001cc0 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	425a      	negs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 ff02 	bl	8001de8 <HAL_ADC_PollForConversion>
			uint16_t LumValue_3 = HAL_ADC_GetValue(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 f852 	bl	8002090 <HAL_ADC_GetValue>
 8000fec:	0002      	movs	r2, r0
 8000fee:	210c      	movs	r1, #12
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	801a      	strh	r2, [r3, #0]
			if (nbTest != 0){lum3average = LumValue_3 + lum3average;}
 8000ff4:	4b9a      	ldr	r3, [pc, #616]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_ADC_ConvCpltCallback+0xd6>
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	4b9a      	ldr	r3, [pc, #616]	; (800126c <HAL_ADC_ConvCpltCallback+0x338>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	18d2      	adds	r2, r2, r3
 8001006:	4b99      	ldr	r3, [pc, #612]	; (800126c <HAL_ADC_ConvCpltCallback+0x338>)
 8001008:	601a      	str	r2, [r3, #0]
			HAL_ADC_Stop(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0018      	movs	r0, r3
 800100e:	f000 feab 	bl	8001d68 <HAL_ADC_Stop>

			nbTest++;
 8001012:	4b93      	ldr	r3, [pc, #588]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	3301      	adds	r3, #1
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4b91      	ldr	r3, [pc, #580]	; (8001260 <HAL_ADC_ConvCpltCallback+0x32c>)
 800101c:	701a      	strb	r2, [r3, #0]
	//				srv_midi_internal_sendNote(PLAY5_NOTE, 1, 0, huart1);
	//			}
	//		HAL_ADC_Stop(hadc);
	}

}
 800101e:	e118      	b.n	8001252 <HAL_ADC_ConvCpltCallback+0x31e>
			Lum1threshold = lum1average/10 - 100;
 8001020:	4b90      	ldr	r3, [pc, #576]	; (8001264 <HAL_ADC_ConvCpltCallback+0x330>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	210a      	movs	r1, #10
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff f8f8 	bl	800021c <__divsi3>
 800102c:	0003      	movs	r3, r0
 800102e:	3b64      	subs	r3, #100	; 0x64
 8001030:	001a      	movs	r2, r3
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <HAL_ADC_ConvCpltCallback+0x33c>)
 8001034:	601a      	str	r2, [r3, #0]
			Lum2threshold = lum2average/10 - 100;
 8001036:	4b8c      	ldr	r3, [pc, #560]	; (8001268 <HAL_ADC_ConvCpltCallback+0x334>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	210a      	movs	r1, #10
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff f8ed 	bl	800021c <__divsi3>
 8001042:	0003      	movs	r3, r0
 8001044:	3b64      	subs	r3, #100	; 0x64
 8001046:	001a      	movs	r2, r3
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <HAL_ADC_ConvCpltCallback+0x340>)
 800104a:	601a      	str	r2, [r3, #0]
			Lum3threshold = lum3average/10 - 100;
 800104c:	4b87      	ldr	r3, [pc, #540]	; (800126c <HAL_ADC_ConvCpltCallback+0x338>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	210a      	movs	r1, #10
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff f8e2 	bl	800021c <__divsi3>
 8001058:	0003      	movs	r3, r0
 800105a:	3b64      	subs	r3, #100	; 0x64
 800105c:	001a      	movs	r2, r3
 800105e:	4b86      	ldr	r3, [pc, #536]	; (8001278 <HAL_ADC_ConvCpltCallback+0x344>)
 8001060:	601a      	str	r2, [r3, #0]
			initPassed = true;
 8001062:	4b7e      	ldr	r3, [pc, #504]	; (800125c <HAL_ADC_ConvCpltCallback+0x328>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	e0f3      	b.n	8001252 <HAL_ADC_ConvCpltCallback+0x31e>
	else if (initPassed == true){
 800106a:	4b7c      	ldr	r3, [pc, #496]	; (800125c <HAL_ADC_ConvCpltCallback+0x328>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <HAL_ADC_ConvCpltCallback+0x140>
 8001072:	e0ee      	b.n	8001252 <HAL_ADC_ConvCpltCallback+0x31e>
	uint16_t LumValue_1 = HAL_ADC_GetValue(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f001 f80a 	bl	8002090 <HAL_ADC_GetValue>
 800107c:	0002      	movs	r2, r0
 800107e:	2116      	movs	r1, #22
 8001080:	187b      	adds	r3, r7, r1
 8001082:	801a      	strh	r2, [r3, #0]
	if (LumValue_1 < Lum1threshold && Play1 !=true){
 8001084:	187b      	adds	r3, r7, r1
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <HAL_ADC_ConvCpltCallback+0x33c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	da18      	bge.n	80010c2 <HAL_ADC_ConvCpltCallback+0x18e>
 8001090:	4b7a      	ldr	r3, [pc, #488]	; (800127c <HAL_ADC_ConvCpltCallback+0x348>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	4053      	eors	r3, r2
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d011      	beq.n	80010c2 <HAL_ADC_ConvCpltCallback+0x18e>
		srv_midi_internal_sendNote(PLAY1_NOTE, 0, 50, huart1);
 800109e:	4c78      	ldr	r4, [pc, #480]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 80010a0:	466b      	mov	r3, sp
 80010a2:	0018      	movs	r0, r3
 80010a4:	1d23      	adds	r3, r4, #4
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0019      	movs	r1, r3
 80010aa:	f005 f89d 	bl	80061e8 <memcpy>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	2232      	movs	r2, #50	; 0x32
 80010b2:	2100      	movs	r1, #0
 80010b4:	2018      	movs	r0, #24
 80010b6:	f000 f937 	bl	8001328 <srv_midi_internal_sendNote>
		Play1 = true;
 80010ba:	4b70      	ldr	r3, [pc, #448]	; (800127c <HAL_ADC_ConvCpltCallback+0x348>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e01b      	b.n	80010fa <HAL_ADC_ConvCpltCallback+0x1c6>
	else if (LumValue_1 >= Lum1threshold && Play1 == true) {
 80010c2:	2316      	movs	r3, #22
 80010c4:	18fb      	adds	r3, r7, r3
 80010c6:	881a      	ldrh	r2, [r3, #0]
 80010c8:	4b69      	ldr	r3, [pc, #420]	; (8001270 <HAL_ADC_ConvCpltCallback+0x33c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	db14      	blt.n	80010fa <HAL_ADC_ConvCpltCallback+0x1c6>
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_ADC_ConvCpltCallback+0x348>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d010      	beq.n	80010fa <HAL_ADC_ConvCpltCallback+0x1c6>
		Play1 = false;
 80010d8:	4b68      	ldr	r3, [pc, #416]	; (800127c <HAL_ADC_ConvCpltCallback+0x348>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
		srv_midi_internal_sendNote(PLAY1_NOTE, 0, 0, huart1);
 80010de:	4c68      	ldr	r4, [pc, #416]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 80010e0:	466b      	mov	r3, sp
 80010e2:	0018      	movs	r0, r3
 80010e4:	1d23      	adds	r3, r4, #4
 80010e6:	2280      	movs	r2, #128	; 0x80
 80010e8:	0019      	movs	r1, r3
 80010ea:	f005 f87d 	bl	80061e8 <memcpy>
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2018      	movs	r0, #24
 80010f6:	f000 f917 	bl	8001328 <srv_midi_internal_sendNote>
	HAL_ADC_Stop_IT(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 ff7d 	bl	8001ffc <HAL_ADC_Stop_IT>
	ADC_Select_CH11();
 8001102:	f000 f8c3 	bl	800128c <ADC_Select_CH11>
	HAL_ADC_Start(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fdd9 	bl	8001cc0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 800110e:	2301      	movs	r3, #1
 8001110:	425a      	negs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fe66 	bl	8001de8 <HAL_ADC_PollForConversion>
	uint16_t LumValue_2 = HAL_ADC_GetValue(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	0018      	movs	r0, r3
 8001120:	f000 ffb6 	bl	8002090 <HAL_ADC_GetValue>
 8001124:	0002      	movs	r2, r0
 8001126:	2114      	movs	r1, #20
 8001128:	187b      	adds	r3, r7, r1
 800112a:	801a      	strh	r2, [r3, #0]
		if (LumValue_2 < Lum2threshold && Play2 !=true){
 800112c:	187b      	adds	r3, r7, r1
 800112e:	881a      	ldrh	r2, [r3, #0]
 8001130:	4b50      	ldr	r3, [pc, #320]	; (8001274 <HAL_ADC_ConvCpltCallback+0x340>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	da18      	bge.n	800116a <HAL_ADC_ConvCpltCallback+0x236>
 8001138:	4b52      	ldr	r3, [pc, #328]	; (8001284 <HAL_ADC_ConvCpltCallback+0x350>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2201      	movs	r2, #1
 800113e:	4053      	eors	r3, r2
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d011      	beq.n	800116a <HAL_ADC_ConvCpltCallback+0x236>
			srv_midi_internal_sendNote(PLAY2_NOTE, 1, 50, huart1);
 8001146:	4c4e      	ldr	r4, [pc, #312]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001148:	466b      	mov	r3, sp
 800114a:	0018      	movs	r0, r3
 800114c:	1d23      	adds	r3, r4, #4
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	0019      	movs	r1, r3
 8001152:	f005 f849 	bl	80061e8 <memcpy>
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	2232      	movs	r2, #50	; 0x32
 800115a:	2101      	movs	r1, #1
 800115c:	2019      	movs	r0, #25
 800115e:	f000 f8e3 	bl	8001328 <srv_midi_internal_sendNote>
			Play2 = true;
 8001162:	4b48      	ldr	r3, [pc, #288]	; (8001284 <HAL_ADC_ConvCpltCallback+0x350>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e01b      	b.n	80011a2 <HAL_ADC_ConvCpltCallback+0x26e>
		else if (LumValue_2 >= Lum2threshold && Play2 == true) {
 800116a:	2314      	movs	r3, #20
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	4b40      	ldr	r3, [pc, #256]	; (8001274 <HAL_ADC_ConvCpltCallback+0x340>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	db14      	blt.n	80011a2 <HAL_ADC_ConvCpltCallback+0x26e>
 8001178:	4b42      	ldr	r3, [pc, #264]	; (8001284 <HAL_ADC_ConvCpltCallback+0x350>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d010      	beq.n	80011a2 <HAL_ADC_ConvCpltCallback+0x26e>
			Play2 = false;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <HAL_ADC_ConvCpltCallback+0x350>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
			srv_midi_internal_sendNote(PLAY2_NOTE, 1, 0, huart1);
 8001186:	4c3e      	ldr	r4, [pc, #248]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001188:	466b      	mov	r3, sp
 800118a:	0018      	movs	r0, r3
 800118c:	1d23      	adds	r3, r4, #4
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0019      	movs	r1, r3
 8001192:	f005 f829 	bl	80061e8 <memcpy>
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	2200      	movs	r2, #0
 800119a:	2101      	movs	r1, #1
 800119c:	2019      	movs	r0, #25
 800119e:	f000 f8c3 	bl	8001328 <srv_midi_internal_sendNote>
		HAL_ADC_Stop(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f000 fddf 	bl	8001d68 <HAL_ADC_Stop>
		ADC_Select_CH12();
 80011aa:	f000 f88d 	bl	80012c8 <ADC_Select_CH12>
		HAL_ADC_Start(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f000 fd85 	bl	8001cc0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80011b6:	2301      	movs	r3, #1
 80011b8:	425a      	negs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 fe12 	bl	8001de8 <HAL_ADC_PollForConversion>
		uint16_t LumValue_3 = HAL_ADC_GetValue(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 ff62 	bl	8002090 <HAL_ADC_GetValue>
 80011cc:	0002      	movs	r2, r0
 80011ce:	2112      	movs	r1, #18
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	801a      	strh	r2, [r3, #0]
			if (LumValue_3 < Lum3threshold && Play3 !=true){
 80011d4:	187b      	adds	r3, r7, r1
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_ADC_ConvCpltCallback+0x344>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	da18      	bge.n	8001212 <HAL_ADC_ConvCpltCallback+0x2de>
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_ADC_ConvCpltCallback+0x354>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4053      	eors	r3, r2
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d011      	beq.n	8001212 <HAL_ADC_ConvCpltCallback+0x2de>
				srv_midi_internal_sendNote(PLAY3_NOTE, 1, 50, huart1);
 80011ee:	4c24      	ldr	r4, [pc, #144]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 80011f0:	466b      	mov	r3, sp
 80011f2:	0018      	movs	r0, r3
 80011f4:	1d23      	adds	r3, r4, #4
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	0019      	movs	r1, r3
 80011fa:	f004 fff5 	bl	80061e8 <memcpy>
 80011fe:	6823      	ldr	r3, [r4, #0]
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	2101      	movs	r1, #1
 8001204:	201a      	movs	r0, #26
 8001206:	f000 f88f 	bl	8001328 <srv_midi_internal_sendNote>
				Play3 = true;
 800120a:	4b1f      	ldr	r3, [pc, #124]	; (8001288 <HAL_ADC_ConvCpltCallback+0x354>)
 800120c:	2201      	movs	r2, #1
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e01b      	b.n	800124a <HAL_ADC_ConvCpltCallback+0x316>
			else if (LumValue_3 >= Lum3threshold && Play3 == true) {
 8001212:	2312      	movs	r3, #18
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <HAL_ADC_ConvCpltCallback+0x344>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	db14      	blt.n	800124a <HAL_ADC_ConvCpltCallback+0x316>
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_ADC_ConvCpltCallback+0x354>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d010      	beq.n	800124a <HAL_ADC_ConvCpltCallback+0x316>
				Play3 = false;
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_ADC_ConvCpltCallback+0x354>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
				srv_midi_internal_sendNote(PLAY3_NOTE, 1, 0, huart1);
 800122e:	4c14      	ldr	r4, [pc, #80]	; (8001280 <HAL_ADC_ConvCpltCallback+0x34c>)
 8001230:	466b      	mov	r3, sp
 8001232:	0018      	movs	r0, r3
 8001234:	1d23      	adds	r3, r4, #4
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	0019      	movs	r1, r3
 800123a:	f004 ffd5 	bl	80061e8 <memcpy>
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	2101      	movs	r1, #1
 8001244:	201a      	movs	r0, #26
 8001246:	f000 f86f 	bl	8001328 <srv_midi_internal_sendNote>
		HAL_ADC_Stop(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	0018      	movs	r0, r3
 800124e:	f000 fd8b 	bl	8001d68 <HAL_ADC_Stop>
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b007      	add	sp, #28
 8001258:	bd90      	pop	{r4, r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	2000003b 	.word	0x2000003b
 8001260:	2000002c 	.word	0x2000002c
 8001264:	2000003c 	.word	0x2000003c
 8001268:	20000040 	.word	0x20000040
 800126c:	20000044 	.word	0x20000044
 8001270:	20000048 	.word	0x20000048
 8001274:	2000004c 	.word	0x2000004c
 8001278:	20000050 	.word	0x20000050
 800127c:	20000038 	.word	0x20000038
 8001280:	200000e8 	.word	0x200000e8
 8001284:	20000039 	.word	0x20000039
 8001288:	2000003a 	.word	0x2000003a

0800128c <ADC_Select_CH11>:

void ADC_Select_CH11 (void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	0018      	movs	r0, r3
 8001296:	230c      	movs	r3, #12
 8001298:	001a      	movs	r2, r3
 800129a:	2100      	movs	r1, #0
 800129c:	f004 ffad 	bl	80061fa <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_11;
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	220b      	movs	r2, #11
 80012a4:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012a6:	1d3a      	adds	r2, r7, #4
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <ADC_Select_CH11+0x38>)
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 ffc3 	bl	8002238 <HAL_ADC_ConfigChannel>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <ADC_Select_CH11+0x2e>
	  {
	    Error_Handler();
 80012b6:	f000 f831 	bl	800131c <Error_Handler>
	  }
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	200001f0 	.word	0x200001f0

080012c8 <ADC_Select_CH12>:

void ADC_Select_CH12 (void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	0018      	movs	r0, r3
 80012d2:	230c      	movs	r3, #12
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f004 ff8f 	bl	80061fa <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_12;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	220c      	movs	r2, #12
 80012e0:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <ADC_Select_CH12+0x38>)
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 ffa5 	bl	8002238 <HAL_ADC_ConfigChannel>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <ADC_Select_CH12+0x2e>
	  {
	    Error_Handler();
 80012f2:	f000 f813 	bl	800131c <Error_Handler>
	  }
}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	200001f0 	.word	0x200001f0

08001304 <GET_ADC_Value>:
	  {
	    Error_Handler();
	  }
}

void GET_ADC_Value(void){ //Function to get all ADC values
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

	HAL_ADC_Start_IT(&hadc);
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <GET_ADC_Value+0x14>)
 800130a:	0018      	movs	r0, r3
 800130c:	f000 fe04 	bl	8001f18 <HAL_ADC_Start_IT>

}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	200001f0 	.word	0x200001f0

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <srv_midi_internal_sendNote>:

/* Private variables ---------------------------------------------------------*/
uint8_t aTxBuffer[3];

/* Public functions -----------------------------------------------*/
void srv_midi_internal_sendNote(uint8_t note,uint8_t channel, uint8_t velocity,UART_HandleTypeDef uart){
 8001328:	b082      	sub	sp, #8
 800132a:	b5b0      	push	{r4, r5, r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	0004      	movs	r4, r0
 8001332:	0008      	movs	r0, r1
 8001334:	0011      	movs	r1, r2
 8001336:	2204      	movs	r2, #4
 8001338:	2520      	movs	r5, #32
 800133a:	46ac      	mov	ip, r5
 800133c:	44bc      	add	ip, r7
 800133e:	4462      	add	r2, ip
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	1c22      	adds	r2, r4, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	1dbb      	adds	r3, r7, #6
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	1d7b      	adds	r3, r7, #5
 8001350:	1c0a      	adds	r2, r1, #0
 8001352:	701a      	strb	r2, [r3, #0]
	uint8_t channelBuffer, noteBuffer, velocityBuffer;
	channelBuffer = 0x0F & channel; //To be sure that channel is 4 bits value
 8001354:	200f      	movs	r0, #15
 8001356:	183b      	adds	r3, r7, r0
 8001358:	1dba      	adds	r2, r7, #6
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	210f      	movs	r1, #15
 800135e:	400a      	ands	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
	noteBuffer = 0x7F & note; //To be sure that note is 7 bits value
 8001362:	240e      	movs	r4, #14
 8001364:	193b      	adds	r3, r7, r4
 8001366:	1dfa      	adds	r2, r7, #7
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	217f      	movs	r1, #127	; 0x7f
 800136c:	400a      	ands	r2, r1
 800136e:	701a      	strb	r2, [r3, #0]
	velocityBuffer = 0x7F & velocity; //To be sure that velocity is 7 bits value
 8001370:	250d      	movs	r5, #13
 8001372:	197b      	adds	r3, r7, r5
 8001374:	1d7a      	adds	r2, r7, #5
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	217f      	movs	r1, #127	; 0x7f
 800137a:	400a      	ands	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = channelBuffer+NOTE_ON;
 800137e:	183b      	adds	r3, r7, r0
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3b70      	subs	r3, #112	; 0x70
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <srv_midi_internal_sendNote+0x90>)
 8001388:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = noteBuffer;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <srv_midi_internal_sendNote+0x90>)
 800138c:	193a      	adds	r2, r7, r4
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = velocityBuffer;
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <srv_midi_internal_sendNote+0x90>)
 8001394:	197a      	adds	r2, r7, r5
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 800139a:	23fa      	movs	r3, #250	; 0xfa
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4906      	ldr	r1, [pc, #24]	; (80013b8 <srv_midi_internal_sendNote+0x90>)
 80013a0:	2224      	movs	r2, #36	; 0x24
 80013a2:	18b8      	adds	r0, r7, r2
 80013a4:	2203      	movs	r2, #3
 80013a6:	f003 ffb9 	bl	800531c <HAL_UART_Transmit>
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bcb0      	pop	{r4, r5, r7}
 80013b2:	bc08      	pop	{r3}
 80013b4:	b002      	add	sp, #8
 80013b6:	4718      	bx	r3
 80013b8:	20000230 	.word	0x20000230

080013bc <srv_midi_internal_controlChange>:

void srv_midi_internal_controlChange(uint8_t controlNumber, uint8_t controlValue, UART_HandleTypeDef uart){
 80013bc:	b082      	sub	sp, #8
 80013be:	b5b0      	push	{r4, r5, r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	0004      	movs	r4, r0
 80013c6:	0008      	movs	r0, r1
 80013c8:	2518      	movs	r5, #24
 80013ca:	1979      	adds	r1, r7, r5
 80013cc:	600a      	str	r2, [r1, #0]
 80013ce:	604b      	str	r3, [r1, #4]
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	1c22      	adds	r2, r4, #0
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	1dbb      	adds	r3, r7, #6
 80013d8:	1c02      	adds	r2, r0, #0
 80013da:	701a      	strb	r2, [r3, #0]
	aTxBuffer[0] = CONTROL_CHANGE;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <srv_midi_internal_controlChange+0x54>)
 80013de:	22b0      	movs	r2, #176	; 0xb0
 80013e0:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = controlNumber;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <srv_midi_internal_controlChange+0x54>)
 80013e4:	1dfa      	adds	r2, r7, #7
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = controlValue;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <srv_midi_internal_controlChange+0x54>)
 80013ec:	1dba      	adds	r2, r7, #6
 80013ee:	7812      	ldrb	r2, [r2, #0]
 80013f0:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&uart, aTxBuffer, 3, 1000);
 80013f2:	23fa      	movs	r3, #250	; 0xfa
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4906      	ldr	r1, [pc, #24]	; (8001410 <srv_midi_internal_controlChange+0x54>)
 80013f8:	1978      	adds	r0, r7, r5
 80013fa:	2203      	movs	r2, #3
 80013fc:	f003 ff8e 	bl	800531c <HAL_UART_Transmit>

}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bcb0      	pop	{r4, r5, r7}
 8001408:	bc08      	pop	{r3}
 800140a:	b002      	add	sp, #8
 800140c:	4718      	bx	r3
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000230 	.word	0x20000230

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_MspInit+0x64>)
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_MspInit+0x64>)
 8001420:	2101      	movs	r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	619a      	str	r2, [r3, #24]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_MspInit+0x64>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2201      	movs	r2, #1
 800142c:	4013      	ands	r3, r2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_MspInit+0x64>)
 8001434:	69da      	ldr	r2, [r3, #28]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x64>)
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	0549      	lsls	r1, r1, #21
 800143c:	430a      	orrs	r2, r1
 800143e:	61da      	str	r2, [r3, #28]
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x64>)
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	055b      	lsls	r3, r3, #21
 8001448:	4013      	ands	r3, r2
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2003      	movs	r0, #3
 8001454:	f001 fa7c 	bl	8002950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001458:	2003      	movs	r0, #3
 800145a:	f001 fa8e 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2004      	movs	r0, #4
 8001464:	f001 fa74 	bl	8002950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001468:	2004      	movs	r0, #4
 800146a:	f001 fa86 	bl	800297a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08b      	sub	sp, #44	; 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001484:	2414      	movs	r4, #20
 8001486:	193b      	adds	r3, r7, r4
 8001488:	0018      	movs	r0, r3
 800148a:	2314      	movs	r3, #20
 800148c:	001a      	movs	r2, r3
 800148e:	2100      	movs	r1, #0
 8001490:	f004 feb3 	bl	80061fa <memset>
  if(hadc->Instance==ADC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2c      	ldr	r2, [pc, #176]	; (800154c <HAL_ADC_MspInit+0xd0>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d151      	bne.n	8001542 <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0089      	lsls	r1, r1, #2
 80014a8:	430a      	orrs	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014ae:	699a      	ldr	r2, [r3, #24]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0309      	lsls	r1, r1, #12
 80014c4:	430a      	orrs	r2, r1
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0289      	lsls	r1, r1, #10
 80014e0:	430a      	orrs	r2, r1
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_ADC_MspInit+0xd4>)
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC_IN11
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = Photo_resistor1_Pin|Photo_resistor2_Pin|Photo_resistor3_Pin|Photo_resistor4_Pin;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	220f      	movs	r2, #15
 80014f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	2203      	movs	r2, #3
 80014fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	193b      	adds	r3, r7, r4
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	193b      	adds	r3, r7, r4
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_ADC_MspInit+0xd8>)
 8001508:	0019      	movs	r1, r3
 800150a:	0010      	movs	r0, r2
 800150c:	f001 fc3e 	bl	8002d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Photo_resistor5_Pin;
 8001510:	0021      	movs	r1, r4
 8001512:	187b      	adds	r3, r7, r1
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	187b      	adds	r3, r7, r1
 800151a:	2203      	movs	r2, #3
 800151c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Photo_resistor5_GPIO_Port, &GPIO_InitStruct);
 8001524:	187a      	adds	r2, r7, r1
 8001526:	2390      	movs	r3, #144	; 0x90
 8001528:	05db      	lsls	r3, r3, #23
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f001 fc2d 	bl	8002d8c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	200c      	movs	r0, #12
 8001538:	f001 fa0a 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800153c:	200c      	movs	r0, #12
 800153e:	f001 fa1c 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b00b      	add	sp, #44	; 0x2c
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	40012400 	.word	0x40012400
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b08b      	sub	sp, #44	; 0x2c
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2414      	movs	r4, #20
 8001562:	193b      	adds	r3, r7, r4
 8001564:	0018      	movs	r0, r3
 8001566:	2314      	movs	r3, #20
 8001568:	001a      	movs	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	f004 fe45 	bl	80061fa <memset>
  if(hi2c->Instance==I2C1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_I2C_MspInit+0xa0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d139      	bne.n	80015ee <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	02c9      	lsls	r1, r1, #11
 8001584:	430a      	orrs	r2, r1
 8001586:	615a      	str	r2, [r3, #20]
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	02db      	lsls	r3, r3, #11
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001596:	0021      	movs	r1, r4
 8001598:	187b      	adds	r3, r7, r1
 800159a:	22c0      	movs	r2, #192	; 0xc0
 800159c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2212      	movs	r2, #18
 80015a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2203      	movs	r2, #3
 80015ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80015b0:	187b      	adds	r3, r7, r1
 80015b2:	2201      	movs	r2, #1
 80015b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	187b      	adds	r3, r7, r1
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_I2C_MspInit+0xa8>)
 80015ba:	0019      	movs	r1, r3
 80015bc:	0010      	movs	r0, r2
 80015be:	f001 fbe5 	bl	8002d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0389      	lsls	r1, r1, #14
 80015cc:	430a      	orrs	r2, r1
 80015ce:	61da      	str	r2, [r3, #28]
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_I2C_MspInit+0xa4>)
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	039b      	lsls	r3, r3, #14
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2017      	movs	r0, #23
 80015e4:	f001 f9b4 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80015e8:	2017      	movs	r0, #23
 80015ea:	f001 f9c6 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b00b      	add	sp, #44	; 0x2c
 80015f4:	bd90      	pop	{r4, r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40005400 	.word	0x40005400
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_TIM_Base_MspInit+0x44>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d113      	bne.n	800163e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_TIM_Base_MspInit+0x48>)
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_TIM_Base_MspInit+0x48>)
 800161c:	2102      	movs	r1, #2
 800161e:	430a      	orrs	r2, r1
 8001620:	61da      	str	r2, [r3, #28]
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_TIM_Base_MspInit+0x48>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2202      	movs	r2, #2
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2010      	movs	r0, #16
 8001634:	f001 f98c 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001638:	2010      	movs	r0, #16
 800163a:	f001 f99e 	bl	800297a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	40000400 	.word	0x40000400
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b08d      	sub	sp, #52	; 0x34
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	241c      	movs	r4, #28
 800165a:	193b      	adds	r3, r7, r4
 800165c:	0018      	movs	r0, r3
 800165e:	2314      	movs	r3, #20
 8001660:	001a      	movs	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	f004 fdc9 	bl	80061fa <memset>
  if(huart->Instance==USART1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a49      	ldr	r2, [pc, #292]	; (8001794 <HAL_UART_MspInit+0x144>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d134      	bne.n	80016dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	01c9      	lsls	r1, r1, #7
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	0289      	lsls	r1, r1, #10
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <HAL_UART_MspInit+0x148>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	029b      	lsls	r3, r3, #10
 80016a4:	4013      	ands	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016aa:	193b      	adds	r3, r7, r4
 80016ac:	22c0      	movs	r2, #192	; 0xc0
 80016ae:	00d2      	lsls	r2, r2, #3
 80016b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	0021      	movs	r1, r4
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	2202      	movs	r2, #2
 80016b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	2203      	movs	r2, #3
 80016c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80016c6:	187b      	adds	r3, r7, r1
 80016c8:	2201      	movs	r2, #1
 80016ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	187a      	adds	r2, r7, r1
 80016ce:	2390      	movs	r3, #144	; 0x90
 80016d0:	05db      	lsls	r3, r3, #23
 80016d2:	0011      	movs	r1, r2
 80016d4:	0018      	movs	r0, r3
 80016d6:	f001 fb59 	bl	8002d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016da:	e056      	b.n	800178a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2e      	ldr	r2, [pc, #184]	; (800179c <HAL_UART_MspInit+0x14c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d151      	bne.n	800178a <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e6:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <HAL_UART_MspInit+0x148>)
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_UART_MspInit+0x148>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0289      	lsls	r1, r1, #10
 80016f0:	430a      	orrs	r2, r1
 80016f2:	61da      	str	r2, [r3, #28]
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_UART_MspInit+0x148>)
 80016f6:	69da      	ldr	r2, [r3, #28]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0289      	lsls	r1, r1, #10
 800170c:	430a      	orrs	r2, r1
 800170e:	615a      	str	r2, [r3, #20]
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_UART_MspInit+0x148>)
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	029b      	lsls	r3, r3, #10
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin;
 800171e:	241c      	movs	r4, #28
 8001720:	193b      	adds	r3, r7, r4
 8001722:	2204      	movs	r2, #4
 8001724:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2202      	movs	r2, #2
 800172a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2203      	movs	r2, #3
 8001736:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2201      	movs	r2, #1
 800173c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 800173e:	193a      	adds	r2, r7, r4
 8001740:	2390      	movs	r3, #144	; 0x90
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f001 fb20 	bl	8002d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART_RX_Pin;
 800174c:	0021      	movs	r1, r4
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2208      	movs	r2, #8
 8001752:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2202      	movs	r2, #2
 8001758:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2202      	movs	r2, #2
 800175e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2203      	movs	r2, #3
 8001764:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001766:	187b      	adds	r3, r7, r1
 8001768:	2201      	movs	r2, #1
 800176a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800176c:	187a      	adds	r2, r7, r1
 800176e:	2390      	movs	r3, #144	; 0x90
 8001770:	05db      	lsls	r3, r3, #23
 8001772:	0011      	movs	r1, r2
 8001774:	0018      	movs	r0, r3
 8001776:	f001 fb09 	bl	8002d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201c      	movs	r0, #28
 8001780:	f001 f8e6 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001784:	201c      	movs	r0, #28
 8001786:	f001 f8f8 	bl	800297a <HAL_NVIC_EnableIRQ>
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b00d      	add	sp, #52	; 0x34
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40013800 	.word	0x40013800
 8001798:	40021000 	.word	0x40021000
 800179c:	40004400 	.word	0x40004400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f8fc 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80017d2:	f001 f979 	bl	8002ac8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017ea:	2001      	movs	r0, #1
 80017ec:	f001 fc5c 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017f0:	2002      	movs	r0, #2
 80017f2:	f001 fc59 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001800:	2010      	movs	r0, #16
 8001802:	f001 fc51 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001806:	2020      	movs	r0, #32
 8001808:	f001 fc4e 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	0018      	movs	r0, r3
 8001812:	f001 fc49 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	0018      	movs	r0, r3
 800181c:	f001 fc44 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	0018      	movs	r0, r3
 8001826:	f001 fc3f 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	0018      	movs	r0, r3
 8001830:	f001 fc3a 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	0018      	movs	r0, r3
 800183a:	f001 fc35 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	0018      	movs	r0, r3
 8001844:	f001 fc30 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	0018      	movs	r0, r3
 800184e:	f001 fc2b 	bl	80030a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <ADC1_IRQHandler+0x14>)
 800185e:	0018      	movs	r0, r3
 8001860:	f000 fc22 	bl	80020a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	200001f0 	.word	0x200001f0

08001870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <TIM3_IRQHandler+0x14>)
 8001876:	0018      	movs	r0, r3
 8001878:	f003 f97a 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	200000a0 	.word	0x200000a0

08001888 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <I2C1_IRQHandler+0x2c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	23e0      	movs	r3, #224	; 0xe0
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4013      	ands	r3, r2
 8001898:	d004      	beq.n	80018a4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <I2C1_IRQHandler+0x2c>)
 800189c:	0018      	movs	r0, r3
 800189e:	f001 fccf 	bl	8003240 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80018a2:	e003      	b.n	80018ac <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <I2C1_IRQHandler+0x2c>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 fcb0 	bl	800320c <HAL_I2C_EV_IRQHandler>
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	20000054 	.word	0x20000054

080018b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <USART2_IRQHandler+0x14>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f003 fdd6 	bl	8005470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	2000016c 	.word	0x2000016c

080018d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e2:	490e      	ldr	r1, [pc, #56]	; (800191c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <LoopForever+0xe>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0b      	ldr	r2, [pc, #44]	; (8001924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f8:	4c0b      	ldr	r4, [pc, #44]	; (8001928 <LoopForever+0x16>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001906:	f7ff ffe3 	bl	80018d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800190a:	f004 fc49 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190e:	f7fe fd71 	bl	80003f4 <main>

08001912 <LoopForever>:

LoopForever:
    b LoopForever
 8001912:	e7fe      	b.n	8001912 <LoopForever>
  ldr   r0, =_estack
 8001914:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001920:	080062e8 	.word	0x080062e8
  ldr r2, =_sbss
 8001924:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001928:	20000258 	.word	0x20000258

0800192c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800192c:	e7fe      	b.n	800192c <DMA1_Channel1_IRQHandler>
	...

08001930 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_Init+0x24>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_Init+0x24>)
 800193a:	2110      	movs	r1, #16
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f809 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001946:	f7ff fd65 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40022000 	.word	0x40022000

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_InitTick+0x5c>)
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_InitTick+0x60>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	0019      	movs	r1, r3
 800196a:	23fa      	movs	r3, #250	; 0xfa
 800196c:	0098      	lsls	r0, r3, #2
 800196e:	f7fe fbcb 	bl	8000108 <__udivsi3>
 8001972:	0003      	movs	r3, r0
 8001974:	0019      	movs	r1, r3
 8001976:	0020      	movs	r0, r4
 8001978:	f7fe fbc6 	bl	8000108 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	0018      	movs	r0, r3
 8001980:	f001 f80b 	bl	800299a <HAL_SYSTICK_Config>
 8001984:	1e03      	subs	r3, r0, #0
 8001986:	d001      	beq.n	800198c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e00f      	b.n	80019ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d80b      	bhi.n	80019aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	2301      	movs	r3, #1
 8001996:	425b      	negs	r3, r3
 8001998:	2200      	movs	r2, #0
 800199a:	0018      	movs	r0, r3
 800199c:	f000 ffd8 	bl	8002950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_InitTick+0x64>)
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b003      	add	sp, #12
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	20000004 	.word	0x20000004
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x1c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	001a      	movs	r2, r3
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x20>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	18d2      	adds	r2, r2, r3
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_IncTick+0x20>)
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	20000234 	.word	0x20000234

080019e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_GetTick+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	20000234 	.word	0x20000234

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fff0 	bl	80019e4 <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	001a      	movs	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	189b      	adds	r3, r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	f7ff ffe0 	bl	80019e4 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	230f      	movs	r3, #15
 8001a4a:	18fb      	adds	r3, r7, r3
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e125      	b.n	8001caa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2234      	movs	r2, #52	; 0x34
 8001a70:	2100      	movs	r1, #0
 8001a72:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff fd00 	bl	800147c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	2210      	movs	r2, #16
 8001a82:	4013      	ands	r3, r2
 8001a84:	d000      	beq.n	8001a88 <HAL_ADC_Init+0x48>
 8001a86:	e103      	b.n	8001c90 <HAL_ADC_Init+0x250>
 8001a88:	230f      	movs	r3, #15
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d000      	beq.n	8001a94 <HAL_ADC_Init+0x54>
 8001a92:	e0fd      	b.n	8001c90 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001a9e:	d000      	beq.n	8001aa2 <HAL_ADC_Init+0x62>
 8001aa0:	e0f6      	b.n	8001c90 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa6:	4a83      	ldr	r2, [pc, #524]	; (8001cb4 <HAL_ADC_Init+0x274>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2202      	movs	r2, #2
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4013      	ands	r3, r2
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d112      	bne.n	8001ae6 <HAL_ADC_Init+0xa6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d009      	beq.n	8001ae2 <HAL_ADC_Init+0xa2>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	401a      	ands	r2, r3
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0xa6>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_ADC_Init+0xa8>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d116      	bne.n	8001b1a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2218      	movs	r2, #24
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	0899      	lsrs	r1, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4964      	ldr	r1, [pc, #400]	; (8001cb8 <HAL_ADC_Init+0x278>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
 8001b2e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7e5b      	ldrb	r3, [r3, #25]
 8001b34:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b36:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e9b      	ldrb	r3, [r3, #26]
 8001b3c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001b3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Init+0x10e>
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_Init+0x110>
 8001b4e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b50:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001b56:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_Init+0x124>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Init+0x126>
 8001b64:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001b66:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2124      	movs	r1, #36	; 0x24
 8001b6c:	5c5b      	ldrb	r3, [r3, r1]
 8001b6e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001b70:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7edb      	ldrb	r3, [r3, #27]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d115      	bne.n	8001bac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e9b      	ldrb	r3, [r3, #26]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0252      	lsls	r2, r2, #9
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	e00b      	b.n	8001bac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	2220      	movs	r2, #32
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69da      	ldr	r2, [r3, #28]
 8001bb0:	23c2      	movs	r3, #194	; 0xc2
 8001bb2:	33ff      	adds	r3, #255	; 0xff
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d007      	beq.n	8001bc8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68d9      	ldr	r1, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	055b      	lsls	r3, r3, #21
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d01b      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d017      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d013      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d00f      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d00b      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	d007      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d003      	beq.n	8001c1c <HAL_ADC_Init+0x1dc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	d112      	bne.n	8001c42 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2107      	movs	r1, #7
 8001c28:	438a      	bics	r2, r1
 8001c2a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6959      	ldr	r1, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	2207      	movs	r2, #7
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_ADC_Init+0x27c>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d10b      	bne.n	8001c6a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4393      	bics	r3, r2
 8001c60:	2201      	movs	r2, #1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c68:	e01c      	b.n	8001ca4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6e:	2212      	movs	r2, #18
 8001c70:	4393      	bics	r3, r2
 8001c72:	2210      	movs	r2, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7e:	2201      	movs	r2, #1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001c86:	230f      	movs	r3, #15
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001c8e:	e009      	b.n	8001ca4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	2210      	movs	r2, #16
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	781b      	ldrb	r3, [r3, #0]
}
 8001caa:	0018      	movs	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	fffffefd 	.word	0xfffffefd
 8001cb8:	fffe0219 	.word	0xfffe0219
 8001cbc:	833fffe7 	.word	0x833fffe7

08001cc0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d138      	bne.n	8001d4e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2234      	movs	r2, #52	; 0x34
 8001ce0:	5c9b      	ldrb	r3, [r3, r2]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_ADC_Start+0x2a>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e038      	b.n	8001d5c <HAL_ADC_Start+0x9c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2234      	movs	r2, #52	; 0x34
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7e5b      	ldrb	r3, [r3, #25]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d007      	beq.n	8001d0a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001cfa:	230f      	movs	r3, #15
 8001cfc:	18fc      	adds	r4, r7, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 fb8f 	bl	8002424 <ADC_Enable>
 8001d06:	0003      	movs	r3, r0
 8001d08:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d0a:	230f      	movs	r3, #15
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d120      	bne.n	8001d56 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_ADC_Start+0xa4>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	2100      	movs	r1, #0
 8001d32:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	221c      	movs	r2, #28
 8001d3a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2104      	movs	r1, #4
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e003      	b.n	8001d56 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d4e:	230f      	movs	r3, #15
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2202      	movs	r2, #2
 8001d54:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d56:	230f      	movs	r3, #15
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	781b      	ldrb	r3, [r3, #0]
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b005      	add	sp, #20
 8001d62:	bd90      	pop	{r4, r7, pc}
 8001d64:	fffff0fe 	.word	0xfffff0fe

08001d68 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d70:	230f      	movs	r3, #15
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2234      	movs	r2, #52	; 0x34
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Stop+0x1e>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e029      	b.n	8001dda <HAL_ADC_Stop+0x72>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2234      	movs	r2, #52	; 0x34
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001d8e:	250f      	movs	r5, #15
 8001d90:	197c      	adds	r4, r7, r5
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fc3a 	bl	800260e <ADC_ConversionStop>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001d9e:	197b      	adds	r3, r7, r5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d112      	bne.n	8001dcc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001da6:	197c      	adds	r4, r7, r5
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 fbbe 	bl	800252c <ADC_Disable>
 8001db0:	0003      	movs	r3, r0
 8001db2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001db4:	197b      	adds	r3, r7, r5
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_ADC_Stop+0x7c>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2234      	movs	r2, #52	; 0x34
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	fffffefe 	.word	0xfffffefe

08001de8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d102      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	e014      	b.n	8001e2a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10b      	bne.n	8001e26 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e12:	2220      	movs	r2, #32
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2234      	movs	r2, #52	; 0x34
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e071      	b.n	8001f0a <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e26:	230c      	movs	r3, #12
 8001e28:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e2a:	f7ff fddb 	bl	80019e4 <HAL_GetTick>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e32:	e01f      	b.n	8001e74 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	d01c      	beq.n	8001e74 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_ADC_PollForConversion+0x68>
 8001e40:	f7ff fdd0 	bl	80019e4 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d211      	bcs.n	8001e74 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d10b      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	2204      	movs	r2, #4
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2234      	movs	r2, #52	; 0x34
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e04a      	b.n	8001f0a <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0d9      	beq.n	8001e34 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d12d      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d129      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2208      	movs	r2, #8
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d122      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d110      	bne.n	8001ee0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	210c      	movs	r1, #12
 8001eca:	438a      	bics	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <HAL_ADC_PollForConversion+0x12c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ede:	e00b      	b.n	8001ef8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7e1b      	ldrb	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	220c      	movs	r2, #12
 8001f06:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	fffffefe 	.word	0xfffffefe

08001f18 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f20:	230f      	movs	r3, #15
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d156      	bne.n	8001fe2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2234      	movs	r2, #52	; 0x34
 8001f38:	5c9b      	ldrb	r3, [r3, r2]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Start_IT+0x2a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e056      	b.n	8001ff0 <HAL_ADC_Start_IT+0xd8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2234      	movs	r2, #52	; 0x34
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7e5b      	ldrb	r3, [r3, #25]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d007      	beq.n	8001f62 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f52:	230f      	movs	r3, #15
 8001f54:	18fc      	adds	r4, r7, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f000 fa63 	bl	8002424 <ADC_Enable>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f62:	230f      	movs	r3, #15
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d13e      	bne.n	8001fea <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <HAL_ADC_Start_IT+0xe0>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	0052      	lsls	r2, r2, #1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2234      	movs	r2, #52	; 0x34
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	221c      	movs	r2, #28
 8001f92:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d110      	bne.n	8001fbe <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	438a      	bics	r2, r1
 8001faa:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2118      	movs	r1, #24
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
          break;
 8001fbc:	e008      	b.n	8001fd0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	211c      	movs	r1, #28
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
          break;
 8001fce:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2104      	movs	r1, #4
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	e003      	b.n	8001fea <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8001fea:	230f      	movs	r3, #15
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b005      	add	sp, #20
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	fffff0fe 	.word	0xfffff0fe

08001ffc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b5b0      	push	{r4, r5, r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	230f      	movs	r3, #15
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2234      	movs	r2, #52	; 0x34
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADC_Stop_IT+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e033      	b.n	8002082 <HAL_ADC_Stop_IT+0x86>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2234      	movs	r2, #52	; 0x34
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002022:	250f      	movs	r5, #15
 8002024:	197c      	adds	r4, r7, r5
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0018      	movs	r0, r3
 800202a:	f000 faf0 	bl	800260e <ADC_ConversionStop>
 800202e:	0003      	movs	r3, r0
 8002030:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002032:	0028      	movs	r0, r5
 8002034:	183b      	adds	r3, r7, r0
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d11b      	bne.n	8002074 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	211c      	movs	r1, #28
 8002048:	438a      	bics	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800204c:	0005      	movs	r5, r0
 800204e:	183c      	adds	r4, r7, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0018      	movs	r0, r3
 8002054:	f000 fa6a 	bl	800252c <ADC_Disable>
 8002058:	0003      	movs	r3, r0
 800205a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800205c:	197b      	adds	r3, r7, r5
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_ADC_Stop_IT+0x90>)
 800206a:	4013      	ands	r3, r2
 800206c:	2201      	movs	r2, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2234      	movs	r2, #52	; 0x34
 8002078:	2100      	movs	r1, #0
 800207a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b004      	add	sp, #16
 8002088:	bdb0      	pop	{r4, r5, r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	fffffefe 	.word	0xfffffefe

08002090 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b002      	add	sp, #8
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2204      	movs	r2, #4
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d106      	bne.n	80020cc <HAL_ADC_IRQHandler+0x24>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d00d      	beq.n	80020e8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2208      	movs	r2, #8
 80020d4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d14f      	bne.n	800217a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d148      	bne.n	800217a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	2210      	movs	r2, #16
 80020ee:	4013      	ands	r3, r2
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	2280      	movs	r2, #128	; 0x80
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	011b      	lsls	r3, r3, #4
 800210a:	4013      	ands	r3, r2
 800210c:	d12d      	bne.n	800216a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002112:	2b00      	cmp	r3, #0
 8002114:	d129      	bne.n	800216a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2208      	movs	r2, #8
 800211e:	4013      	ands	r3, r2
 8002120:	2b08      	cmp	r3, #8
 8002122:	d122      	bne.n	800216a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d110      	bne.n	8002152 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	210c      	movs	r1, #12
 800213c:	438a      	bics	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002144:	4a33      	ldr	r2, [pc, #204]	; (8002214 <HAL_ADC_IRQHandler+0x16c>)
 8002146:	4013      	ands	r3, r2
 8002148:	2201      	movs	r2, #1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	639a      	str	r2, [r3, #56]	; 0x38
 8002150:	e00b      	b.n	800216a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002156:	2220      	movs	r2, #32
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2201      	movs	r2, #1
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fee1 	bl	8000f34 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	220c      	movs	r2, #12
 8002178:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	4013      	ands	r3, r2
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d115      	bne.n	80021b4 <HAL_ADC_IRQHandler+0x10c>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	4013      	ands	r3, r2
 8002192:	2b80      	cmp	r3, #128	; 0x80
 8002194:	d10e      	bne.n	80021b4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	0252      	lsls	r2, r2, #9
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	0018      	movs	r0, r3
 80021a8:	f000 f836 	bl	8002218 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2280      	movs	r2, #128	; 0x80
 80021b2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2210      	movs	r2, #16
 80021bc:	4013      	ands	r3, r2
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d123      	bne.n	800220a <HAL_ADC_IRQHandler+0x162>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2210      	movs	r2, #16
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d11c      	bne.n	800220a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d006      	beq.n	80021e6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d10d      	bne.n	8002202 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	2202      	movs	r2, #2
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2210      	movs	r2, #16
 80021f8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f813 	bl	8002228 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	601a      	str	r2, [r3, #0]
  }

}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b002      	add	sp, #8
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	fffffefe 	.word	0xfffffefe

08002218 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b002      	add	sp, #8
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002242:	230f      	movs	r3, #15
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	055b      	lsls	r3, r3, #21
 8002256:	429a      	cmp	r2, r3
 8002258:	d011      	beq.n	800227e <HAL_ADC_ConfigChannel+0x46>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2b01      	cmp	r3, #1
 8002260:	d00d      	beq.n	800227e <HAL_ADC_ConfigChannel+0x46>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002266:	2b02      	cmp	r3, #2
 8002268:	d009      	beq.n	800227e <HAL_ADC_ConfigChannel+0x46>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	2b03      	cmp	r3, #3
 8002270:	d005      	beq.n	800227e <HAL_ADC_ConfigChannel+0x46>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	2b04      	cmp	r3, #4
 8002278:	d001      	beq.n	800227e <HAL_ADC_ConfigChannel+0x46>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2234      	movs	r2, #52	; 0x34
 8002282:	5c9b      	ldrb	r3, [r3, r2]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x54>
 8002288:	2302      	movs	r3, #2
 800228a:	e0bb      	b.n	8002404 <HAL_ADC_ConfigChannel+0x1cc>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2234      	movs	r2, #52	; 0x34
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d000      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x6a>
 80022a0:	e09f      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a59      	ldr	r2, [pc, #356]	; (800240c <HAL_ADC_ConfigChannel+0x1d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x76>
 80022ac:	e077      	b.n	800239e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	409a      	lsls	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	055b      	lsls	r3, r3, #21
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d037      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d033      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d02f      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d02b      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d027      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d023      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d01f      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2b07      	cmp	r3, #7
 8002306:	d01b      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2107      	movs	r1, #7
 8002314:	400b      	ands	r3, r1
 8002316:	429a      	cmp	r2, r3
 8002318:	d012      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2107      	movs	r1, #7
 8002326:	438a      	bics	r2, r1
 8002328:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6959      	ldr	r1, [r3, #20]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2207      	movs	r2, #7
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b10      	cmp	r3, #16
 8002346:	d003      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x118>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b11      	cmp	r3, #17
 800234e:	d152      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_ADC_ConfigChannel+0x1d8>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d102      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x12a>
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	e001      	b.n	8002366 <HAL_ADC_ConfigChannel+0x12e>
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	03db      	lsls	r3, r3, #15
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <HAL_ADC_ConfigChannel+0x1d8>)
 8002368:	430b      	orrs	r3, r1
 800236a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b10      	cmp	r3, #16
 8002372:	d140      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_ADC_ConfigChannel+0x1dc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4927      	ldr	r1, [pc, #156]	; (8002418 <HAL_ADC_ConfigChannel+0x1e0>)
 800237a:	0018      	movs	r0, r3
 800237c:	f7fd fec4 	bl	8000108 <__udivsi3>
 8002380:	0003      	movs	r3, r0
 8002382:	001a      	movs	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	189b      	adds	r3, r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800238e:	e002      	b.n	8002396 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3b01      	subs	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x158>
 800239c:	e02b      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4099      	lsls	r1, r3
 80023ac:	000b      	movs	r3, r1
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d003      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x190>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b11      	cmp	r3, #17
 80023c6:	d116      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_ADC_ConfigChannel+0x1d8>)
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1a0>
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <HAL_ADC_ConfigChannel+0x1e4>)
 80023d6:	e000      	b.n	80023da <HAL_ADC_ConfigChannel+0x1a2>
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <HAL_ADC_ConfigChannel+0x1e8>)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_ADC_ConfigChannel+0x1d8>)
 80023dc:	400a      	ands	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e009      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	2220      	movs	r2, #32
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80023ee:	230f      	movs	r3, #15
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2234      	movs	r2, #52	; 0x34
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80023fe:	230f      	movs	r3, #15
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	00001001 	.word	0x00001001
 8002410:	40012708 	.word	0x40012708
 8002414:	20000004 	.word	0x20000004
 8002418:	000f4240 	.word	0x000f4240
 800241c:	ff7fffff 	.word	0xff7fffff
 8002420:	ffbfffff 	.word	0xffbfffff

08002424 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2203      	movs	r2, #3
 800243c:	4013      	ands	r3, r2
 800243e:	2b01      	cmp	r3, #1
 8002440:	d112      	bne.n	8002468 <ADC_Enable+0x44>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2201      	movs	r2, #1
 800244a:	4013      	ands	r3, r2
 800244c:	2b01      	cmp	r3, #1
 800244e:	d009      	beq.n	8002464 <ADC_Enable+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	401a      	ands	r2, r3
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	429a      	cmp	r2, r3
 8002462:	d101      	bne.n	8002468 <ADC_Enable+0x44>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <ADC_Enable+0x46>
 8002468:	2300      	movs	r3, #0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d152      	bne.n	8002514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a2a      	ldr	r2, [pc, #168]	; (8002520 <ADC_Enable+0xfc>)
 8002476:	4013      	ands	r3, r2
 8002478:	d00d      	beq.n	8002496 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	2210      	movs	r2, #16
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	2201      	movs	r2, #1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <ADC_Enable+0x100>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	491f      	ldr	r1, [pc, #124]	; (8002528 <ADC_Enable+0x104>)
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7fd fe2b 	bl	8000108 <__udivsi3>
 80024b2:	0003      	movs	r3, r0
 80024b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024b6:	e002      	b.n	80024be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f9      	bne.n	80024b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fa8e 	bl	80019e4 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024cc:	e01b      	b.n	8002506 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ce:	f7ff fa89 	bl	80019e4 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d914      	bls.n	8002506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2201      	movs	r2, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d00d      	beq.n	8002506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	2210      	movs	r2, #16
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2201      	movs	r2, #1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e007      	b.n	8002516 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	2b01      	cmp	r3, #1
 8002512:	d1dc      	bne.n	80024ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	80000017 	.word	0x80000017
 8002524:	20000004 	.word	0x20000004
 8002528:	000f4240 	.word	0x000f4240

0800252c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2203      	movs	r2, #3
 8002540:	4013      	ands	r3, r2
 8002542:	2b01      	cmp	r3, #1
 8002544:	d112      	bne.n	800256c <ADC_Disable+0x40>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	2b01      	cmp	r3, #1
 8002552:	d009      	beq.n	8002568 <ADC_Disable+0x3c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	401a      	ands	r2, r3
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	429a      	cmp	r2, r3
 8002566:	d101      	bne.n	800256c <ADC_Disable+0x40>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <ADC_Disable+0x42>
 800256c:	2300      	movs	r3, #0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d048      	beq.n	8002604 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2205      	movs	r2, #5
 800257a:	4013      	ands	r3, r2
 800257c:	2b01      	cmp	r3, #1
 800257e:	d110      	bne.n	80025a2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2102      	movs	r1, #2
 800258c:	430a      	orrs	r2, r1
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2203      	movs	r2, #3
 8002596:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002598:	f7ff fa24 	bl	80019e4 <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025a0:	e029      	b.n	80025f6 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	2210      	movs	r2, #16
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2201      	movs	r2, #1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e023      	b.n	8002606 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025be:	f7ff fa11 	bl	80019e4 <HAL_GetTick>
 80025c2:	0002      	movs	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d914      	bls.n	80025f6 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	2210      	movs	r2, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	2201      	movs	r2, #1
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	2b01      	cmp	r3, #1
 8002602:	d0dc      	beq.n	80025be <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b004      	add	sp, #16
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2204      	movs	r2, #4
 8002622:	4013      	ands	r3, r2
 8002624:	d03a      	beq.n	800269c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2204      	movs	r2, #4
 800262e:	4013      	ands	r3, r2
 8002630:	2b04      	cmp	r3, #4
 8002632:	d10d      	bne.n	8002650 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800263e:	d107      	bne.n	8002650 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2110      	movs	r1, #16
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002650:	f7ff f9c8 	bl	80019e4 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002658:	e01a      	b.n	8002690 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800265a:	f7ff f9c3 	bl	80019e4 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d913      	bls.n	8002690 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d00d      	beq.n	8002690 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	2210      	movs	r2, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002684:	2201      	movs	r2, #1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e006      	b.n	800269e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2204      	movs	r2, #4
 8002698:	4013      	ands	r3, r2
 800269a:	d1de      	bne.n	800265a <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b004      	add	sp, #16
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2317      	movs	r3, #23
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2234      	movs	r2, #52	; 0x34
 80026c4:	5c9b      	ldrb	r3, [r3, r2]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADCEx_Calibration_Start+0x26>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e08d      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0x142>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2234      	movs	r2, #52	; 0x34
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2203      	movs	r2, #3
 80026de:	4013      	ands	r3, r2
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d112      	bne.n	800270a <HAL_ADCEx_Calibration_Start+0x62>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d009      	beq.n	8002706 <HAL_ADCEx_Calibration_Start+0x5e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	401a      	ands	r2, r3
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	429a      	cmp	r2, r3
 8002704:	d101      	bne.n	800270a <HAL_ADCEx_Calibration_Start+0x62>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_ADCEx_Calibration_Start+0x64>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d15b      	bne.n	80027c8 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <HAL_ADCEx_Calibration_Start+0x14c>)
 8002716:	4013      	ands	r3, r2
 8002718:	2202      	movs	r2, #2
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2203      	movs	r2, #3
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2103      	movs	r1, #3
 8002738:	438a      	bics	r2, r1
 800273a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2180      	movs	r1, #128	; 0x80
 8002748:	0609      	lsls	r1, r1, #24
 800274a:	430a      	orrs	r2, r1
 800274c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800274e:	f7ff f949 	bl	80019e4 <HAL_GetTick>
 8002752:	0003      	movs	r3, r0
 8002754:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002756:	e01d      	b.n	8002794 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002758:	f7ff f944 	bl	80019e4 <HAL_GetTick>
 800275c:	0002      	movs	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d916      	bls.n	8002794 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	0fdb      	lsrs	r3, r3, #31
 800276e:	07da      	lsls	r2, r3, #31
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	429a      	cmp	r2, r3
 8002776:	d10d      	bne.n	8002794 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	2212      	movs	r2, #18
 800277e:	4393      	bics	r3, r2
 8002780:	2210      	movs	r2, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2234      	movs	r2, #52	; 0x34
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e02a      	b.n	80027ea <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0fdb      	lsrs	r3, r3, #31
 800279c:	07da      	lsls	r2, r3, #31
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d0d8      	beq.n	8002758 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68d9      	ldr	r1, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	2203      	movs	r2, #3
 80027bc:	4393      	bics	r3, r2
 80027be:	2201      	movs	r2, #1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
 80027c6:	e009      	b.n	80027dc <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	2220      	movs	r2, #32
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80027d4:	2317      	movs	r3, #23
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2234      	movs	r2, #52	; 0x34
 80027e0:	2100      	movs	r1, #0
 80027e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80027e4:	2317      	movs	r3, #23
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	781b      	ldrb	r3, [r3, #0]
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b006      	add	sp, #24
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	fffffefd 	.word	0xfffffefd

080027f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	0002      	movs	r2, r0
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002804:	1dfb      	adds	r3, r7, #7
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b7f      	cmp	r3, #127	; 0x7f
 800280a:	d809      	bhi.n	8002820 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	001a      	movs	r2, r3
 8002812:	231f      	movs	r3, #31
 8002814:	401a      	ands	r2, r3
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <__NVIC_EnableIRQ+0x30>)
 8002818:	2101      	movs	r1, #1
 800281a:	4091      	lsls	r1, r2
 800281c:	000a      	movs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
  }
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	0002      	movs	r2, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800283a:	1dfb      	adds	r3, r7, #7
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b7f      	cmp	r3, #127	; 0x7f
 8002840:	d828      	bhi.n	8002894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <__NVIC_SetPriority+0xd4>)
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b25b      	sxtb	r3, r3
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	33c0      	adds	r3, #192	; 0xc0
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	589b      	ldr	r3, [r3, r2]
 8002852:	1dfa      	adds	r2, r7, #7
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	0011      	movs	r1, r2
 8002858:	2203      	movs	r2, #3
 800285a:	400a      	ands	r2, r1
 800285c:	00d2      	lsls	r2, r2, #3
 800285e:	21ff      	movs	r1, #255	; 0xff
 8002860:	4091      	lsls	r1, r2
 8002862:	000a      	movs	r2, r1
 8002864:	43d2      	mvns	r2, r2
 8002866:	401a      	ands	r2, r3
 8002868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	22ff      	movs	r2, #255	; 0xff
 8002870:	401a      	ands	r2, r3
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	0018      	movs	r0, r3
 8002878:	2303      	movs	r3, #3
 800287a:	4003      	ands	r3, r0
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002880:	481f      	ldr	r0, [pc, #124]	; (8002900 <__NVIC_SetPriority+0xd4>)
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b25b      	sxtb	r3, r3
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	430a      	orrs	r2, r1
 800288c:	33c0      	adds	r3, #192	; 0xc0
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002892:	e031      	b.n	80028f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <__NVIC_SetPriority+0xd8>)
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	0019      	movs	r1, r3
 800289c:	230f      	movs	r3, #15
 800289e:	400b      	ands	r3, r1
 80028a0:	3b08      	subs	r3, #8
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3306      	adds	r3, #6
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	3304      	adds	r3, #4
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	1dfa      	adds	r2, r7, #7
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	0011      	movs	r1, r2
 80028b4:	2203      	movs	r2, #3
 80028b6:	400a      	ands	r2, r1
 80028b8:	00d2      	lsls	r2, r2, #3
 80028ba:	21ff      	movs	r1, #255	; 0xff
 80028bc:	4091      	lsls	r1, r2
 80028be:	000a      	movs	r2, r1
 80028c0:	43d2      	mvns	r2, r2
 80028c2:	401a      	ands	r2, r3
 80028c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	22ff      	movs	r2, #255	; 0xff
 80028cc:	401a      	ands	r2, r3
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	0018      	movs	r0, r3
 80028d4:	2303      	movs	r3, #3
 80028d6:	4003      	ands	r3, r0
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028dc:	4809      	ldr	r0, [pc, #36]	; (8002904 <__NVIC_SetPriority+0xd8>)
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	001c      	movs	r4, r3
 80028e4:	230f      	movs	r3, #15
 80028e6:	4023      	ands	r3, r4
 80028e8:	3b08      	subs	r3, #8
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	430a      	orrs	r2, r1
 80028ee:	3306      	adds	r3, #6
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	18c3      	adds	r3, r0, r3
 80028f4:	3304      	adds	r3, #4
 80028f6:	601a      	str	r2, [r3, #0]
}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b003      	add	sp, #12
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	e000e100 	.word	0xe000e100
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	1e5a      	subs	r2, r3, #1
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	045b      	lsls	r3, r3, #17
 8002918:	429a      	cmp	r2, r3
 800291a:	d301      	bcc.n	8002920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291c:	2301      	movs	r3, #1
 800291e:	e010      	b.n	8002942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <SysTick_Config+0x44>)
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	3a01      	subs	r2, #1
 8002926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002928:	2301      	movs	r3, #1
 800292a:	425b      	negs	r3, r3
 800292c:	2103      	movs	r1, #3
 800292e:	0018      	movs	r0, r3
 8002930:	f7ff ff7c 	bl	800282c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <SysTick_Config+0x44>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <SysTick_Config+0x44>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b002      	add	sp, #8
 8002948:	bd80      	pop	{r7, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	210f      	movs	r1, #15
 800295c:	187b      	adds	r3, r7, r1
 800295e:	1c02      	adds	r2, r0, #0
 8002960:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	187b      	adds	r3, r7, r1
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	b25b      	sxtb	r3, r3
 800296a:	0011      	movs	r1, r2
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ff5d 	bl	800282c <__NVIC_SetPriority>
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	0002      	movs	r2, r0
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b25b      	sxtb	r3, r3
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ff33 	bl	80027f8 <__NVIC_EnableIRQ>
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b002      	add	sp, #8
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ffaf 	bl	8002908 <SysTick_Config>
 80029aa:	0003      	movs	r3, r0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e020      	b.n	8002a1c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	210e      	movs	r1, #14
 80029e6:	438a      	bics	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	438a      	bics	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2101      	movs	r1, #1
 8002a04:	4091      	lsls	r1, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2221      	movs	r2, #33	; 0x21
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2220      	movs	r2, #32
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	210f      	movs	r1, #15
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2221      	movs	r2, #33	; 0x21
 8002a38:	5c9b      	ldrb	r3, [r3, r2]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d006      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a46:	187b      	adds	r3, r7, r1
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e028      	b.n	8002aa0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	210e      	movs	r1, #14
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	2101      	movs	r1, #1
 8002a78:	4091      	lsls	r1, r2
 8002a7a:	000a      	movs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	4798      	blx	r3
    } 
  }
  return status;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
}
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2221      	movs	r2, #33	; 0x21
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	b2db      	uxtb	r3, r3
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002ac8:	b5b0      	push	{r4, r5, r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002ad2:	4b6e      	ldr	r3, [pc, #440]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b10      	cmp	r3, #16
 8002adc:	d005      	beq.n	8002aea <HAL_FLASH_IRQHandler+0x22>
 8002ade:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d10f      	bne.n	8002b0a <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002aea:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002af0:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	4252      	negs	r2, r2
 8002af6:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002af8:	f000 f8fa 	bl	8002cf0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 f8d2 	bl	8002ca8 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b04:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002b0a:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d000      	beq.n	8002b18 <HAL_FLASH_IRQHandler+0x50>
 8002b16:	e0a1      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b18:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002b1e:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d100      	bne.n	8002b2a <HAL_FLASH_IRQHandler+0x62>
 8002b28:	e098      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d132      	bne.n	8002b9a <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002b34:	4b56      	ldr	r3, [pc, #344]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b3c:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01b      	beq.n	8002b7e <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8002b46:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f8a2 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002b54:	4b4e      	ldr	r3, [pc, #312]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2280      	movs	r2, #128	; 0x80
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	4463      	add	r3, ip
 8002b60:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002b62:	4b4b      	ldr	r3, [pc, #300]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b68:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002b6e:	2102      	movs	r1, #2
 8002b70:	438a      	bics	r2, r1
 8002b72:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f8ea 	bl	8002d50 <FLASH_PageErase>
 8002b7c:	e06e      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	425b      	negs	r3, r3
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 f880 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>
 8002b98:	e060      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d10c      	bne.n	8002bbe <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b38      	ldr	r3, [pc, #224]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002baa:	2104      	movs	r1, #4
 8002bac:	438a      	bics	r2, r1
 8002bae:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f000 f871 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002bb6:	4b36      	ldr	r3, [pc, #216]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e04e      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	1e5a      	subs	r2, r3, #1
 8002bc4:	4b32      	ldr	r3, [pc, #200]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bc6:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002bc8:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d021      	beq.n	8002c14 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bd8:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	0419      	lsls	r1, r3, #16
 8002be8:	0c14      	lsrs	r4, r2, #16
 8002bea:	430c      	orrs	r4, r1
 8002bec:	0c1d      	lsrs	r5, r3, #16
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002bf0:	611c      	str	r4, [r3, #16]
 8002bf2:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	b292      	uxth	r2, r2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0011      	movs	r1, r2
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f853 	bl	8002cb8 <FLASH_Program_HalfWord>
 8002c12:	e023      	b.n	8002c5c <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002c14:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d105      	bne.n	8002c2a <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 f838 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>
 8002c28:	e011      	b.n	8002c4e <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d106      	bne.n	8002c42 <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	3b02      	subs	r3, #2
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f000 f82c 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	3b06      	subs	r3, #6
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f825 	bl	8002c98 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	4252      	negs	r2, r2
 8002c54:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10e      	bne.n	8002c84 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002c6c:	2107      	movs	r1, #7
 8002c6e:	438a      	bics	r2, r1
 8002c70:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_FLASH_IRQHandler+0x1c4>)
 8002c78:	4906      	ldr	r1, [pc, #24]	; (8002c94 <HAL_FLASH_IRQHandler+0x1cc>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <HAL_FLASH_IRQHandler+0x1c8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	761a      	strb	r2, [r3, #24]
  }
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	20000238 	.word	0x20000238
 8002c94:	ffffebff 	.word	0xffffebff

08002c98 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	000a      	movs	r2, r1
 8002cc2:	1cbb      	adds	r3, r7, #2
 8002cc4:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <FLASH_Program_HalfWord+0x30>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <FLASH_Program_HalfWord+0x34>)
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <FLASH_Program_HalfWord+0x34>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1cba      	adds	r2, r7, #2
 8002cdc:	8812      	ldrh	r2, [r2, #0]
 8002cde:	801a      	strh	r2, [r3, #0]
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000238 	.word	0x20000238
 8002cec:	40022000 	.word	0x40022000

08002cf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002cfa:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <FLASH_SetErrorCode+0x58>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2210      	movs	r2, #16
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d109      	bne.n	8002d1a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <FLASH_SetErrorCode+0x5c>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <FLASH_SetErrorCode+0x5c>)
 8002d10:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2210      	movs	r2, #16
 8002d16:	4313      	orrs	r3, r2
 8002d18:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <FLASH_SetErrorCode+0x58>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d109      	bne.n	8002d3a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d26:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <FLASH_SetErrorCode+0x5c>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <FLASH_SetErrorCode+0x5c>)
 8002d30:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	4313      	orrs	r3, r2
 8002d38:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d3a:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <FLASH_SetErrorCode+0x58>)
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
}  
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	20000238 	.word	0x20000238

08002d50 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <FLASH_PageErase+0x34>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d64:	2102      	movs	r1, #2
 8002d66:	430a      	orrs	r2, r1
 8002d68:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <FLASH_PageErase+0x38>)
 8002d76:	2140      	movs	r1, #64	; 0x40
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	611a      	str	r2, [r3, #16]
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000238 	.word	0x20000238
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d9a:	e14f      	b.n	800303c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4091      	lsls	r1, r2
 8002da6:	000a      	movs	r2, r1
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d100      	bne.n	8002db4 <HAL_GPIO_Init+0x28>
 8002db2:	e140      	b.n	8003036 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d005      	beq.n	8002dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d130      	bne.n	8002e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	0013      	movs	r3, r2
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e02:	2201      	movs	r2, #1
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
 8002e08:	0013      	movs	r3, r2
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	2201      	movs	r2, #1
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d017      	beq.n	8002e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2203      	movs	r2, #3
 8002e46:	409a      	lsls	r2, r3
 8002e48:	0013      	movs	r3, r2
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	409a      	lsls	r2, r3
 8002e5c:	0013      	movs	r3, r2
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d123      	bne.n	8002ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	58d3      	ldr	r3, [r2, r3]
 8002e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2207      	movs	r2, #7
 8002e88:	4013      	ands	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	409a      	lsls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	43da      	mvns	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2107      	movs	r1, #7
 8002ea2:	400b      	ands	r3, r1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	6939      	ldr	r1, [r7, #16]
 8002ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2203      	movs	r2, #3
 8002edc:	401a      	ands	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	4013      	ands	r3, r2
 8002efc:	d100      	bne.n	8002f00 <HAL_GPIO_Init+0x174>
 8002efe:	e09a      	b.n	8003036 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f00:	4b54      	ldr	r3, [pc, #336]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f06:	2101      	movs	r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	4b51      	ldr	r3, [pc, #324]	; (8003054 <HAL_GPIO_Init+0x2c8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f18:	4a4f      	ldr	r2, [pc, #316]	; (8003058 <HAL_GPIO_Init+0x2cc>)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	589b      	ldr	r3, [r3, r2]
 8002f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	220f      	movs	r2, #15
 8002f30:	409a      	lsls	r2, r3
 8002f32:	0013      	movs	r3, r2
 8002f34:	43da      	mvns	r2, r3
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	2390      	movs	r3, #144	; 0x90
 8002f40:	05db      	lsls	r3, r3, #23
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x1e2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a44      	ldr	r2, [pc, #272]	; (800305c <HAL_GPIO_Init+0x2d0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x1de>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a43      	ldr	r2, [pc, #268]	; (8003060 <HAL_GPIO_Init+0x2d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x1da>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a42      	ldr	r2, [pc, #264]	; (8003064 <HAL_GPIO_Init+0x2d8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x1d6>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f62:	2305      	movs	r3, #5
 8002f64:	e004      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_GPIO_Init+0x1e4>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	2103      	movs	r1, #3
 8002f74:	400a      	ands	r2, r1
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	4093      	lsls	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f80:	4935      	ldr	r1, [pc, #212]	; (8003058 <HAL_GPIO_Init+0x2cc>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	025b      	lsls	r3, r3, #9
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fb2:	4b2d      	ldr	r3, [pc, #180]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fb8:	4b2b      	ldr	r3, [pc, #172]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	029b      	lsls	r3, r3, #10
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	035b      	lsls	r3, r3, #13
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800300c:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	43da      	mvns	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	039b      	lsls	r3, r3, #14
 8003024:	4013      	ands	r3, r2
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_GPIO_Init+0x2dc>)
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	3301      	adds	r3, #1
 800303a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	40da      	lsrs	r2, r3
 8003044:	1e13      	subs	r3, r2, #0
 8003046:	d000      	beq.n	800304a <HAL_GPIO_Init+0x2be>
 8003048:	e6a8      	b.n	8002d9c <HAL_GPIO_Init+0x10>
  } 
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b006      	add	sp, #24
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40010000 	.word	0x40010000
 800305c:	48000400 	.word	0x48000400
 8003060:	48000800 	.word	0x48000800
 8003064:	48000c00 	.word	0x48000c00
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	000a      	movs	r2, r1
 8003076:	1cbb      	adds	r3, r7, #2
 8003078:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	1cba      	adds	r2, r7, #2
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	4013      	ands	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003086:	230f      	movs	r3, #15
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e003      	b.n	8003098 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003090:	230f      	movs	r3, #15
 8003092:	18fb      	adds	r3, r7, r3
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003098:	230f      	movs	r3, #15
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
  }
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	0002      	movs	r2, r0
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	1dba      	adds	r2, r7, #6
 80030ba:	8812      	ldrh	r2, [r2, #0]
 80030bc:	4013      	ands	r3, r2
 80030be:	d008      	beq.n	80030d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80030c2:	1dba      	adds	r2, r7, #6
 80030c4:	8812      	ldrh	r2, [r2, #0]
 80030c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7fd fba7 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	40010400 	.word	0x40010400

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e082      	b.n	80031f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2241      	movs	r2, #65	; 0x41
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2240      	movs	r2, #64	; 0x40
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f7fe fa25 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2241      	movs	r2, #65	; 0x41
 8003112:	2124      	movs	r1, #36	; 0x24
 8003114:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2101      	movs	r1, #1
 8003122:	438a      	bics	r2, r1
 8003124:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4934      	ldr	r1, [pc, #208]	; (8003200 <HAL_I2C_Init+0x120>)
 8003130:	400a      	ands	r2, r1
 8003132:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4931      	ldr	r1, [pc, #196]	; (8003204 <HAL_I2C_Init+0x124>)
 8003140:	400a      	ands	r2, r1
 8003142:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0209      	lsls	r1, r1, #8
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e007      	b.n	800316e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2184      	movs	r1, #132	; 0x84
 8003168:	0209      	lsls	r1, r1, #8
 800316a:	430a      	orrs	r2, r1
 800316c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d104      	bne.n	8003180 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2280      	movs	r2, #128	; 0x80
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	491f      	ldr	r1, [pc, #124]	; (8003208 <HAL_I2C_Init+0x128>)
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	491a      	ldr	r1, [pc, #104]	; (8003204 <HAL_I2C_Init+0x124>)
 800319c:	400a      	ands	r2, r1
 800319e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	431a      	orrs	r2, r3
 80031aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69d9      	ldr	r1, [r3, #28]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1a      	ldr	r2, [r3, #32]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2241      	movs	r2, #65	; 0x41
 80031e4:	2120      	movs	r1, #32
 80031e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2242      	movs	r2, #66	; 0x42
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	f0ffffff 	.word	0xf0ffffff
 8003204:	ffff7fff 	.word	0xffff7fff
 8003208:	02008000 	.word	0x02008000

0800320c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	68f9      	ldr	r1, [r7, #12]
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
  }
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	001a      	movs	r2, r3
 800325e:	2301      	movs	r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d010      	beq.n	8003286 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	09db      	lsrs	r3, r3, #7
 8003268:	001a      	movs	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800326e:	d00a      	beq.n	8003286 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2201      	movs	r2, #1
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	0052      	lsls	r2, r2, #1
 8003284:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	0a9b      	lsrs	r3, r3, #10
 800328a:	001a      	movs	r2, r3
 800328c:	2301      	movs	r3, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d010      	beq.n	80032b4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	09db      	lsrs	r3, r3, #7
 8003296:	001a      	movs	r2, r3
 8003298:	2301      	movs	r3, #1
 800329a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800329c:	d00a      	beq.n	80032b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	2208      	movs	r2, #8
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	00d2      	lsls	r2, r2, #3
 80032b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	0a5b      	lsrs	r3, r3, #9
 80032b8:	001a      	movs	r2, r3
 80032ba:	2301      	movs	r3, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d010      	beq.n	80032e2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	09db      	lsrs	r3, r3, #7
 80032c4:	001a      	movs	r2, r3
 80032c6:	2301      	movs	r3, #1
 80032c8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032ca:	d00a      	beq.n	80032e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	2202      	movs	r2, #2
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	220b      	movs	r2, #11
 80032ec:	4013      	ands	r3, r2
 80032ee:	d005      	beq.n	80032fc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fbd8 	bl	8003aac <I2C_ITError>
  }
}
 80032fc:	46c0      	nop			; (mov r8, r8)
 80032fe:	46bd      	mov	sp, r7
 8003300:	b006      	add	sp, #24
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	0008      	movs	r0, r1
 800332e:	0011      	movs	r1, r2
 8003330:	1cfb      	adds	r3, r7, #3
 8003332:	1c02      	adds	r2, r0, #0
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	003b      	movs	r3, r7
 8003338:	1c0a      	adds	r2, r1, #0
 800333a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	5c9b      	ldrb	r3, [r3, r2]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <I2C_Slave_ISR_IT+0x24>
 8003394:	2302      	movs	r3, #2
 8003396:	e0fa      	b.n	800358e <I2C_Slave_ISR_IT+0x21a>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2240      	movs	r2, #64	; 0x40
 800339c:	2101      	movs	r1, #1
 800339e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	001a      	movs	r2, r3
 80033a6:	2301      	movs	r3, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	001a      	movs	r2, r3
 80033b2:	2301      	movs	r3, #1
 80033b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033b6:	d005      	beq.n	80033c4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0011      	movs	r1, r2
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f9f6 	bl	80037b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	001a      	movs	r2, r3
 80033ca:	2301      	movs	r3, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	d054      	beq.n	800347a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	001a      	movs	r2, r3
 80033d6:	2301      	movs	r3, #1
 80033d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033da:	d04e      	beq.n	800347a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d12d      	bne.n	8003442 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2241      	movs	r2, #65	; 0x41
 80033ea:	5c9b      	ldrb	r3, [r3, r2]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b28      	cmp	r3, #40	; 0x28
 80033f0:	d10b      	bne.n	800340a <I2C_Slave_ISR_IT+0x96>
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	049b      	lsls	r3, r3, #18
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d106      	bne.n	800340a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0011      	movs	r1, r2
 8003402:	0018      	movs	r0, r3
 8003404:	f000 faf8 	bl	80039f8 <I2C_ITListenCplt>
 8003408:	e036      	b.n	8003478 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2241      	movs	r2, #65	; 0x41
 800340e:	5c9b      	ldrb	r3, [r3, r2]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b29      	cmp	r3, #41	; 0x29
 8003414:	d110      	bne.n	8003438 <I2C_Slave_ISR_IT+0xc4>
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	4a5f      	ldr	r2, [pc, #380]	; (8003598 <I2C_Slave_ISR_IT+0x224>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00c      	beq.n	8003438 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2210      	movs	r2, #16
 8003424:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fc4a 	bl	8003cc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f957 	bl	80036e4 <I2C_ITSlaveSeqCplt>
 8003436:	e01f      	b.n	8003478 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003440:	e09d      	b.n	800357e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2210      	movs	r2, #16
 8003448:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	2204      	movs	r2, #4
 8003450:	431a      	orrs	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <I2C_Slave_ISR_IT+0xf4>
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	045b      	lsls	r3, r3, #17
 8003462:	429a      	cmp	r2, r3
 8003464:	d000      	beq.n	8003468 <I2C_Slave_ISR_IT+0xf4>
 8003466:	e08a      	b.n	800357e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fb1b 	bl	8003aac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003476:	e082      	b.n	800357e <I2C_Slave_ISR_IT+0x20a>
 8003478:	e081      	b.n	800357e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	001a      	movs	r2, r3
 8003480:	2301      	movs	r3, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d031      	beq.n	80034ea <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	001a      	movs	r2, r3
 800348c:	2301      	movs	r3, #1
 800348e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003490:	d02b      	beq.n	80034ea <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d154      	bne.n	8003582 <I2C_Slave_ISR_IT+0x20e>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <I2C_Slave_ISR_IT+0x224>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d050      	beq.n	8003582 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 f8fe 	bl	80036e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034e8:	e04b      	b.n	8003582 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	08db      	lsrs	r3, r3, #3
 80034ee:	001a      	movs	r2, r3
 80034f0:	2301      	movs	r3, #1
 80034f2:	4013      	ands	r3, r2
 80034f4:	d00c      	beq.n	8003510 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	001a      	movs	r2, r3
 80034fc:	2301      	movs	r3, #1
 80034fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003500:	d006      	beq.n	8003510 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f847 	bl	800359c <I2C_ITAddrCplt>
 800350e:	e039      	b.n	8003584 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	001a      	movs	r2, r3
 8003516:	2301      	movs	r3, #1
 8003518:	4013      	ands	r3, r2
 800351a:	d033      	beq.n	8003584 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	001a      	movs	r2, r3
 8003522:	2301      	movs	r3, #1
 8003524:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003526:	d02d      	beq.n	8003584 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d018      	beq.n	8003564 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
 8003562:	e00f      	b.n	8003584 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	045b      	lsls	r3, r3, #17
 800356a:	429a      	cmp	r2, r3
 800356c:	d002      	beq.n	8003574 <I2C_Slave_ISR_IT+0x200>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0018      	movs	r0, r3
 8003578:	f000 f8b4 	bl	80036e4 <I2C_ITSlaveSeqCplt>
 800357c:	e002      	b.n	8003584 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	e000      	b.n	8003584 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8003582:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	2100      	movs	r1, #0
 800358a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b006      	add	sp, #24
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	ffff0000 	.word	0xffff0000

0800359c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2241      	movs	r2, #65	; 0x41
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	001a      	movs	r2, r3
 80035b0:	2328      	movs	r3, #40	; 0x28
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b28      	cmp	r3, #40	; 0x28
 80035b6:	d000      	beq.n	80035ba <I2C_ITAddrCplt+0x1e>
 80035b8:	e088      	b.n	80036cc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	250f      	movs	r5, #15
 80035c6:	197b      	adds	r3, r7, r5
 80035c8:	2101      	movs	r1, #1
 80035ca:	400a      	ands	r2, r1
 80035cc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	0c1b      	lsrs	r3, r3, #16
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	200c      	movs	r0, #12
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	21fe      	movs	r1, #254	; 0xfe
 80035de:	400a      	ands	r2, r1
 80035e0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	240a      	movs	r4, #10
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	0592      	lsls	r2, r2, #22
 80035f0:	0d92      	lsrs	r2, r2, #22
 80035f2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	2308      	movs	r3, #8
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	21fe      	movs	r1, #254	; 0xfe
 8003602:	400a      	ands	r2, r1
 8003604:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d148      	bne.n	80036a0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800360e:	0021      	movs	r1, r4
 8003610:	187b      	adds	r3, r7, r1
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	09db      	lsrs	r3, r3, #7
 8003616:	b29a      	uxth	r2, r3
 8003618:	183b      	adds	r3, r7, r0
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	4053      	eors	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	001a      	movs	r2, r3
 8003622:	2306      	movs	r3, #6
 8003624:	4013      	ands	r3, r2
 8003626:	d120      	bne.n	800366a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003628:	183b      	adds	r3, r7, r0
 800362a:	187a      	adds	r2, r7, r1
 800362c:	8812      	ldrh	r2, [r2, #0]
 800362e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b02      	cmp	r3, #2
 8003640:	d14c      	bne.n	80036dc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2208      	movs	r2, #8
 800364e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	2100      	movs	r1, #0
 8003656:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003658:	183b      	adds	r3, r7, r0
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	197b      	adds	r3, r7, r5
 800365e:	7819      	ldrb	r1, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff fe5e 	bl	8003324 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003668:	e038      	b.n	80036dc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800366a:	240c      	movs	r4, #12
 800366c:	193b      	adds	r3, r7, r4
 800366e:	2208      	movs	r2, #8
 8003670:	18ba      	adds	r2, r7, r2
 8003672:	8812      	ldrh	r2, [r2, #0]
 8003674:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	021a      	lsls	r2, r3, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0011      	movs	r1, r2
 800367e:	0018      	movs	r0, r3
 8003680:	f000 fb60 	bl	8003d44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	2100      	movs	r1, #0
 800368a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800368c:	193b      	adds	r3, r7, r4
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	230f      	movs	r3, #15
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	7819      	ldrb	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff fe43 	bl	8003324 <HAL_I2C_AddrCallback>
}
 800369e:	e01d      	b.n	80036dc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 fb4b 	bl	8003d44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2240      	movs	r2, #64	; 0x40
 80036b2:	2100      	movs	r1, #0
 80036b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036b6:	230c      	movs	r3, #12
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	881a      	ldrh	r2, [r3, #0]
 80036bc:	230f      	movs	r3, #15
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	7819      	ldrb	r1, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fe2d 	bl	8003324 <HAL_I2C_AddrCallback>
}
 80036ca:	e007      	b.n	80036dc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bdb0      	pop	{r4, r5, r7, pc}

080036e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2242      	movs	r2, #66	; 0x42
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	0b9b      	lsrs	r3, r3, #14
 8003700:	001a      	movs	r2, r3
 8003702:	2301      	movs	r3, #1
 8003704:	4013      	ands	r3, r2
 8003706:	d008      	beq.n	800371a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <I2C_ITSlaveSeqCplt+0xc4>)
 8003714:	400a      	ands	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e00d      	b.n	8003736 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0bdb      	lsrs	r3, r3, #15
 800371e:	001a      	movs	r2, r3
 8003720:	2301      	movs	r3, #1
 8003722:	4013      	ands	r3, r2
 8003724:	d007      	beq.n	8003736 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	491e      	ldr	r1, [pc, #120]	; (80037ac <I2C_ITSlaveSeqCplt+0xc8>)
 8003732:	400a      	ands	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2241      	movs	r2, #65	; 0x41
 800373a:	5c9b      	ldrb	r3, [r3, r2]
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b29      	cmp	r3, #41	; 0x29
 8003740:	d114      	bne.n	800376c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2241      	movs	r2, #65	; 0x41
 8003746:	2128      	movs	r1, #40	; 0x28
 8003748:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2221      	movs	r2, #33	; 0x21
 800374e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2101      	movs	r1, #1
 8003754:	0018      	movs	r0, r3
 8003756:	f000 faf5 	bl	8003d44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff fdcd 	bl	8003304 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800376a:	e019      	b.n	80037a0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2241      	movs	r2, #65	; 0x41
 8003770:	5c9b      	ldrb	r3, [r3, r2]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b2a      	cmp	r3, #42	; 0x2a
 8003776:	d113      	bne.n	80037a0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2241      	movs	r2, #65	; 0x41
 800377c:	2128      	movs	r1, #40	; 0x28
 800377e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2222      	movs	r2, #34	; 0x22
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2102      	movs	r1, #2
 800378a:	0018      	movs	r0, r3
 800378c:	f000 fada 	bl	8003d44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f7ff fdba 	bl	8003314 <HAL_I2C_SlaveRxCpltCallback>
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	ffffbfff 	.word	0xffffbfff
 80037ac:	ffff7fff 	.word	0xffff7fff

080037b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037c6:	200f      	movs	r0, #15
 80037c8:	183b      	adds	r3, r7, r0
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	2141      	movs	r1, #65	; 0x41
 80037ce:	5c52      	ldrb	r2, [r2, r1]
 80037d0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b21      	cmp	r3, #33	; 0x21
 80037e0:	d003      	beq.n	80037ea <I2C_ITSlaveCplt+0x3a>
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b29      	cmp	r3, #41	; 0x29
 80037e8:	d109      	bne.n	80037fe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80037ea:	4a7d      	ldr	r2, [pc, #500]	; (80039e0 <I2C_ITSlaveCplt+0x230>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 faa7 	bl	8003d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2221      	movs	r2, #33	; 0x21
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
 80037fc:	e011      	b.n	8003822 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037fe:	220f      	movs	r2, #15
 8003800:	18bb      	adds	r3, r7, r2
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b22      	cmp	r3, #34	; 0x22
 8003806:	d003      	beq.n	8003810 <I2C_ITSlaveCplt+0x60>
 8003808:	18bb      	adds	r3, r7, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b2a      	cmp	r3, #42	; 0x2a
 800380e:	d108      	bne.n	8003822 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003810:	4a74      	ldr	r2, [pc, #464]	; (80039e4 <I2C_ITSlaveCplt+0x234>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f000 fa94 	bl	8003d44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2222      	movs	r2, #34	; 0x22
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2180      	movs	r1, #128	; 0x80
 800382e:	0209      	lsls	r1, r1, #8
 8003830:	430a      	orrs	r2, r1
 8003832:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	496a      	ldr	r1, [pc, #424]	; (80039e8 <I2C_ITSlaveCplt+0x238>)
 8003840:	400a      	ands	r2, r1
 8003842:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fa3b 	bl	8003cc2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	0b9b      	lsrs	r3, r3, #14
 8003850:	001a      	movs	r2, r3
 8003852:	2301      	movs	r3, #1
 8003854:	4013      	ands	r3, r2
 8003856:	d013      	beq.n	8003880 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4962      	ldr	r1, [pc, #392]	; (80039ec <I2C_ITSlaveCplt+0x23c>)
 8003864:	400a      	ands	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	2b00      	cmp	r3, #0
 800386e:	d020      	beq.n	80038b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800387e:	e018      	b.n	80038b2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	0bdb      	lsrs	r3, r3, #15
 8003884:	001a      	movs	r2, r3
 8003886:	2301      	movs	r3, #1
 8003888:	4013      	ands	r3, r2
 800388a:	d012      	beq.n	80038b2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4956      	ldr	r1, [pc, #344]	; (80039f0 <I2C_ITSlaveCplt+0x240>)
 8003898:	400a      	ands	r2, r1
 800389a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	089b      	lsrs	r3, r3, #2
 80038b6:	001a      	movs	r2, r3
 80038b8:	2301      	movs	r3, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d020      	beq.n	8003900 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2204      	movs	r2, #4
 80038c2:	4393      	bics	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	2204      	movs	r2, #4
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2242      	movs	r2, #66	; 0x42
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	2b00      	cmp	r3, #0
 800392a:	d013      	beq.n	8003954 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0011      	movs	r1, r2
 8003934:	0018      	movs	r0, r3
 8003936:	f000 f8b9 	bl	8003aac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2241      	movs	r2, #65	; 0x41
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b28      	cmp	r3, #40	; 0x28
 8003944:	d147      	bne.n	80039d6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f000 f853 	bl	80039f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003952:	e040      	b.n	80039d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a26      	ldr	r2, [pc, #152]	; (80039f4 <I2C_ITSlaveCplt+0x244>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d016      	beq.n	800398c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7ff febf 	bl	80036e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a22      	ldr	r2, [pc, #136]	; (80039f4 <I2C_ITSlaveCplt+0x244>)
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2241      	movs	r2, #65	; 0x41
 8003970:	2120      	movs	r1, #32
 8003972:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	2100      	movs	r1, #0
 8003980:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0018      	movs	r0, r3
 8003986:	f7ff fcdd 	bl	8003344 <HAL_I2C_ListenCpltCallback>
}
 800398a:	e024      	b.n	80039d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2241      	movs	r2, #65	; 0x41
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b22      	cmp	r3, #34	; 0x22
 8003996:	d10f      	bne.n	80039b8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2241      	movs	r2, #65	; 0x41
 800399c:	2120      	movs	r1, #32
 800399e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2240      	movs	r2, #64	; 0x40
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff fcaf 	bl	8003314 <HAL_I2C_SlaveRxCpltCallback>
}
 80039b6:	e00e      	b.n	80039d6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2241      	movs	r2, #65	; 0x41
 80039bc:	2120      	movs	r1, #32
 80039be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2240      	movs	r2, #64	; 0x40
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f7ff fc97 	bl	8003304 <HAL_I2C_SlaveTxCpltCallback>
}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	00008001 	.word	0x00008001
 80039e4:	00008002 	.word	0x00008002
 80039e8:	fe00e800 	.word	0xfe00e800
 80039ec:	ffffbfff 	.word	0xffffbfff
 80039f0:	ffff7fff 	.word	0xffff7fff
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <I2C_ITListenCplt+0xac>)
 8003a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	; 0x41
 8003a12:	2120      	movs	r1, #32
 8003a14:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2242      	movs	r2, #66	; 0x42
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	001a      	movs	r2, r3
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	2204      	movs	r2, #4
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <I2C_ITListenCplt+0xb0>)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 f961 	bl	8003d44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2210      	movs	r2, #16
 8003a88:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2240      	movs	r2, #64	; 0x40
 8003a8e:	2100      	movs	r1, #0
 8003a90:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff fc55 	bl	8003344 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	ffff0000 	.word	0xffff0000
 8003aa8:	00008003 	.word	0x00008003

08003aac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ab6:	200f      	movs	r0, #15
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	2141      	movs	r1, #65	; 0x41
 8003abe:	5c52      	ldrb	r2, [r2, r1]
 8003ac0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2242      	movs	r2, #66	; 0x42
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a62      	ldr	r2, [pc, #392]	; (8003c58 <I2C_ITError+0x1ac>)
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003ae2:	183b      	adds	r3, r7, r0
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b28      	cmp	r3, #40	; 0x28
 8003ae8:	d007      	beq.n	8003afa <I2C_ITError+0x4e>
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b29      	cmp	r3, #41	; 0x29
 8003af0:	d003      	beq.n	8003afa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003af2:	183b      	adds	r3, r7, r0
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b2a      	cmp	r3, #42	; 0x2a
 8003af8:	d10c      	bne.n	8003b14 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2103      	movs	r1, #3
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 f920 	bl	8003d44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2241      	movs	r2, #65	; 0x41
 8003b08:	2128      	movs	r1, #40	; 0x28
 8003b0a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a53      	ldr	r2, [pc, #332]	; (8003c5c <I2C_ITError+0x1b0>)
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34
 8003b12:	e012      	b.n	8003b3a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b14:	4a52      	ldr	r2, [pc, #328]	; (8003c60 <I2C_ITError+0x1b4>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0011      	movs	r1, r2
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f000 f912 	bl	8003d44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2241      	movs	r2, #65	; 0x41
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b60      	cmp	r3, #96	; 0x60
 8003b2a:	d003      	beq.n	8003b34 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2241      	movs	r2, #65	; 0x41
 8003b30:	2120      	movs	r1, #32
 8003b32:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03b      	beq.n	8003bc0 <I2C_ITError+0x114>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b11      	cmp	r3, #17
 8003b4c:	d002      	beq.n	8003b54 <I2C_ITError+0xa8>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b21      	cmp	r3, #33	; 0x21
 8003b52:	d135      	bne.n	8003bc0 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	01db      	lsls	r3, r3, #7
 8003b5e:	401a      	ands	r2, r3
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	01db      	lsls	r3, r3, #7
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d107      	bne.n	8003b78 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	493c      	ldr	r1, [pc, #240]	; (8003c64 <I2C_ITError+0x1b8>)
 8003b74:	400a      	ands	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fe ff96 	bl	8002aae <HAL_DMA_GetState>
 8003b82:	0003      	movs	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d016      	beq.n	8003bb6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4a36      	ldr	r2, [pc, #216]	; (8003c68 <I2C_ITError+0x1bc>)
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2240      	movs	r2, #64	; 0x40
 8003b94:	2100      	movs	r1, #0
 8003b96:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7fe ff41 	bl	8002a24 <HAL_DMA_Abort_IT>
 8003ba2:	1e03      	subs	r3, r0, #0
 8003ba4:	d051      	beq.n	8003c4a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bb4:	e049      	b.n	8003c4a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 f859 	bl	8003c70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bbe:	e044      	b.n	8003c4a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d03b      	beq.n	8003c40 <I2C_ITError+0x194>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	d002      	beq.n	8003bd4 <I2C_ITError+0x128>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b22      	cmp	r3, #34	; 0x22
 8003bd2:	d135      	bne.n	8003c40 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	401a      	ands	r2, r3
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	491e      	ldr	r1, [pc, #120]	; (8003c6c <I2C_ITError+0x1c0>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fe ff56 	bl	8002aae <HAL_DMA_GetState>
 8003c02:	0003      	movs	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d016      	beq.n	8003c36 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	4a16      	ldr	r2, [pc, #88]	; (8003c68 <I2C_ITError+0x1bc>)
 8003c0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2240      	movs	r2, #64	; 0x40
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7fe ff01 	bl	8002a24 <HAL_DMA_Abort_IT>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d013      	beq.n	8003c4e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	0018      	movs	r0, r3
 8003c32:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c34:	e00b      	b.n	8003c4e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f819 	bl	8003c70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c3e:	e006      	b.n	8003c4e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f814 	bl	8003c70 <I2C_TreatErrorCallback>
  }
}
 8003c48:	e002      	b.n	8003c50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	e000      	b.n	8003c50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c4e:	46c0      	nop			; (mov r8, r8)
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b004      	add	sp, #16
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	ffff0000 	.word	0xffff0000
 8003c5c:	08003375 	.word	0x08003375
 8003c60:	00008003 	.word	0x00008003
 8003c64:	ffffbfff 	.word	0xffffbfff
 8003c68:	08003d07 	.word	0x08003d07
 8003c6c:	ffff7fff 	.word	0xffff7fff

08003c70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2241      	movs	r2, #65	; 0x41
 8003c7c:	5c9b      	ldrb	r3, [r3, r2]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d10f      	bne.n	8003ca4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2241      	movs	r2, #65	; 0x41
 8003c88:	2120      	movs	r1, #32
 8003c8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2240      	movs	r2, #64	; 0x40
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff fb61 	bl	8003364 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ca2:	e00a      	b.n	8003cba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2240      	movs	r2, #64	; 0x40
 8003cae:	2100      	movs	r1, #0
 8003cb0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fb4d 	bl	8003354 <HAL_I2C_ErrorCallback>
}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	b002      	add	sp, #8
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d103      	bne.n	8003ce0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d007      	beq.n	8003cfe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	619a      	str	r2, [r3, #24]
  }
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d003      	beq.n	8003d24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	2200      	movs	r2, #0
 8003d22:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	2200      	movs	r2, #0
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7ff ff9a 	bl	8003c70 <I2C_TreatErrorCallback>
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b004      	add	sp, #16
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	000a      	movs	r2, r1
 8003d4e:	1cbb      	adds	r3, r7, #2
 8003d50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d56:	1cbb      	adds	r3, r7, #2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d010      	beq.n	8003d82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2242      	movs	r2, #66	; 0x42
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2241      	movs	r2, #65	; 0x41
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	001a      	movs	r2, r3
 8003d72:	2328      	movs	r3, #40	; 0x28
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b28      	cmp	r3, #40	; 0x28
 8003d78:	d003      	beq.n	8003d82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	22b0      	movs	r2, #176	; 0xb0
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d82:	1cbb      	adds	r3, r7, #2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	2202      	movs	r2, #2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d010      	beq.n	8003dae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2244      	movs	r2, #68	; 0x44
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2241      	movs	r2, #65	; 0x41
 8003d98:	5c9b      	ldrb	r3, [r3, r2]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2328      	movs	r3, #40	; 0x28
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b28      	cmp	r3, #40	; 0x28
 8003da4:	d003      	beq.n	8003dae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	22b0      	movs	r2, #176	; 0xb0
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003dae:	1cbb      	adds	r3, r7, #2
 8003db0:	2200      	movs	r2, #0
 8003db2:	5e9b      	ldrsh	r3, [r3, r2]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da03      	bge.n	8003dc0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	22b8      	movs	r2, #184	; 0xb8
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dc0:	1cbb      	adds	r3, r7, #2
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d103      	bne.n	8003dd0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2290      	movs	r2, #144	; 0x90
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dd0:	1cbb      	adds	r3, r7, #2
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d103      	bne.n	8003de0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003de0:	1cbb      	adds	r3, r7, #2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d103      	bne.n	8003df0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	43d9      	mvns	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	400a      	ands	r2, r1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b004      	add	sp, #16
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2241      	movs	r2, #65	; 0x41
 8003e1a:	5c9b      	ldrb	r3, [r3, r2]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d138      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2240      	movs	r2, #64	; 0x40
 8003e26:	5c9b      	ldrb	r3, [r3, r2]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e032      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	2101      	movs	r1, #1
 8003e36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2241      	movs	r2, #65	; 0x41
 8003e3c:	2124      	movs	r1, #36	; 0x24
 8003e3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	438a      	bics	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4911      	ldr	r1, [pc, #68]	; (8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2241      	movs	r2, #65	; 0x41
 8003e84:	2120      	movs	r1, #32
 8003e86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2240      	movs	r2, #64	; 0x40
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	ffffefff 	.word	0xffffefff

08003ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2241      	movs	r2, #65	; 0x41
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d139      	bne.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2240      	movs	r2, #64	; 0x40
 8003ebe:	5c9b      	ldrb	r3, [r3, r2]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e033      	b.n	8003f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2240      	movs	r2, #64	; 0x40
 8003ecc:	2101      	movs	r1, #1
 8003ece:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2241      	movs	r2, #65	; 0x41
 8003ed4:	2124      	movs	r1, #36	; 0x24
 8003ed6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2241      	movs	r2, #65	; 0x41
 8003f1e:	2120      	movs	r1, #32
 8003f20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2240      	movs	r2, #64	; 0x40
 8003f26:	2100      	movs	r1, #0
 8003f28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	0018      	movs	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	fffff0ff 	.word	0xfffff0ff

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e305      	b.n	800455a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2201      	movs	r2, #1
 8003f54:	4013      	ands	r3, r2
 8003f56:	d100      	bne.n	8003f5a <HAL_RCC_OscConfig+0x1e>
 8003f58:	e08d      	b.n	8004076 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f5a:	4bc5      	ldr	r3, [pc, #788]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	220c      	movs	r2, #12
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d00e      	beq.n	8003f84 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f66:	4bc2      	ldr	r3, [pc, #776]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	220c      	movs	r2, #12
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d116      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x64>
 8003f72:	4bbf      	ldr	r3, [pc, #764]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	23c0      	movs	r3, #192	; 0xc0
 8003f78:	025b      	lsls	r3, r3, #9
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	025b      	lsls	r3, r3, #9
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	4bba      	ldr	r3, [pc, #744]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	029b      	lsls	r3, r3, #10
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <HAL_RCC_OscConfig+0x56>
 8003f90:	e070      	b.n	8004074 <HAL_RCC_OscConfig+0x138>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d000      	beq.n	8003f9c <HAL_RCC_OscConfig+0x60>
 8003f9a:	e06b      	b.n	8004074 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e2dc      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x7c>
 8003fa8:	4bb1      	ldr	r3, [pc, #708]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4bb0      	ldr	r3, [pc, #704]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	0249      	lsls	r1, r1, #9
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e02f      	b.n	8004018 <HAL_RCC_OscConfig+0xdc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0x9e>
 8003fc0:	4bab      	ldr	r3, [pc, #684]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4baa      	ldr	r3, [pc, #680]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fc6:	49ab      	ldr	r1, [pc, #684]	; (8004274 <HAL_RCC_OscConfig+0x338>)
 8003fc8:	400a      	ands	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	4ba8      	ldr	r3, [pc, #672]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4ba7      	ldr	r3, [pc, #668]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fd2:	49a9      	ldr	r1, [pc, #676]	; (8004278 <HAL_RCC_OscConfig+0x33c>)
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e01e      	b.n	8004018 <HAL_RCC_OscConfig+0xdc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d10e      	bne.n	8004000 <HAL_RCC_OscConfig+0xc4>
 8003fe2:	4ba3      	ldr	r3, [pc, #652]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4ba2      	ldr	r3, [pc, #648]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	02c9      	lsls	r1, r1, #11
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	4b9f      	ldr	r3, [pc, #636]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b9e      	ldr	r3, [pc, #632]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	0249      	lsls	r1, r1, #9
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xdc>
 8004000:	4b9b      	ldr	r3, [pc, #620]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004006:	499b      	ldr	r1, [pc, #620]	; (8004274 <HAL_RCC_OscConfig+0x338>)
 8004008:	400a      	ands	r2, r1
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	4b98      	ldr	r3, [pc, #608]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b97      	ldr	r3, [pc, #604]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004012:	4999      	ldr	r1, [pc, #612]	; (8004278 <HAL_RCC_OscConfig+0x33c>)
 8004014:	400a      	ands	r2, r1
 8004016:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d014      	beq.n	800404a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd fce0 	bl	80019e4 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402a:	f7fd fcdb 	bl	80019e4 <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	; 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e28e      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403c:	4b8c      	ldr	r3, [pc, #560]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	2380      	movs	r3, #128	; 0x80
 8004042:	029b      	lsls	r3, r3, #10
 8004044:	4013      	ands	r3, r2
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0xee>
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404a:	f7fd fccb 	bl	80019e4 <HAL_GetTick>
 800404e:	0003      	movs	r3, r0
 8004050:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd fcc6 	bl	80019e4 <HAL_GetTick>
 8004058:	0002      	movs	r2, r0
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e279      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b82      	ldr	r3, [pc, #520]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	4013      	ands	r3, r2
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x118>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d100      	bne.n	8004082 <HAL_RCC_OscConfig+0x146>
 8004080:	e06c      	b.n	800415c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004082:	4b7b      	ldr	r3, [pc, #492]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	220c      	movs	r2, #12
 8004088:	4013      	ands	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800408c:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	220c      	movs	r2, #12
 8004092:	4013      	ands	r3, r2
 8004094:	2b08      	cmp	r3, #8
 8004096:	d11f      	bne.n	80040d8 <HAL_RCC_OscConfig+0x19c>
 8004098:	4b75      	ldr	r3, [pc, #468]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	23c0      	movs	r3, #192	; 0xc0
 800409e:	025b      	lsls	r3, r3, #9
 80040a0:	401a      	ands	r2, r3
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	4b71      	ldr	r3, [pc, #452]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2202      	movs	r2, #2
 80040b0:	4013      	ands	r3, r2
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x184>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e24c      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b6b      	ldr	r3, [pc, #428]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	22f8      	movs	r2, #248	; 0xf8
 80040c6:	4393      	bics	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00da      	lsls	r2, r3, #3
 80040d0:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e041      	b.n	800415c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d024      	beq.n	800412a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b62      	ldr	r3, [pc, #392]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80040e6:	2101      	movs	r1, #1
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fd fc7a 	bl	80019e4 <HAL_GetTick>
 80040f0:	0003      	movs	r3, r0
 80040f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fd fc75 	bl	80019e4 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e228      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	4b59      	ldr	r3, [pc, #356]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d0f1      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	22f8      	movs	r2, #248	; 0xf8
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	00da      	lsls	r2, r3, #3
 8004122:	4b53      	ldr	r3, [pc, #332]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e018      	b.n	800415c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b51      	ldr	r3, [pc, #324]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004130:	2101      	movs	r1, #1
 8004132:	438a      	bics	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fd fc55 	bl	80019e4 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fd fc50 	bl	80019e4 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e203      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2202      	movs	r2, #2
 8004158:	4013      	ands	r3, r2
 800415a:	d1f1      	bne.n	8004140 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	4013      	ands	r3, r2
 8004164:	d036      	beq.n	80041d4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d019      	beq.n	80041a2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b40      	ldr	r3, [pc, #256]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004174:	2101      	movs	r1, #1
 8004176:	430a      	orrs	r2, r1
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd fc33 	bl	80019e4 <HAL_GetTick>
 800417e:	0003      	movs	r3, r0
 8004180:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fc2e 	bl	80019e4 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1e1      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2202      	movs	r2, #2
 800419c:	4013      	ands	r3, r2
 800419e:	d0f1      	beq.n	8004184 <HAL_RCC_OscConfig+0x248>
 80041a0:	e018      	b.n	80041d4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b33      	ldr	r3, [pc, #204]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041a8:	2101      	movs	r1, #1
 80041aa:	438a      	bics	r2, r1
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fd fc19 	bl	80019e4 <HAL_GetTick>
 80041b2:	0003      	movs	r3, r0
 80041b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd fc14 	bl	80019e4 <HAL_GetTick>
 80041bc:	0002      	movs	r2, r0
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1c7      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2202      	movs	r2, #2
 80041d0:	4013      	ands	r3, r2
 80041d2:	d1f1      	bne.n	80041b8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2204      	movs	r2, #4
 80041da:	4013      	ands	r3, r2
 80041dc:	d100      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2a4>
 80041de:	e0b5      	b.n	800434c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e0:	201f      	movs	r0, #31
 80041e2:	183b      	adds	r3, r7, r0
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	055b      	lsls	r3, r3, #21
 80041f0:	4013      	ands	r3, r2
 80041f2:	d110      	bne.n	8004216 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	0549      	lsls	r1, r1, #21
 80041fe:	430a      	orrs	r2, r1
 8004200:	61da      	str	r2, [r3, #28]
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	055b      	lsls	r3, r3, #21
 800420a:	4013      	ands	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004210:	183b      	adds	r3, r7, r0
 8004212:	2201      	movs	r2, #1
 8004214:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCC_OscConfig+0x340>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	4013      	ands	r3, r2
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_RCC_OscConfig+0x340>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_RCC_OscConfig+0x340>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0049      	lsls	r1, r1, #1
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004230:	f7fd fbd8 	bl	80019e4 <HAL_GetTick>
 8004234:	0003      	movs	r3, r0
 8004236:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fd fbd3 	bl	80019e4 <HAL_GetTick>
 800423e:	0002      	movs	r2, r0
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e186      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <HAL_RCC_OscConfig+0x340>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4013      	ands	r3, r2
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10f      	bne.n	8004280 <HAL_RCC_OscConfig+0x344>
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	4b02      	ldr	r3, [pc, #8]	; (8004270 <HAL_RCC_OscConfig+0x334>)
 8004266:	2101      	movs	r1, #1
 8004268:	430a      	orrs	r2, r1
 800426a:	621a      	str	r2, [r3, #32]
 800426c:	e036      	b.n	80042dc <HAL_RCC_OscConfig+0x3a0>
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	40021000 	.word	0x40021000
 8004274:	fffeffff 	.word	0xfffeffff
 8004278:	fffbffff 	.word	0xfffbffff
 800427c:	40007000 	.word	0x40007000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x366>
 8004288:	4bb6      	ldr	r3, [pc, #728]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	4bb5      	ldr	r3, [pc, #724]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800428e:	2101      	movs	r1, #1
 8004290:	438a      	bics	r2, r1
 8004292:	621a      	str	r2, [r3, #32]
 8004294:	4bb3      	ldr	r3, [pc, #716]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	4bb2      	ldr	r3, [pc, #712]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800429a:	2104      	movs	r1, #4
 800429c:	438a      	bics	r2, r1
 800429e:	621a      	str	r2, [r3, #32]
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x3a0>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x388>
 80042aa:	4bae      	ldr	r3, [pc, #696]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042ac:	6a1a      	ldr	r2, [r3, #32]
 80042ae:	4bad      	ldr	r3, [pc, #692]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042b0:	2104      	movs	r1, #4
 80042b2:	430a      	orrs	r2, r1
 80042b4:	621a      	str	r2, [r3, #32]
 80042b6:	4bab      	ldr	r3, [pc, #684]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	4baa      	ldr	r3, [pc, #680]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042bc:	2101      	movs	r1, #1
 80042be:	430a      	orrs	r2, r1
 80042c0:	621a      	str	r2, [r3, #32]
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0x3a0>
 80042c4:	4ba7      	ldr	r3, [pc, #668]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042c6:	6a1a      	ldr	r2, [r3, #32]
 80042c8:	4ba6      	ldr	r3, [pc, #664]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	438a      	bics	r2, r1
 80042ce:	621a      	str	r2, [r3, #32]
 80042d0:	4ba4      	ldr	r3, [pc, #656]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	4ba3      	ldr	r3, [pc, #652]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80042d6:	2104      	movs	r1, #4
 80042d8:	438a      	bics	r2, r1
 80042da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d014      	beq.n	800430e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e4:	f7fd fb7e 	bl	80019e4 <HAL_GetTick>
 80042e8:	0003      	movs	r3, r0
 80042ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	e009      	b.n	8004302 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fd fb79 	bl	80019e4 <HAL_GetTick>
 80042f2:	0002      	movs	r2, r0
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	4a9b      	ldr	r2, [pc, #620]	; (8004568 <HAL_RCC_OscConfig+0x62c>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e12b      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	4b98      	ldr	r3, [pc, #608]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	2202      	movs	r2, #2
 8004308:	4013      	ands	r3, r2
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x3b2>
 800430c:	e013      	b.n	8004336 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7fd fb69 	bl	80019e4 <HAL_GetTick>
 8004312:	0003      	movs	r3, r0
 8004314:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	e009      	b.n	800432c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fd fb64 	bl	80019e4 <HAL_GetTick>
 800431c:	0002      	movs	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a91      	ldr	r2, [pc, #580]	; (8004568 <HAL_RCC_OscConfig+0x62c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e116      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432c:	4b8d      	ldr	r3, [pc, #564]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	2202      	movs	r2, #2
 8004332:	4013      	ands	r3, r2
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004336:	231f      	movs	r3, #31
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	4b87      	ldr	r3, [pc, #540]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004346:	4989      	ldr	r1, [pc, #548]	; (800456c <HAL_RCC_OscConfig+0x630>)
 8004348:	400a      	ands	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	4013      	ands	r3, r2
 8004354:	d063      	beq.n	800441e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d12a      	bne.n	80043b4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	4b80      	ldr	r3, [pc, #512]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004364:	2104      	movs	r1, #4
 8004366:	430a      	orrs	r2, r1
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800436a:	4b7e      	ldr	r3, [pc, #504]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800436c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004370:	2101      	movs	r1, #1
 8004372:	430a      	orrs	r2, r1
 8004374:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004376:	f7fd fb35 	bl	80019e4 <HAL_GetTick>
 800437a:	0003      	movs	r3, r0
 800437c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004380:	f7fd fb30 	bl	80019e4 <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0e3      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004392:	4b74      	ldr	r3, [pc, #464]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	2202      	movs	r2, #2
 8004398:	4013      	ands	r3, r2
 800439a:	d0f1      	beq.n	8004380 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800439c:	4b71      	ldr	r3, [pc, #452]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	22f8      	movs	r2, #248	; 0xf8
 80043a2:	4393      	bics	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	00da      	lsls	r2, r3, #3
 80043ac:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043ae:	430a      	orrs	r2, r1
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34
 80043b2:	e034      	b.n	800441e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	3305      	adds	r3, #5
 80043ba:	d111      	bne.n	80043e0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80043bc:	4b69      	ldr	r3, [pc, #420]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c0:	4b68      	ldr	r3, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043c2:	2104      	movs	r1, #4
 80043c4:	438a      	bics	r2, r1
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80043c8:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	22f8      	movs	r2, #248	; 0xf8
 80043ce:	4393      	bics	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	00da      	lsls	r2, r3, #3
 80043d8:	4b62      	ldr	r3, [pc, #392]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043da:	430a      	orrs	r2, r1
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34
 80043de:	e01e      	b.n	800441e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043e0:	4b60      	ldr	r3, [pc, #384]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e4:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043e6:	2104      	movs	r1, #4
 80043e8:	430a      	orrs	r2, r1
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80043ec:	4b5d      	ldr	r3, [pc, #372]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	438a      	bics	r2, r1
 80043f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fd faf4 	bl	80019e4 <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004402:	f7fd faef 	bl	80019e4 <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0a2      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d1f1      	bne.n	8004402 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d100      	bne.n	8004428 <HAL_RCC_OscConfig+0x4ec>
 8004426:	e097      	b.n	8004558 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004428:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	220c      	movs	r2, #12
 800442e:	4013      	ands	r3, r2
 8004430:	2b08      	cmp	r3, #8
 8004432:	d100      	bne.n	8004436 <HAL_RCC_OscConfig+0x4fa>
 8004434:	e06b      	b.n	800450e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d14c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443e:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004444:	494a      	ldr	r1, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x634>)
 8004446:	400a      	ands	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd facb 	bl	80019e4 <HAL_GetTick>
 800444e:	0003      	movs	r3, r0
 8004450:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004454:	f7fd fac6 	bl	80019e4 <HAL_GetTick>
 8004458:	0002      	movs	r2, r0
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e079      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	049b      	lsls	r3, r3, #18
 800446e:	4013      	ands	r3, r2
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004472:	4b3c      	ldr	r3, [pc, #240]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	220f      	movs	r2, #15
 8004478:	4393      	bics	r3, r2
 800447a:	0019      	movs	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4b38      	ldr	r3, [pc, #224]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <HAL_RCC_OscConfig+0x638>)
 800448c:	4013      	ands	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	431a      	orrs	r2, r3
 800449a:	4b32      	ldr	r3, [pc, #200]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b30      	ldr	r3, [pc, #192]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0449      	lsls	r1, r1, #17
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fd fa99 	bl	80019e4 <HAL_GetTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fd fa94 	bl	80019e4 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e047      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	2380      	movs	r3, #128	; 0x80
 80044d0:	049b      	lsls	r3, r3, #18
 80044d2:	4013      	ands	r3, r2
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x57c>
 80044d6:	e03f      	b.n	8004558 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b21      	ldr	r3, [pc, #132]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 80044de:	4924      	ldr	r1, [pc, #144]	; (8004570 <HAL_RCC_OscConfig+0x634>)
 80044e0:	400a      	ands	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fa7e 	bl	80019e4 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fd fa79 	bl	80019e4 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e02c      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004500:	4b18      	ldr	r3, [pc, #96]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2380      	movs	r3, #128	; 0x80
 8004506:	049b      	lsls	r3, r3, #18
 8004508:	4013      	ands	r3, r2
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x5b2>
 800450c:	e024      	b.n	8004558 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e01f      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x628>)
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	025b      	lsls	r3, r3, #9
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	429a      	cmp	r2, r3
 8004534:	d10e      	bne.n	8004554 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	220f      	movs	r2, #15
 800453a:	401a      	ands	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004540:	429a      	cmp	r2, r3
 8004542:	d107      	bne.n	8004554 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	23f0      	movs	r3, #240	; 0xf0
 8004548:	039b      	lsls	r3, r3, #14
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b008      	add	sp, #32
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	40021000 	.word	0x40021000
 8004568:	00001388 	.word	0x00001388
 800456c:	efffffff 	.word	0xefffffff
 8004570:	feffffff 	.word	0xfeffffff
 8004574:	ffc27fff 	.word	0xffc27fff

08004578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0b3      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800458c:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d911      	bls.n	80045be <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	4393      	bics	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	4b55      	ldr	r3, [pc, #340]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ac:	4b53      	ldr	r3, [pc, #332]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e09a      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	d015      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2204      	movs	r2, #4
 80045ce:	4013      	ands	r3, r2
 80045d0:	d006      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80045d2:	4b4b      	ldr	r3, [pc, #300]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80045d8:	21e0      	movs	r1, #224	; 0xe0
 80045da:	00c9      	lsls	r1, r1, #3
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	22f0      	movs	r2, #240	; 0xf0
 80045e6:	4393      	bics	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	4b44      	ldr	r3, [pc, #272]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d040      	beq.n	8004680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b3e      	ldr	r3, [pc, #248]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	4013      	ands	r3, r2
 8004610:	d114      	bne.n	800463c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b38      	ldr	r3, [pc, #224]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	049b      	lsls	r3, r3, #18
 8004626:	4013      	ands	r3, r2
 8004628:	d108      	bne.n	800463c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e062      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b34      	ldr	r3, [pc, #208]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2202      	movs	r2, #2
 8004634:	4013      	ands	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e05b      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463c:	4b30      	ldr	r3, [pc, #192]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2203      	movs	r2, #3
 8004642:	4393      	bics	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd f9c8 	bl	80019e4 <HAL_GetTick>
 8004654:	0003      	movs	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004658:	e009      	b.n	800466e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465a:	f7fd f9c3 	bl	80019e4 <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <HAL_RCC_ClockConfig+0x18c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e042      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	220c      	movs	r2, #12
 8004674:	401a      	ands	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1ec      	bne.n	800465a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	4013      	ands	r3, r2
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d211      	bcs.n	80046b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2201      	movs	r2, #1
 8004694:	4393      	bics	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	4b18      	ldr	r3, [pc, #96]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a0:	4b16      	ldr	r3, [pc, #88]	; (80046fc <HAL_RCC_ClockConfig+0x184>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e020      	b.n	80046f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2204      	movs	r2, #4
 80046b8:	4013      	ands	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b10      	ldr	r3, [pc, #64]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	4a11      	ldr	r2, [pc, #68]	; (8004708 <HAL_RCC_ClockConfig+0x190>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	0019      	movs	r1, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046d0:	f000 f820 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d4:	0001      	movs	r1, r0
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <HAL_RCC_ClockConfig+0x188>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	220f      	movs	r2, #15
 80046de:	4013      	ands	r3, r2
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x194>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	000a      	movs	r2, r1
 80046e6:	40da      	lsrs	r2, r3
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x198>)
 80046ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046ec:	2000      	movs	r0, #0
 80046ee:	f7fd f933 	bl	8001958 <HAL_InitTick>
  
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b004      	add	sp, #16
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	00001388 	.word	0x00001388
 8004708:	fffff8ff 	.word	0xfffff8ff
 800470c:	080062c8 	.word	0x080062c8
 8004710:	20000004 	.word	0x20000004

08004714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b08f      	sub	sp, #60	; 0x3c
 8004718:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800471a:	2314      	movs	r3, #20
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004720:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004722:	c313      	stmia	r3!, {r0, r1, r4}
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800472c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800472e:	c313      	stmia	r3!, {r0, r1, r4}
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
 800473c:	2300      	movs	r3, #0
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
 8004740:	2300      	movs	r3, #0
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004748:	4b23      	ldr	r3, [pc, #140]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	220c      	movs	r2, #12
 8004752:	4013      	ands	r3, r2
 8004754:	2b04      	cmp	r3, #4
 8004756:	d002      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0x4a>
 8004758:	2b08      	cmp	r3, #8
 800475a:	d003      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0x50>
 800475c:	e02f      	b.n	80047be <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800475e:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004762:	e02f      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	0c9b      	lsrs	r3, r3, #18
 8004768:	220f      	movs	r2, #15
 800476a:	4013      	ands	r3, r2
 800476c:	2214      	movs	r2, #20
 800476e:	18ba      	adds	r2, r7, r2
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004774:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	220f      	movs	r2, #15
 800477a:	4013      	ands	r3, r2
 800477c:	1d3a      	adds	r2, r7, #4
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004784:	23c0      	movs	r3, #192	; 0xc0
 8004786:	025b      	lsls	r3, r3, #9
 8004788:	401a      	ands	r2, r3
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	025b      	lsls	r3, r3, #9
 800478e:	429a      	cmp	r2, r3
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004794:	4811      	ldr	r0, [pc, #68]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8004796:	f7fb fcb7 	bl	8000108 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	001a      	movs	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	4353      	muls	r3, r2
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a8:	480c      	ldr	r0, [pc, #48]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80047aa:	f7fb fcad 	bl	8000108 <__udivsi3>
 80047ae:	0003      	movs	r3, r0
 80047b0:	001a      	movs	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	4353      	muls	r3, r2
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047bc:	e002      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b00f      	add	sp, #60	; 0x3c
 80047cc:	bd90      	pop	{r4, r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	08006224 	.word	0x08006224
 80047d4:	08006234 	.word	0x08006234
 80047d8:	40021000 	.word	0x40021000
 80047dc:	007a1200 	.word	0x007a1200

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b02      	ldr	r3, [pc, #8]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000004 	.word	0x20000004

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80047f8:	f7ff fff2 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 80047fc:	0001      	movs	r1, r0
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	2207      	movs	r2, #7
 8004806:	4013      	ands	r3, r2
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_RCC_GetPCLK1Freq+0x28>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	40d9      	lsrs	r1, r3
 800480e:	000b      	movs	r3, r1
}    
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	40021000 	.word	0x40021000
 800481c:	080062d8 	.word	0x080062d8

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	025b      	lsls	r3, r3, #9
 8004838:	4013      	ands	r3, r2
 800483a:	d100      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800483c:	e08e      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2017      	movs	r0, #23
 8004840:	183b      	adds	r3, r7, r0
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004846:	4b5f      	ldr	r3, [pc, #380]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	055b      	lsls	r3, r3, #21
 800484e:	4013      	ands	r3, r2
 8004850:	d110      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	4b5b      	ldr	r3, [pc, #364]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	0549      	lsls	r1, r1, #21
 800485c:	430a      	orrs	r2, r1
 800485e:	61da      	str	r2, [r3, #28]
 8004860:	4b58      	ldr	r3, [pc, #352]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004862:	69da      	ldr	r2, [r3, #28]
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	055b      	lsls	r3, r3, #21
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800486e:	183b      	adds	r3, r7, r0
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	2380      	movs	r3, #128	; 0x80
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4013      	ands	r3, r2
 800487e:	d11a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004880:	4b51      	ldr	r3, [pc, #324]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004886:	2180      	movs	r1, #128	; 0x80
 8004888:	0049      	lsls	r1, r1, #1
 800488a:	430a      	orrs	r2, r1
 800488c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488e:	f7fd f8a9 	bl	80019e4 <HAL_GetTick>
 8004892:	0003      	movs	r3, r0
 8004894:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	e008      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004898:	f7fd f8a4 	bl	80019e4 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d901      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e087      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b6:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048b8:	6a1a      	ldr	r2, [r3, #32]
 80048ba:	23c0      	movs	r3, #192	; 0xc0
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d034      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	23c0      	movs	r3, #192	; 0xc0
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4013      	ands	r3, r2
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d02c      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d8:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4a3b      	ldr	r2, [pc, #236]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048de:	4013      	ands	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	4b37      	ldr	r3, [pc, #220]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	0249      	lsls	r1, r1, #9
 80048ec:	430a      	orrs	r2, r1
 80048ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f0:	4b34      	ldr	r3, [pc, #208]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048f6:	4936      	ldr	r1, [pc, #216]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	4013      	ands	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490a:	f7fd f86b 	bl	80019e4 <HAL_GetTick>
 800490e:	0003      	movs	r3, r0
 8004910:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004912:	e009      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004914:	f7fd f866 	bl	80019e4 <HAL_GetTick>
 8004918:	0002      	movs	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e048      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	4b26      	ldr	r3, [pc, #152]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	2202      	movs	r2, #2
 800492e:	4013      	ands	r3, r2
 8004930:	d0f0      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4a25      	ldr	r2, [pc, #148]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004942:	430a      	orrs	r2, r1
 8004944:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004946:	2317      	movs	r3, #23
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004950:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004956:	4920      	ldr	r1, [pc, #128]	; (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004958:	400a      	ands	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2201      	movs	r2, #1
 8004962:	4013      	ands	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	2203      	movs	r2, #3
 800496c:	4393      	bics	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004976:	430a      	orrs	r2, r1
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2220      	movs	r2, #32
 8004980:	4013      	ands	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2210      	movs	r2, #16
 800498a:	4393      	bics	r3, r2
 800498c:	0019      	movs	r1, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004994:	430a      	orrs	r2, r1
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	029b      	lsls	r3, r3, #10
 80049a0:	4013      	ands	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	4393      	bics	r3, r2
 80049ac:	0019      	movs	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80049b4:	430a      	orrs	r2, r1
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b006      	add	sp, #24
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40007000 	.word	0x40007000
 80049cc:	fffffcff 	.word	0xfffffcff
 80049d0:	fffeffff 	.word	0xfffeffff
 80049d4:	00001388 	.word	0x00001388
 80049d8:	efffffff 	.word	0xefffffff

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e042      	b.n	8004a74 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	223d      	movs	r2, #61	; 0x3d
 80049f2:	5c9b      	ldrb	r3, [r3, r2]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	223c      	movs	r2, #60	; 0x3c
 80049fe:	2100      	movs	r1, #0
 8004a00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fc fdfd 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	223d      	movs	r2, #61	; 0x3d
 8004a0e:	2102      	movs	r1, #2
 8004a10:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	0019      	movs	r1, r3
 8004a1c:	0010      	movs	r0, r2
 8004a1e:	f000 fab1 	bl	8004f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2246      	movs	r2, #70	; 0x46
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223e      	movs	r2, #62	; 0x3e
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223f      	movs	r2, #63	; 0x3f
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2241      	movs	r2, #65	; 0x41
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2242      	movs	r2, #66	; 0x42
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2243      	movs	r2, #67	; 0x43
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2244      	movs	r2, #68	; 0x44
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2245      	movs	r2, #69	; 0x45
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	223d      	movs	r2, #61	; 0x3d
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	223d      	movs	r2, #61	; 0x3d
 8004a88:	5c9b      	ldrb	r3, [r3, r2]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e035      	b.n	8004b00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	223d      	movs	r2, #61	; 0x3d
 8004a98:	2102      	movs	r1, #2
 8004a9a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIM_Base_Start_IT+0x8c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x4e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <HAL_TIM_Base_Start_IT+0x90>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x4e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a12      	ldr	r2, [pc, #72]	; (8004b10 <HAL_TIM_Base_Start_IT+0x94>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d010      	beq.n	8004afe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e007      	b.n	8004afe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	430a      	orrs	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b004      	add	sp, #16
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40012c00 	.word	0x40012c00
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40014000 	.word	0x40014000

08004b14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2101      	movs	r1, #1
 8004b28:	438a      	bics	r2, r1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_TIM_Base_Stop_IT+0x54>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <HAL_TIM_Base_Stop_IT+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	4a0b      	ldr	r2, [pc, #44]	; (8004b6c <HAL_TIM_Base_Stop_IT+0x58>)
 8004b40:	4013      	ands	r3, r2
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_Base_Stop_IT+0x40>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2101      	movs	r1, #1
 8004b50:	438a      	bics	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	223d      	movs	r2, #61	; 0x3d
 8004b58:	2101      	movs	r1, #1
 8004b5a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b002      	add	sp, #8
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	00001111 	.word	0x00001111
 8004b6c:	00000444 	.word	0x00000444

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d124      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11d      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	4252      	negs	r2, r2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	2203      	movs	r2, #3
 8004bac:	4013      	ands	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f9ce 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e007      	b.n	8004bca <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f9c1 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f9cd 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	4013      	ands	r3, r2
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d125      	bne.n	8004c2a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2204      	movs	r2, #4
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11e      	bne.n	8004c2a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2205      	movs	r2, #5
 8004bf2:	4252      	negs	r2, r2
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	23c0      	movs	r3, #192	; 0xc0
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4013      	ands	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f000 f9a1 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004c12:	e007      	b.n	8004c24 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f994 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f000 f9a0 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2208      	movs	r2, #8
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d124      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2208      	movs	r2, #8
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d11d      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2209      	movs	r2, #9
 8004c4c:	4252      	negs	r2, r2
 8004c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2204      	movs	r2, #4
 8004c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f000 f975 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004c6a:	e007      	b.n	8004c7c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 f968 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f974 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d125      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2210      	movs	r2, #16
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d11e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2211      	movs	r2, #17
 8004ca4:	4252      	negs	r2, r2
 8004ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2208      	movs	r2, #8
 8004cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	23c0      	movs	r3, #192	; 0xc0
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f000 f948 	bl	8004f54 <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e007      	b.n	8004cd6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	0018      	movs	r0, r3
 8004cca:	f000 f93b 	bl	8004f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	f000 f947 	bl	8004f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d10f      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	4252      	negs	r2, r2
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f7fc f901 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2280      	movs	r2, #128	; 0x80
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d10f      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d108      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2281      	movs	r2, #129	; 0x81
 8004d2c:	4252      	negs	r2, r2
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 fa96 	bl	8005264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2240      	movs	r2, #64	; 0x40
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b40      	cmp	r3, #64	; 0x40
 8004d44:	d10f      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2240      	movs	r2, #64	; 0x40
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d108      	bne.n	8004d66 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2241      	movs	r2, #65	; 0x41
 8004d5a:	4252      	negs	r2, r2
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f000 f907 	bl	8004f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d10f      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d108      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2221      	movs	r2, #33	; 0x21
 8004d88:	4252      	negs	r2, r2
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 fa60 	bl	8005254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d94:	46c0      	nop			; (mov r8, r8)
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004da6:	230f      	movs	r3, #15
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	223c      	movs	r2, #60	; 0x3c
 8004db2:	5c9b      	ldrb	r3, [r3, r2]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_ConfigClockSource+0x20>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e0bc      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x19a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	223c      	movs	r2, #60	; 0x3c
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	223d      	movs	r2, #61	; 0x3d
 8004dc8:	2102      	movs	r1, #2
 8004dca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2277      	movs	r2, #119	; 0x77
 8004dd8:	4393      	bics	r3, r2
 8004dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a58      	ldr	r2, [pc, #352]	; (8004f40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2280      	movs	r2, #128	; 0x80
 8004df2:	0192      	lsls	r2, r2, #6
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d040      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xde>
 8004df8:	2280      	movs	r2, #128	; 0x80
 8004dfa:	0192      	lsls	r2, r2, #6
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d900      	bls.n	8004e02 <HAL_TIM_ConfigClockSource+0x66>
 8004e00:	e088      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	0152      	lsls	r2, r2, #5
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d100      	bne.n	8004e0c <HAL_TIM_ConfigClockSource+0x70>
 8004e0a:	e088      	b.n	8004f1e <HAL_TIM_ConfigClockSource+0x182>
 8004e0c:	2280      	movs	r2, #128	; 0x80
 8004e0e:	0152      	lsls	r2, r2, #5
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d900      	bls.n	8004e16 <HAL_TIM_ConfigClockSource+0x7a>
 8004e14:	e07e      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e16:	2b70      	cmp	r3, #112	; 0x70
 8004e18:	d018      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xb0>
 8004e1a:	d900      	bls.n	8004e1e <HAL_TIM_ConfigClockSource+0x82>
 8004e1c:	e07a      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e1e:	2b60      	cmp	r3, #96	; 0x60
 8004e20:	d04f      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x126>
 8004e22:	d900      	bls.n	8004e26 <HAL_TIM_ConfigClockSource+0x8a>
 8004e24:	e076      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e26:	2b50      	cmp	r3, #80	; 0x50
 8004e28:	d03b      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x106>
 8004e2a:	d900      	bls.n	8004e2e <HAL_TIM_ConfigClockSource+0x92>
 8004e2c:	e072      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d057      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x146>
 8004e32:	d900      	bls.n	8004e36 <HAL_TIM_ConfigClockSource+0x9a>
 8004e34:	e06e      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e36:	2b30      	cmp	r3, #48	; 0x30
 8004e38:	d063      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x166>
 8004e3a:	d86b      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d060      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x166>
 8004e40:	d868      	bhi.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d05d      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x166>
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d05b      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0x166>
 8004e4a:	e063      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f000 f982 	bl	8005164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2277      	movs	r2, #119	; 0x77
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e052      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6899      	ldr	r1, [r3, #8]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f000 f96b 	bl	8005164 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	01c9      	lsls	r1, r1, #7
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	609a      	str	r2, [r3, #8]
      break;
 8004ea0:	e03e      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	001a      	movs	r2, r3
 8004eb0:	f000 f8de 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2150      	movs	r1, #80	; 0x50
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f000 f938 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e02e      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	001a      	movs	r2, r3
 8004ed0:	f000 f8fc 	bl	80050cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2160      	movs	r1, #96	; 0x60
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 f928 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e01e      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6859      	ldr	r1, [r3, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	001a      	movs	r2, r3
 8004ef0:	f000 f8be 	bl	8005070 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2140      	movs	r1, #64	; 0x40
 8004efa:	0018      	movs	r0, r3
 8004efc:	f000 f918 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004f00:	e00e      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	0019      	movs	r1, r3
 8004f0c:	0010      	movs	r0, r2
 8004f0e:	f000 f90f 	bl	8005130 <TIM_ITRx_SetConfig>
      break;
 8004f12:	e005      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f14:	230f      	movs	r3, #15
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
      break;
 8004f1c:	e000      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f1e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	223d      	movs	r2, #61	; 0x3d
 8004f24:	2101      	movs	r1, #1
 8004f26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223c      	movs	r2, #60	; 0x3c
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]

  return status;
 8004f30:	230f      	movs	r3, #15
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	781b      	ldrb	r3, [r3, #0]
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	ffff00ff 	.word	0xffff00ff

08004f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	b002      	add	sp, #8
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	; (8005054 <TIM_Base_SetConfig+0xd0>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_Base_SetConfig+0x20>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a2e      	ldr	r2, [pc, #184]	; (8005058 <TIM_Base_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d108      	bne.n	8004fb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2270      	movs	r2, #112	; 0x70
 8004fa8:	4393      	bics	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0xd0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_Base_SetConfig+0xd4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00f      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a24      	ldr	r2, [pc, #144]	; (800505c <TIM_Base_SetConfig+0xd8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <TIM_Base_SetConfig+0xdc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a22      	ldr	r2, [pc, #136]	; (8005064 <TIM_Base_SetConfig+0xe0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0x62>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a21      	ldr	r2, [pc, #132]	; (8005068 <TIM_Base_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a20      	ldr	r2, [pc, #128]	; (800506c <TIM_Base_SetConfig+0xe8>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2280      	movs	r2, #128	; 0x80
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	001a      	movs	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <TIM_Base_SetConfig+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0xba>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a0d      	ldr	r2, [pc, #52]	; (8005060 <TIM_Base_SetConfig+0xdc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0xba>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <TIM_Base_SetConfig+0xe0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xba>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <TIM_Base_SetConfig+0xe4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d103      	bne.n	8005046 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	615a      	str	r2, [r3, #20]
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b004      	add	sp, #16
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40000400 	.word	0x40000400
 800505c:	40002000 	.word	0x40002000
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800
 800506c:	fffffcff 	.word	0xfffffcff

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	2201      	movs	r2, #1
 8005088:	4393      	bics	r3, r2
 800508a:	001a      	movs	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	22f0      	movs	r2, #240	; 0xf0
 800509a:	4393      	bics	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	220a      	movs	r2, #10
 80050ac:	4393      	bics	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	46c0      	nop			; (mov r8, r8)
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b006      	add	sp, #24
 80050ca:	bd80      	pop	{r7, pc}

080050cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	2210      	movs	r2, #16
 80050de:	4393      	bics	r3, r2
 80050e0:	001a      	movs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	4a0d      	ldr	r2, [pc, #52]	; (800512c <TIM_TI2_ConfigInputStage+0x60>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	22a0      	movs	r2, #160	; 0xa0
 8005108:	4393      	bics	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	46c0      	nop			; (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	b006      	add	sp, #24
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	ffff0fff 	.word	0xffff0fff

08005130 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2270      	movs	r2, #112	; 0x70
 8005144:	4393      	bics	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	2207      	movs	r2, #7
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	609a      	str	r2, [r3, #8]
}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <TIM_ETR_SetConfig+0x3c>)
 800517c:	4013      	ands	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	431a      	orrs	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b006      	add	sp, #24
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	ffff00ff 	.word	0xffff00ff

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	223c      	movs	r2, #60	; 0x3c
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e041      	b.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	223c      	movs	r2, #60	; 0x3c
 80051c0:	2101      	movs	r1, #1
 80051c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	223d      	movs	r2, #61	; 0x3d
 80051c8:	2102      	movs	r1, #2
 80051ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2270      	movs	r2, #112	; 0x70
 80051e0:	4393      	bics	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a13      	ldr	r2, [pc, #76]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a11      	ldr	r2, [pc, #68]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10c      	bne.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	4393      	bics	r3, r2
 800521a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	223d      	movs	r2, #61	; 0x3d
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	223c      	movs	r2, #60	; 0x3c
 800523a:	2100      	movs	r1, #0
 800523c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b004      	add	sp, #16
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40014000 	.word	0x40014000

08005254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800526c:	46c0      	nop			; (mov r8, r8)
 800526e:	46bd      	mov	sp, r7
 8005270:	b002      	add	sp, #8
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e044      	b.n	8005310 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800528a:	2b00      	cmp	r3, #0
 800528c:	d107      	bne.n	800529e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2274      	movs	r2, #116	; 0x74
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f7fc f9d9 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2224      	movs	r2, #36	; 0x24
 80052a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2101      	movs	r1, #1
 80052b0:	438a      	bics	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 fbb6 	bl	8005a28 <UART_SetConfig>
 80052bc:	0003      	movs	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e024      	b.n	8005310 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fd01 	bl	8005cd8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	490d      	ldr	r1, [pc, #52]	; (8005318 <HAL_UART_Init+0xa4>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2108      	movs	r1, #8
 80052f2:	438a      	bics	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	0018      	movs	r0, r3
 800530a:	f000 fd99 	bl	8005e40 <UART_CheckIdleState>
 800530e:	0003      	movs	r3, r0
}
 8005310:	0018      	movs	r0, r3
 8005312:	46bd      	mov	sp, r7
 8005314:	b002      	add	sp, #8
 8005316:	bd80      	pop	{r7, pc}
 8005318:	fffff7ff 	.word	0xfffff7ff

0800531c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005330:	2b20      	cmp	r3, #32
 8005332:	d000      	beq.n	8005336 <HAL_UART_Transmit+0x1a>
 8005334:	e096      	b.n	8005464 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <HAL_UART_Transmit+0x28>
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	881b      	ldrh	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e08e      	b.n	8005466 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	429a      	cmp	r2, r3
 8005352:	d109      	bne.n	8005368 <HAL_UART_Transmit+0x4c>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2201      	movs	r2, #1
 8005360:	4013      	ands	r3, r2
 8005362:	d001      	beq.n	8005368 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e07e      	b.n	8005466 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2274      	movs	r2, #116	; 0x74
 800536c:	5c9b      	ldrb	r3, [r3, r2]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_UART_Transmit+0x5a>
 8005372:	2302      	movs	r3, #2
 8005374:	e077      	b.n	8005466 <HAL_UART_Transmit+0x14a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2274      	movs	r2, #116	; 0x74
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2280      	movs	r2, #128	; 0x80
 8005382:	2100      	movs	r1, #0
 8005384:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2221      	movs	r2, #33	; 0x21
 800538a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538c:	f7fc fb2a 	bl	80019e4 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1dba      	adds	r2, r7, #6
 8005398:	2150      	movs	r1, #80	; 0x50
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1dba      	adds	r2, r7, #6
 80053a2:	2152      	movs	r1, #82	; 0x52
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	2380      	movs	r3, #128	; 0x80
 80053ae:	015b      	lsls	r3, r3, #5
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d108      	bne.n	80053c6 <HAL_UART_Transmit+0xaa>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e003      	b.n	80053ce <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2274      	movs	r2, #116	; 0x74
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80053d6:	e02d      	b.n	8005434 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	0013      	movs	r3, r2
 80053e2:	2200      	movs	r2, #0
 80053e4:	2180      	movs	r1, #128	; 0x80
 80053e6:	f000 fd73 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e039      	b.n	8005466 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	881a      	ldrh	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	05d2      	lsls	r2, r2, #23
 8005402:	0dd2      	lsrs	r2, r2, #23
 8005404:	b292      	uxth	r2, r2
 8005406:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	3302      	adds	r3, #2
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e008      	b.n	8005422 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b292      	uxth	r2, r2
 800541a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2252      	movs	r2, #82	; 0x52
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b299      	uxth	r1, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2252      	movs	r2, #82	; 0x52
 8005432:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2252      	movs	r2, #82	; 0x52
 8005438:	5a9b      	ldrh	r3, [r3, r2]
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1cb      	bne.n	80053d8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	0013      	movs	r3, r2
 800544a:	2200      	movs	r2, #0
 800544c:	2140      	movs	r1, #64	; 0x40
 800544e:	f000 fd3f 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005452:	1e03      	subs	r3, r0, #0
 8005454:	d001      	beq.n	800545a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e005      	b.n	8005466 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b008      	add	sp, #32
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005470:	b590      	push	{r4, r7, lr}
 8005472:	b0ab      	sub	sp, #172	; 0xac
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	22a4      	movs	r2, #164	; 0xa4
 8005480:	18b9      	adds	r1, r7, r2
 8005482:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	20a0      	movs	r0, #160	; 0xa0
 800548c:	1839      	adds	r1, r7, r0
 800548e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	219c      	movs	r1, #156	; 0x9c
 8005498:	1879      	adds	r1, r7, r1
 800549a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800549c:	0011      	movs	r1, r2
 800549e:	18bb      	adds	r3, r7, r2
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a99      	ldr	r2, [pc, #612]	; (8005708 <HAL_UART_IRQHandler+0x298>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	2298      	movs	r2, #152	; 0x98
 80054a8:	18bc      	adds	r4, r7, r2
 80054aa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80054ac:	18bb      	adds	r3, r7, r2
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d114      	bne.n	80054de <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054b4:	187b      	adds	r3, r7, r1
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2220      	movs	r2, #32
 80054ba:	4013      	ands	r3, r2
 80054bc:	d00f      	beq.n	80054de <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2220      	movs	r2, #32
 80054c4:	4013      	ands	r3, r2
 80054c6:	d00a      	beq.n	80054de <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d100      	bne.n	80054d2 <HAL_UART_IRQHandler+0x62>
 80054d0:	e27e      	b.n	80059d0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	0010      	movs	r0, r2
 80054da:	4798      	blx	r3
      }
      return;
 80054dc:	e278      	b.n	80059d0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054de:	2398      	movs	r3, #152	; 0x98
 80054e0:	18fb      	adds	r3, r7, r3
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d100      	bne.n	80054ea <HAL_UART_IRQHandler+0x7a>
 80054e8:	e114      	b.n	8005714 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054ea:	239c      	movs	r3, #156	; 0x9c
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2201      	movs	r2, #1
 80054f2:	4013      	ands	r3, r2
 80054f4:	d106      	bne.n	8005504 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80054f6:	23a0      	movs	r3, #160	; 0xa0
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a83      	ldr	r2, [pc, #524]	; (800570c <HAL_UART_IRQHandler+0x29c>)
 80054fe:	4013      	ands	r3, r2
 8005500:	d100      	bne.n	8005504 <HAL_UART_IRQHandler+0x94>
 8005502:	e107      	b.n	8005714 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005504:	23a4      	movs	r3, #164	; 0xa4
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2201      	movs	r2, #1
 800550c:	4013      	ands	r3, r2
 800550e:	d012      	beq.n	8005536 <HAL_UART_IRQHandler+0xc6>
 8005510:	23a0      	movs	r3, #160	; 0xa0
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d00b      	beq.n	8005536 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2280      	movs	r2, #128	; 0x80
 800552a:	589b      	ldr	r3, [r3, r2]
 800552c:	2201      	movs	r2, #1
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005536:	23a4      	movs	r3, #164	; 0xa4
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d011      	beq.n	8005566 <HAL_UART_IRQHandler+0xf6>
 8005542:	239c      	movs	r3, #156	; 0x9c
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2201      	movs	r2, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d00b      	beq.n	8005566 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2202      	movs	r2, #2
 8005554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	589b      	ldr	r3, [r3, r2]
 800555c:	2204      	movs	r2, #4
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005566:	23a4      	movs	r3, #164	; 0xa4
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2204      	movs	r2, #4
 800556e:	4013      	ands	r3, r2
 8005570:	d011      	beq.n	8005596 <HAL_UART_IRQHandler+0x126>
 8005572:	239c      	movs	r3, #156	; 0x9c
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	4013      	ands	r3, r2
 800557c:	d00b      	beq.n	8005596 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2204      	movs	r2, #4
 8005584:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2280      	movs	r2, #128	; 0x80
 800558a:	589b      	ldr	r3, [r3, r2]
 800558c:	2202      	movs	r2, #2
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005596:	23a4      	movs	r3, #164	; 0xa4
 8005598:	18fb      	adds	r3, r7, r3
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2208      	movs	r2, #8
 800559e:	4013      	ands	r3, r2
 80055a0:	d017      	beq.n	80055d2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055a2:	23a0      	movs	r3, #160	; 0xa0
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2220      	movs	r2, #32
 80055aa:	4013      	ands	r3, r2
 80055ac:	d105      	bne.n	80055ba <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055ae:	239c      	movs	r3, #156	; 0x9c
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2208      	movs	r2, #8
 80055c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	589b      	ldr	r3, [r3, r2]
 80055c8:	2208      	movs	r2, #8
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80055d2:	23a4      	movs	r3, #164	; 0xa4
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	4013      	ands	r3, r2
 80055de:	d013      	beq.n	8005608 <HAL_UART_IRQHandler+0x198>
 80055e0:	23a0      	movs	r3, #160	; 0xa0
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	04db      	lsls	r3, r3, #19
 80055ea:	4013      	ands	r3, r2
 80055ec:	d00c      	beq.n	8005608 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	; 0x80
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	2220      	movs	r2, #32
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2280      	movs	r2, #128	; 0x80
 800560c:	589b      	ldr	r3, [r3, r2]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d100      	bne.n	8005614 <HAL_UART_IRQHandler+0x1a4>
 8005612:	e1df      	b.n	80059d4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005614:	23a4      	movs	r3, #164	; 0xa4
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2220      	movs	r2, #32
 800561c:	4013      	ands	r3, r2
 800561e:	d00e      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005620:	23a0      	movs	r3, #160	; 0xa0
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2220      	movs	r2, #32
 8005628:	4013      	ands	r3, r2
 800562a:	d008      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	0010      	movs	r0, r2
 800563c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	589b      	ldr	r3, [r3, r2]
 8005644:	2194      	movs	r1, #148	; 0x94
 8005646:	187a      	adds	r2, r7, r1
 8005648:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	4013      	ands	r3, r2
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d004      	beq.n	8005662 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005658:	187b      	adds	r3, r7, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2228      	movs	r2, #40	; 0x28
 800565e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005660:	d047      	beq.n	80056f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fcf7 	bl	8006058 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2240      	movs	r2, #64	; 0x40
 8005672:	4013      	ands	r3, r2
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d137      	bne.n	80056e8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800567e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005680:	2090      	movs	r0, #144	; 0x90
 8005682:	183a      	adds	r2, r7, r0
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	2301      	movs	r3, #1
 8005688:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800568a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568c:	f383 8810 	msr	PRIMASK, r3
}
 8005690:	46c0      	nop			; (mov r8, r8)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2140      	movs	r1, #64	; 0x40
 800569e:	438a      	bics	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056aa:	f383 8810 	msr	PRIMASK, r3
}
 80056ae:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <HAL_UART_IRQHandler+0x2a0>)
 80056be:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fd f9ad 	bl	8002a24 <HAL_DMA_Abort_IT>
 80056ca:	1e03      	subs	r3, r0, #0
 80056cc:	d01a      	beq.n	8005704 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d8:	0018      	movs	r0, r3
 80056da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	e012      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0018      	movs	r0, r3
 80056e2:	f000 f98d 	bl	8005a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e6:	e00d      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 f988 	bl	8005a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e008      	b.n	8005704 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 f983 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	2100      	movs	r1, #0
 8005700:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005702:	e167      	b.n	80059d4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	46c0      	nop			; (mov r8, r8)
    return;
 8005706:	e165      	b.n	80059d4 <HAL_UART_IRQHandler+0x564>
 8005708:	0000080f 	.word	0x0000080f
 800570c:	04000120 	.word	0x04000120
 8005710:	0800611d 	.word	0x0800611d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	2b01      	cmp	r3, #1
 800571a:	d000      	beq.n	800571e <HAL_UART_IRQHandler+0x2ae>
 800571c:	e131      	b.n	8005982 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800571e:	23a4      	movs	r3, #164	; 0xa4
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2210      	movs	r2, #16
 8005726:	4013      	ands	r3, r2
 8005728:	d100      	bne.n	800572c <HAL_UART_IRQHandler+0x2bc>
 800572a:	e12a      	b.n	8005982 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800572c:	23a0      	movs	r3, #160	; 0xa0
 800572e:	18fb      	adds	r3, r7, r3
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2210      	movs	r2, #16
 8005734:	4013      	ands	r3, r2
 8005736:	d100      	bne.n	800573a <HAL_UART_IRQHandler+0x2ca>
 8005738:	e123      	b.n	8005982 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2210      	movs	r2, #16
 8005740:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2240      	movs	r2, #64	; 0x40
 800574a:	4013      	ands	r3, r2
 800574c:	2b40      	cmp	r3, #64	; 0x40
 800574e:	d000      	beq.n	8005752 <HAL_UART_IRQHandler+0x2e2>
 8005750:	e09b      	b.n	800588a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	217e      	movs	r1, #126	; 0x7e
 800575c:	187b      	adds	r3, r7, r1
 800575e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005760:	187b      	adds	r3, r7, r1
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d100      	bne.n	800576a <HAL_UART_IRQHandler+0x2fa>
 8005768:	e136      	b.n	80059d8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2258      	movs	r2, #88	; 0x58
 800576e:	5a9b      	ldrh	r3, [r3, r2]
 8005770:	187a      	adds	r2, r7, r1
 8005772:	8812      	ldrh	r2, [r2, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d300      	bcc.n	800577a <HAL_UART_IRQHandler+0x30a>
 8005778:	e12e      	b.n	80059d8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	187a      	adds	r2, r7, r1
 800577e:	215a      	movs	r1, #90	; 0x5a
 8005780:	8812      	ldrh	r2, [r2, #0]
 8005782:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b20      	cmp	r3, #32
 800578c:	d06e      	beq.n	800586c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578e:	f3ef 8310 	mrs	r3, PRIMASK
 8005792:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005796:	67bb      	str	r3, [r7, #120]	; 0x78
 8005798:	2301      	movs	r3, #1
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579e:	f383 8810 	msr	PRIMASK, r3
}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	498e      	ldr	r1, [pc, #568]	; (80059e8 <HAL_UART_IRQHandler+0x578>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057c0:	f3ef 8310 	mrs	r3, PRIMASK
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	677b      	str	r3, [r7, #116]	; 0x74
 80057ca:	2301      	movs	r3, #1
 80057cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2101      	movs	r1, #1
 80057e2:	438a      	bics	r2, r1
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ec:	f383 8810 	msr	PRIMASK, r3
}
 80057f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8310 	mrs	r3, PRIMASK
 80057f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80057f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057fa:	673b      	str	r3, [r7, #112]	; 0x70
 80057fc:	2301      	movs	r3, #1
 80057fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005802:	f383 8810 	msr	PRIMASK, r3
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2140      	movs	r1, #64	; 0x40
 8005814:	438a      	bics	r2, r1
 8005816:	609a      	str	r2, [r3, #8]
 8005818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800581a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800581e:	f383 8810 	msr	PRIMASK, r3
}
 8005822:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583a:	2301      	movs	r3, #1
 800583c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2110      	movs	r1, #16
 8005852:	438a      	bics	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	0018      	movs	r0, r3
 8005868:	f7fd f8a4 	bl	80029b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2258      	movs	r2, #88	; 0x58
 8005870:	5a9a      	ldrh	r2, [r3, r2]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	215a      	movs	r1, #90	; 0x5a
 8005876:	5a5b      	ldrh	r3, [r3, r1]
 8005878:	b29b      	uxth	r3, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	0011      	movs	r1, r2
 8005882:	0018      	movs	r0, r3
 8005884:	f000 f8c4 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005888:	e0a6      	b.n	80059d8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2258      	movs	r2, #88	; 0x58
 800588e:	5a99      	ldrh	r1, [r3, r2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	225a      	movs	r2, #90	; 0x5a
 8005894:	5a9b      	ldrh	r3, [r3, r2]
 8005896:	b29a      	uxth	r2, r3
 8005898:	208e      	movs	r0, #142	; 0x8e
 800589a:	183b      	adds	r3, r7, r0
 800589c:	1a8a      	subs	r2, r1, r2
 800589e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	225a      	movs	r2, #90	; 0x5a
 80058a4:	5a9b      	ldrh	r3, [r3, r2]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d100      	bne.n	80058ae <HAL_UART_IRQHandler+0x43e>
 80058ac:	e096      	b.n	80059dc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d100      	bne.n	80058b8 <HAL_UART_IRQHandler+0x448>
 80058b6:	e091      	b.n	80059dc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b8:	f3ef 8310 	mrs	r3, PRIMASK
 80058bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c0:	2488      	movs	r4, #136	; 0x88
 80058c2:	193a      	adds	r2, r7, r4
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	2301      	movs	r3, #1
 80058c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f383 8810 	msr	PRIMASK, r3
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4943      	ldr	r1, [pc, #268]	; (80059ec <HAL_UART_IRQHandler+0x57c>)
 80058de:	400a      	ands	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	193b      	adds	r3, r7, r4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f0:	f3ef 8310 	mrs	r3, PRIMASK
 80058f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80058f6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	2484      	movs	r4, #132	; 0x84
 80058fa:	193a      	adds	r2, r7, r4
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	2301      	movs	r3, #1
 8005900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	438a      	bics	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
 800591a:	193b      	adds	r3, r7, r4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	f383 8810 	msr	PRIMASK, r3
}
 8005926:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593a:	f3ef 8310 	mrs	r3, PRIMASK
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005942:	2480      	movs	r4, #128	; 0x80
 8005944:	193a      	adds	r2, r7, r4
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	2301      	movs	r3, #1
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2110      	movs	r1, #16
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	193b      	adds	r3, r7, r4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005972:	183b      	adds	r3, r7, r0
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0011      	movs	r1, r2
 800597a:	0018      	movs	r0, r3
 800597c:	f000 f848 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005980:	e02c      	b.n	80059dc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005982:	23a4      	movs	r3, #164	; 0xa4
 8005984:	18fb      	adds	r3, r7, r3
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2280      	movs	r2, #128	; 0x80
 800598a:	4013      	ands	r3, r2
 800598c:	d00f      	beq.n	80059ae <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800598e:	23a0      	movs	r3, #160	; 0xa0
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	4013      	ands	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d01e      	beq.n	80059e0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	0010      	movs	r0, r2
 80059aa:	4798      	blx	r3
    }
    return;
 80059ac:	e018      	b.n	80059e0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059ae:	23a4      	movs	r3, #164	; 0xa4
 80059b0:	18fb      	adds	r3, r7, r3
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2240      	movs	r2, #64	; 0x40
 80059b6:	4013      	ands	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_UART_IRQHandler+0x572>
 80059ba:	23a0      	movs	r3, #160	; 0xa0
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	4013      	ands	r3, r2
 80059c4:	d00d      	beq.n	80059e2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f000 fbbe 	bl	800614a <UART_EndTransmit_IT>
    return;
 80059ce:	e008      	b.n	80059e2 <HAL_UART_IRQHandler+0x572>
      return;
 80059d0:	46c0      	nop			; (mov r8, r8)
 80059d2:	e006      	b.n	80059e2 <HAL_UART_IRQHandler+0x572>
    return;
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	e004      	b.n	80059e2 <HAL_UART_IRQHandler+0x572>
      return;
 80059d8:	46c0      	nop			; (mov r8, r8)
 80059da:	e002      	b.n	80059e2 <HAL_UART_IRQHandler+0x572>
      return;
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	e000      	b.n	80059e2 <HAL_UART_IRQHandler+0x572>
    return;
 80059e0:	46c0      	nop			; (mov r8, r8)
  }

}
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b02b      	add	sp, #172	; 0xac
 80059e6:	bd90      	pop	{r4, r7, pc}
 80059e8:	fffffeff 	.word	0xfffffeff
 80059ec:	fffffedf 	.word	0xfffffedf

080059f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b002      	add	sp, #8
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	000a      	movs	r2, r1
 8005a1a:	1cbb      	adds	r3, r7, #2
 8005a1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	46bd      	mov	sp, r7
 8005a22:	b002      	add	sp, #8
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a30:	231e      	movs	r3, #30
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a97      	ldr	r2, [pc, #604]	; (8005cb4 <UART_SetConfig+0x28c>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a92      	ldr	r2, [pc, #584]	; (8005cb8 <UART_SetConfig+0x290>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4a89      	ldr	r2, [pc, #548]	; (8005cbc <UART_SetConfig+0x294>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a85      	ldr	r2, [pc, #532]	; (8005cc0 <UART_SetConfig+0x298>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d127      	bne.n	8005afe <UART_SetConfig+0xd6>
 8005aae:	4b85      	ldr	r3, [pc, #532]	; (8005cc4 <UART_SetConfig+0x29c>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d00d      	beq.n	8005ad6 <UART_SetConfig+0xae>
 8005aba:	d81b      	bhi.n	8005af4 <UART_SetConfig+0xcc>
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d014      	beq.n	8005aea <UART_SetConfig+0xc2>
 8005ac0:	d818      	bhi.n	8005af4 <UART_SetConfig+0xcc>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <UART_SetConfig+0xa4>
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d00a      	beq.n	8005ae0 <UART_SetConfig+0xb8>
 8005aca:	e013      	b.n	8005af4 <UART_SetConfig+0xcc>
 8005acc:	231f      	movs	r3, #31
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e035      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005ad6:	231f      	movs	r3, #31
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	2202      	movs	r2, #2
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e030      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005ae0:	231f      	movs	r3, #31
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e02b      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005aea:	231f      	movs	r3, #31
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	2208      	movs	r2, #8
 8005af0:	701a      	strb	r2, [r3, #0]
 8005af2:	e026      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005af4:	231f      	movs	r3, #31
 8005af6:	18fb      	adds	r3, r7, r3
 8005af8:	2210      	movs	r2, #16
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e021      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <UART_SetConfig+0x2a0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d104      	bne.n	8005b12 <UART_SetConfig+0xea>
 8005b08:	231f      	movs	r3, #31
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	e017      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6d      	ldr	r2, [pc, #436]	; (8005ccc <UART_SetConfig+0x2a4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d104      	bne.n	8005b26 <UART_SetConfig+0xfe>
 8005b1c:	231f      	movs	r3, #31
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e00d      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <UART_SetConfig+0x2a8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d104      	bne.n	8005b3a <UART_SetConfig+0x112>
 8005b30:	231f      	movs	r3, #31
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	e003      	b.n	8005b42 <UART_SetConfig+0x11a>
 8005b3a:	231f      	movs	r3, #31
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	2210      	movs	r2, #16
 8005b40:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d15d      	bne.n	8005c0a <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8005b4e:	231f      	movs	r3, #31
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d015      	beq.n	8005b84 <UART_SetConfig+0x15c>
 8005b58:	dc18      	bgt.n	8005b8c <UART_SetConfig+0x164>
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d00d      	beq.n	8005b7a <UART_SetConfig+0x152>
 8005b5e:	dc15      	bgt.n	8005b8c <UART_SetConfig+0x164>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <UART_SetConfig+0x142>
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d005      	beq.n	8005b74 <UART_SetConfig+0x14c>
 8005b68:	e010      	b.n	8005b8c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b6a:	f7fe fe43 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8005b6e:	0003      	movs	r3, r0
 8005b70:	61bb      	str	r3, [r7, #24]
        break;
 8005b72:	e012      	b.n	8005b9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b57      	ldr	r3, [pc, #348]	; (8005cd4 <UART_SetConfig+0x2ac>)
 8005b76:	61bb      	str	r3, [r7, #24]
        break;
 8005b78:	e00f      	b.n	8005b9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fe fdcb 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005b7e:	0003      	movs	r3, r0
 8005b80:	61bb      	str	r3, [r7, #24]
        break;
 8005b82:	e00a      	b.n	8005b9a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	61bb      	str	r3, [r7, #24]
        break;
 8005b8a:	e006      	b.n	8005b9a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005b90:	231e      	movs	r3, #30
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	2201      	movs	r2, #1
 8005b96:	701a      	strb	r2, [r3, #0]
        break;
 8005b98:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d100      	bne.n	8005ba2 <UART_SetConfig+0x17a>
 8005ba0:	e07b      	b.n	8005c9a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	005a      	lsls	r2, r3, #1
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	18d2      	adds	r2, r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	0010      	movs	r0, r2
 8005bb6:	f7fa faa7 	bl	8000108 <__udivsi3>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	2b0f      	cmp	r3, #15
 8005bc4:	d91c      	bls.n	8005c00 <UART_SetConfig+0x1d8>
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	025b      	lsls	r3, r3, #9
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d217      	bcs.n	8005c00 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	200e      	movs	r0, #14
 8005bd6:	183b      	adds	r3, r7, r0
 8005bd8:	210f      	movs	r1, #15
 8005bda:	438a      	bics	r2, r1
 8005bdc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2207      	movs	r2, #7
 8005be6:	4013      	ands	r3, r2
 8005be8:	b299      	uxth	r1, r3
 8005bea:	183b      	adds	r3, r7, r0
 8005bec:	183a      	adds	r2, r7, r0
 8005bee:	8812      	ldrh	r2, [r2, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	183a      	adds	r2, r7, r0
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	e04c      	b.n	8005c9a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8005c00:	231e      	movs	r3, #30
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e047      	b.n	8005c9a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c0a:	231f      	movs	r3, #31
 8005c0c:	18fb      	adds	r3, r7, r3
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d015      	beq.n	8005c40 <UART_SetConfig+0x218>
 8005c14:	dc18      	bgt.n	8005c48 <UART_SetConfig+0x220>
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d00d      	beq.n	8005c36 <UART_SetConfig+0x20e>
 8005c1a:	dc15      	bgt.n	8005c48 <UART_SetConfig+0x220>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <UART_SetConfig+0x1fe>
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d005      	beq.n	8005c30 <UART_SetConfig+0x208>
 8005c24:	e010      	b.n	8005c48 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c26:	f7fe fde5 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	61bb      	str	r3, [r7, #24]
        break;
 8005c2e:	e012      	b.n	8005c56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c30:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <UART_SetConfig+0x2ac>)
 8005c32:	61bb      	str	r3, [r7, #24]
        break;
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c36:	f7fe fd6d 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	61bb      	str	r3, [r7, #24]
        break;
 8005c3e:	e00a      	b.n	8005c56 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	61bb      	str	r3, [r7, #24]
        break;
 8005c46:	e006      	b.n	8005c56 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c4c:	231e      	movs	r3, #30
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
        break;
 8005c54:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01e      	beq.n	8005c9a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	085a      	lsrs	r2, r3, #1
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	18d2      	adds	r2, r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	0010      	movs	r0, r2
 8005c6e:	f7fa fa4b 	bl	8000108 <__udivsi3>
 8005c72:	0003      	movs	r3, r0
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d909      	bls.n	8005c92 <UART_SetConfig+0x26a>
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	025b      	lsls	r3, r3, #9
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d204      	bcs.n	8005c92 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e003      	b.n	8005c9a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8005c92:	231e      	movs	r3, #30
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005ca6:	231e      	movs	r3, #30
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b008      	add	sp, #32
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	efff69f3 	.word	0xefff69f3
 8005cb8:	ffffcfff 	.word	0xffffcfff
 8005cbc:	fffff4ff 	.word	0xfffff4ff
 8005cc0:	40013800 	.word	0x40013800
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40004400 	.word	0x40004400
 8005ccc:	40004800 	.word	0x40004800
 8005cd0:	40004c00 	.word	0x40004c00
 8005cd4:	007a1200 	.word	0x007a1200

08005cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4a4a      	ldr	r2, [pc, #296]	; (8005e1c <UART_AdvFeatureConfig+0x144>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	0019      	movs	r1, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2202      	movs	r2, #2
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4a43      	ldr	r2, [pc, #268]	; (8005e20 <UART_AdvFeatureConfig+0x148>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	0019      	movs	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2204      	movs	r2, #4
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d00b      	beq.n	8005d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4a3b      	ldr	r2, [pc, #236]	; (8005e24 <UART_AdvFeatureConfig+0x14c>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	0019      	movs	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4a34      	ldr	r2, [pc, #208]	; (8005e28 <UART_AdvFeatureConfig+0x150>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d00b      	beq.n	8005d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <UART_AdvFeatureConfig+0x154>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2220      	movs	r2, #32
 8005d90:	4013      	ands	r3, r2
 8005d92:	d00b      	beq.n	8005dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <UART_AdvFeatureConfig+0x158>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2240      	movs	r2, #64	; 0x40
 8005db2:	4013      	ands	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	4a1d      	ldr	r2, [pc, #116]	; (8005e34 <UART_AdvFeatureConfig+0x15c>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	0019      	movs	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	035b      	lsls	r3, r3, #13
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d10b      	bne.n	8005df2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a15      	ldr	r2, [pc, #84]	; (8005e38 <UART_AdvFeatureConfig+0x160>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	0019      	movs	r1, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d00b      	beq.n	8005e14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <UART_AdvFeatureConfig+0x164>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	0019      	movs	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	fffdffff 	.word	0xfffdffff
 8005e20:	fffeffff 	.word	0xfffeffff
 8005e24:	fffbffff 	.word	0xfffbffff
 8005e28:	ffff7fff 	.word	0xffff7fff
 8005e2c:	ffffefff 	.word	0xffffefff
 8005e30:	ffffdfff 	.word	0xffffdfff
 8005e34:	ffefffff 	.word	0xffefffff
 8005e38:	ff9fffff 	.word	0xff9fffff
 8005e3c:	fff7ffff 	.word	0xfff7ffff

08005e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e50:	f7fb fdc8 	bl	80019e4 <HAL_GetTick>
 8005e54:	0003      	movs	r3, r0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2208      	movs	r2, #8
 8005e60:	4013      	ands	r3, r2
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d10c      	bne.n	8005e80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2280      	movs	r2, #128	; 0x80
 8005e6a:	0391      	lsls	r1, r2, #14
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <UART_CheckIdleState+0x8c>)
 8005e70:	9200      	str	r2, [sp, #0]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f000 f82c 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005e78:	1e03      	subs	r3, r0, #0
 8005e7a:	d001      	beq.n	8005e80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e021      	b.n	8005ec4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2204      	movs	r2, #4
 8005e88:	4013      	ands	r3, r2
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d10c      	bne.n	8005ea8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2280      	movs	r2, #128	; 0x80
 8005e92:	03d1      	lsls	r1, r2, #15
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <UART_CheckIdleState+0x8c>)
 8005e98:	9200      	str	r2, [sp, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f000 f818 	bl	8005ed0 <UART_WaitOnFlagUntilTimeout>
 8005ea0:	1e03      	subs	r3, r0, #0
 8005ea2:	d001      	beq.n	8005ea8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e00d      	b.n	8005ec4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2274      	movs	r2, #116	; 0x74
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b004      	add	sp, #16
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	01ffffff 	.word	0x01ffffff

08005ed0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b094      	sub	sp, #80	; 0x50
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	1dfb      	adds	r3, r7, #7
 8005ede:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ee0:	e0a3      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	d100      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0x1a>
 8005ee8:	e09f      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eea:	f7fb fd7b 	bl	80019e4 <HAL_GetTick>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d302      	bcc.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d13d      	bne.n	8005f7c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f00:	f3ef 8310 	mrs	r3, PRIMASK
 8005f04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f08:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	f383 8810 	msr	PRIMASK, r3
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	494c      	ldr	r1, [pc, #304]	; (8006054 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005f22:	400a      	ands	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	f383 8810 	msr	PRIMASK, r3
}
 8005f30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f32:	f3ef 8310 	mrs	r3, PRIMASK
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f383 8810 	msr	PRIMASK, r3
}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2101      	movs	r1, #1
 8005f54:	438a      	bics	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f5e:	f383 8810 	msr	PRIMASK, r3
}
 8005f62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2274      	movs	r2, #116	; 0x74
 8005f74:	2100      	movs	r1, #0
 8005f76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e067      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2204      	movs	r2, #4
 8005f84:	4013      	ands	r3, r2
 8005f86:	d050      	beq.n	800602a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	401a      	ands	r2, r3
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d146      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	0112      	lsls	r2, r2, #4
 8005fa4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005faa:	613b      	str	r3, [r7, #16]
  return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f383 8810 	msr	PRIMASK, r3
}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4923      	ldr	r1, [pc, #140]	; (8006054 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005fc8:	400a      	ands	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	f383 8810 	msr	PRIMASK, r3
}
 8005fd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fde:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	438a      	bics	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
 8005ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	f383 8810 	msr	PRIMASK, r3
}
 8006008:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2280      	movs	r2, #128	; 0x80
 800601a:	2120      	movs	r1, #32
 800601c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2274      	movs	r2, #116	; 0x74
 8006022:	2100      	movs	r1, #0
 8006024:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e010      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4013      	ands	r3, r2
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	425a      	negs	r2, r3
 800603a:	4153      	adcs	r3, r2
 800603c:	b2db      	uxtb	r3, r3
 800603e:	001a      	movs	r2, r3
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d100      	bne.n	800604a <UART_WaitOnFlagUntilTimeout+0x17a>
 8006048:	e74b      	b.n	8005ee2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	0018      	movs	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	b014      	add	sp, #80	; 0x50
 8006052:	bd80      	pop	{r7, pc}
 8006054:	fffffe5f 	.word	0xfffffe5f

08006058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	; 0x38
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006060:	f3ef 8310 	mrs	r3, PRIMASK
 8006064:	617b      	str	r3, [r7, #20]
  return(result);
 8006066:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006068:	637b      	str	r3, [r7, #52]	; 0x34
 800606a:	2301      	movs	r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	46c0      	nop			; (mov r8, r8)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4925      	ldr	r1, [pc, #148]	; (8006118 <UART_EndRxTransfer+0xc0>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006092:	f3ef 8310 	mrs	r3, PRIMASK
 8006096:	623b      	str	r3, [r7, #32]
  return(result);
 8006098:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
 800609c:	2301      	movs	r3, #1
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2101      	movs	r1, #1
 80060b4:	438a      	bics	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d118      	bne.n	80060fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060cc:	f3ef 8310 	mrs	r3, PRIMASK
 80060d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d6:	2301      	movs	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f383 8810 	msr	PRIMASK, r3
}
 80060e0:	46c0      	nop			; (mov r8, r8)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2110      	movs	r1, #16
 80060ee:	438a      	bics	r2, r1
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f383 8810 	msr	PRIMASK, r3
}
 80060fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b00e      	add	sp, #56	; 0x38
 8006116:	bd80      	pop	{r7, pc}
 8006118:	fffffedf 	.word	0xfffffedf

0800611c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	225a      	movs	r2, #90	; 0x5a
 800612e:	2100      	movs	r1, #0
 8006130:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2252      	movs	r2, #82	; 0x52
 8006136:	2100      	movs	r1, #0
 8006138:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0018      	movs	r0, r3
 800613e:	f7ff fc5f 	bl	8005a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	46bd      	mov	sp, r7
 8006146:	b004      	add	sp, #16
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006152:	f3ef 8310 	mrs	r3, PRIMASK
 8006156:	60bb      	str	r3, [r7, #8]
  return(result);
 8006158:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	2301      	movs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f383 8810 	msr	PRIMASK, r3
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2140      	movs	r1, #64	; 0x40
 8006174:	438a      	bics	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f383 8810 	msr	PRIMASK, r3
}
 8006182:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f7ff fc2c 	bl	80059f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	46bd      	mov	sp, r7
 800619c:	b006      	add	sp, #24
 800619e:	bd80      	pop	{r7, pc}

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	; (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	; (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	2600      	movs	r6, #0
 80061b2:	f000 f82b 	bl	800620c <_init>
 80061b6:	4d0a      	ldr	r5, [pc, #40]	; (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	; (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	00b3      	lsls	r3, r6, #2
 80061c6:	58eb      	ldr	r3, [r5, r3]
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	00b3      	lsls	r3, r6, #2
 80061d0:	58eb      	ldr	r3, [r5, r3]
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	080062e0 	.word	0x080062e0
 80061dc:	080062e0 	.word	0x080062e0
 80061e0:	080062e0 	.word	0x080062e0
 80061e4:	080062e4 	.word	0x080062e4

080061e8 <memcpy>:
 80061e8:	2300      	movs	r3, #0
 80061ea:	b510      	push	{r4, lr}
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d100      	bne.n	80061f2 <memcpy+0xa>
 80061f0:	bd10      	pop	{r4, pc}
 80061f2:	5ccc      	ldrb	r4, [r1, r3]
 80061f4:	54c4      	strb	r4, [r0, r3]
 80061f6:	3301      	adds	r3, #1
 80061f8:	e7f8      	b.n	80061ec <memcpy+0x4>

080061fa <memset>:
 80061fa:	0003      	movs	r3, r0
 80061fc:	1882      	adds	r2, r0, r2
 80061fe:	4293      	cmp	r3, r2
 8006200:	d100      	bne.n	8006204 <memset+0xa>
 8006202:	4770      	bx	lr
 8006204:	7019      	strb	r1, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	e7f9      	b.n	80061fe <memset+0x4>
	...

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
